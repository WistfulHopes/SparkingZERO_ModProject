<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EpicGames.UHT</name>
    </assembly>
    <members>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtCodeGenerator.GetSingletonName(EpicGames.UHT.Types.UhtObject,System.Boolean)">
            <summary>
            Return the singleton name for an object
            </summary>
            <param name="obj">The object in question.</param>
            <param name="registered">If true, return the registered singleton name.  Otherwise return the unregistered.</param>
            <returns>Singleton name or "nullptr" if Object is null</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtCodeGenerator.GetExternalDecl(EpicGames.UHT.Types.UhtObject,System.Boolean)">
            <summary>
            Return the external declaration for an object
            </summary>
            <param name="obj">The object in question.</param>
            <param name="registered">If true, return the registered external declaration.  Otherwise return the unregistered.</param>
            <returns>External declaration</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtCodeGenerator.GetExternalDecl(System.Int32,System.Boolean)">
            <summary>
            Return the external declaration for an object
            </summary>
            <param name="objectIndex">The object in question.</param>
            <param name="registered">If true, return the registered external declaration.  Otherwise return the unregistered.</param>
            <returns>External declaration</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtCodeGenerator.GetCrossReference(EpicGames.UHT.Types.UhtObject,System.Boolean)">
            <summary>
            Return the cross reference for an object
            </summary>
            <param name="obj">The object in question.</param>
            <param name="registered">If true, return the registered cross reference.  Otherwise return the unregistered.</param>
            <returns>Cross reference</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtCodeGenerator.GetCrossReference(System.Int32,System.Boolean)">
            <summary>
            Return the cross reference for an object
            </summary>
            <param name="objectIndex">The object in question.</param>
            <param name="registered">If true, return the registered cross reference.  Otherwise return the unregistered.</param>
            <returns>Cross reference</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtCodeGenerator.GetSortedHeaderFiles(EpicGames.UHT.Types.UhtPackage)">
            <summary>
            Return a package's sorted header file list of all header files that or referenced or have declarations.
            </summary>
            <param name="package">The package in question</param>
            <returns>Sorted list of the header files</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGenerator.ShouldExportFunction(EpicGames.UHT.Types.UhtFunction)">
            <summary>
            Determines whether the glue version of the specified native function should be exported.
            </summary>
            <param name="function">The function to check</param>
            <returns>True if the glue version of the function should be exported.</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorCppFile.#ctor(EpicGames.UHT.Exporters.CodeGen.UhtCodeGenerator,EpicGames.UHT.Types.UhtPackage,EpicGames.UHT.Types.UhtHeaderFile)">
            <summary>
            Construct an instance of this generator object
            </summary>
            <param name="codeGenerator">The base code generator</param>
            <param name="package">Package being generated</param>
            <param name="headerFile">Header file being generated</param>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorCppFile.Generate(EpicGames.UHT.Utils.IUhtExportFactory)">
            <summary>
            For a given UE header file, generated the generated H file
            </summary>
            <param name="factory">Requesting factory</param>
        </member>
        <member name="T:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorCppFileStringBuilderExtensinos">
            <summary>
            Collection of string builder extensions used to generate the cpp files for individual headers.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorCppFileStringBuilderExtensinos.AppendFunctionThunkParameterNames(System.Text.StringBuilder,EpicGames.UHT.Types.UhtFunction)">
            <summary>
            Append the parameter names for a function
            </summary>
            <param name="builder">Destination builder</param>
            <param name="function">Function in question</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorCppFileStringBuilderExtensinos.AppendPropertiesParams(System.Text.StringBuilder,EpicGames.UHT.Types.UhtStruct,System.String,System.Int32,System.String)">
            <summary>
            Append the parameter list and count as arguments to a structure constructor
            </summary>
            <param name="builder">Destination builder</param>
            <param name="structObj">Structure in question</param>
            <param name="staticsName">Name of the statics section for this structure</param>
            <param name="tabs">Number of tabs to precede the line</param>
            <param name="endl">String used to terminate a line</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorCppFileStringBuilderExtensinos.AppendPropertiesParamsList(System.Text.StringBuilder,EpicGames.UHT.Types.UhtStruct,System.String,System.Int32,System.String)">
            <summary>
            Append the parameter list as an argument to a structure constructor
            </summary>
            <param name="builder">Destination builder</param>
            <param name="structObj">Structure in question</param>
            <param name="staticsName">Name of the statics section for this structure</param>
            <param name="tabs">Number of tabs to precede the line</param>
            <param name="endl">String used to terminate a line</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorCppFileStringBuilderExtensinos.AppendPropertiesParamsCount(System.Text.StringBuilder,EpicGames.UHT.Types.UhtStruct,System.String,System.Int32,System.String)">
            <summary>
            Append the parameter count as an argument to a structure constructor
            </summary>
            <param name="builder">Destination builder</param>
            <param name="structObj">Structure in question</param>
            <param name="staticsName">Name of the statics section for this structure</param>
            <param name="tabs">Number of tabs to precede the line</param>
            <param name="endl">String used to terminate a line</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorCppFileStringBuilderExtensinos.AppendArray(System.Text.StringBuilder,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Append the given array list and count as arguments to a structure constructor
            </summary>
            <param name="builder">Destination builder</param>
            <param name="isEmpty">If true, the array list is empty</param>
            <param name="allEditorOnlyData">If true, the array is all editor only data</param>
            <param name="staticsName">Name of the statics section</param>
            <param name="arrayName">The name of the arrray</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorHFile.#ctor(EpicGames.UHT.Exporters.CodeGen.UhtCodeGenerator,EpicGames.UHT.Types.UhtPackage,EpicGames.UHT.Types.UhtHeaderFile)">
            <summary>
            Construct an instance of this generator object
            </summary>
            <param name="codeGenerator">The base code generator</param>
            <param name="package">Package being generated</param>
            <param name="headerFile">Header file being generated</param>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorHFile.Generate(EpicGames.UHT.Utils.IUhtExportFactory)">
            <summary>
            For a given UE header file, generated the generated H file
            </summary>
            <param name="factory">Requesting factory</param>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorHFile.AppendStandardConstructors(System.Text.StringBuilder,EpicGames.UHT.Types.UhtClass,System.String)">
            <summary>
            Generates standard constructor declarations
            </summary>
            <param name="builder">Output builder</param>
            <param name="classObj">Class being exported</param>
            <param name="api">API text to be used</param>
            <returns>Output builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorHFile.AppendEnhancedConstructors(System.Text.StringBuilder,EpicGames.UHT.Types.UhtClass,System.String)">
            <summary>
            Generates enhanced constructor declaration.
            </summary>
            <param name="builder">Output builder</param>
            <param name="classObj">Class being exported</param>
            <param name="api">API text to be used</param>
            <returns>Output builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorHFile.AppendVTableHelperCtorAndCaller(System.Text.StringBuilder,EpicGames.UHT.Types.UhtClass,System.String)">
            <summary>
            Generates vtable helper caller and eventual constructor body.
            </summary>
            <param name="builder">Output builder</param>
            <param name="classObj">Class being exported</param>
            <param name="api">API text to be used</param>
            <returns>Output builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorHFile.AppendCopyConstructorDefinition(System.Text.StringBuilder,EpicGames.UHT.Types.UhtClass,System.String)">
            <summary>
            Generates private copy-constructor declaration.
            </summary>
            <param name="builder">Output builder</param>
            <param name="classObj">Class being exported</param>
            <param name="api">API text to be used</param>
            <returns>Output builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorHFile.AppendDestructorDefinition(System.Text.StringBuilder,EpicGames.UHT.Types.UhtClass,System.String)">
            <summary>
            Generates a destructor
            </summary>
            <param name="builder">Output builder</param>
            <param name="classObj">Class being exported</param>
            <param name="api">API text to be used</param>
            <returns>Output builder</returns>
        </member>
        <member name="T:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorHFile.ConstructorType">
            <summary>
            Type of constructor on the class regardless of explicit or generated.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorHFile.GetConstructorType(EpicGames.UHT.Types.UhtClass)">
            <summary>
            Return the type of constructor the class will have regardless of if one has been explicitly 
            declared or will be generated.
            </summary>
            <param name="classObj">Class in question</param>
            <returns>Constructor type</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorHFile.AppendConstructorDefinition(System.Text.StringBuilder,EpicGames.UHT.Types.UhtClass,System.String)">
            <summary>
            Generates private copy-constructor declaration.
            </summary>
            <param name="builder">Output builder</param>
            <param name="classObj">Class being exported</param>
            <param name="api">API text to be used</param>
            <returns>Output builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorHFile.AppendDefaultConstructorCallDefinition(System.Text.StringBuilder,EpicGames.UHT.Types.UhtClass)">
            <summary>
            Generates constructor call definition
            </summary>
            <param name="builder">Output builder</param>
            <param name="classObj">Class being exported</param>
            <returns>Output builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorHFile.AppendClassGeneratedBody(System.Text.StringBuilder,EpicGames.UHT.Types.UhtClass,System.String)">
            <summary>
            Generates generated body code for classes
            </summary>
            <param name="builder">Output builder</param>
            <param name="classObj">Class being exported</param>
            <param name="api">API text to be used</param>
            <returns>Output builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorHFile.AppendCommonGeneratedBody(System.Text.StringBuilder,EpicGames.UHT.Types.UhtClass,System.String)">
            <summary>
            Generates standard generated body code for interfaces and non-interfaces
            </summary>
            <param name="builder">Output builder</param>
            <param name="classObj">Class being exported</param>
            <param name="api">API text to be used</param>
            <returns>Output builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorHFile.AppendClassFlags(System.Text.StringBuilder,EpicGames.UHT.Types.UhtClass)">
            <summary>
            Appends the class flags in the form of CLASS_Something|CLASS_Something which represents all class flags that are set 
            for the specified class which need to be exported as part of the DECLARE_CLASS macro
            </summary>
            <param name="builder">Output builder</param>
            <param name="classObj">Class in question</param>
            <returns>Output builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtHeaderCodeGeneratorHFile.AppendGeneratedMacroDeprecationWarning(System.Text.StringBuilder,System.String)">
            <summary>
            Appends preprocessor string to emit GENERATED_U*_BODY() macro is deprecated.
            </summary>
            <param name="builder">Output builder</param>
            <param name="macroName">Name of the macro to deprecate</param>
            <returns>Output builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtPackageCodeGenerator.GetSingletonName(EpicGames.UHT.Types.UhtObject,System.Boolean)">
            <summary>
            Return the singleton name for an object
            </summary>
            <param name="obj">The object in question.</param>
            <param name="registered">If true, return the registered singleton name.  Otherwise return the unregistered.</param>
            <returns>Singleton name of "nullptr" if Object is null</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtPackageCodeGenerator.GetExternalDecl(EpicGames.UHT.Types.UhtObject,System.Boolean)">
            <summary>
            Return the external declaration for an object
            </summary>
            <param name="obj">The object in question.</param>
            <param name="registered">If true, return the registered external declaration.  Otherwise return the unregistered.</param>
            <returns>External declaration</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtPackageCodeGenerator.GetExternalDecl(System.Int32,System.Boolean)">
            <summary>
            Return the external declaration for an object
            </summary>
            <param name="objectIndex">The object in question.</param>
            <param name="registered">If true, return the registered external declaration.  Otherwise return the unregistered.</param>
            <returns>External declaration</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtPackageCodeGenerator.GetCrossReference(EpicGames.UHT.Types.UhtObject,System.Boolean)">
            <summary>
            Return the cross reference for an object
            </summary>
            <param name="obj">The object in question.</param>
            <param name="registered">If true, return the registered cross reference.  Otherwise return the unregistered.</param>
            <returns>Cross reference</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtPackageCodeGenerator.GetCrossReference(System.Int32,System.Boolean)">
            <summary>
            Return the cross reference for an object
            </summary>
            <param name="objectIndex">The object in question.</param>
            <param name="registered">If true, return the registered cross reference.  Otherwise return the unregistered.</param>
            <returns>Cross reference</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtPackageCodeGenerator.IsDelegateFunction(EpicGames.UHT.Types.UhtField)">
            <summary>
            Test to see if the given field is a delegate function
            </summary>
            <param name="field">Field to be tested</param>
            <returns>True if the field is a delegate function</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtPackageCodeGenerator.HashCombine(System.UInt32,System.UInt32)">
             <summary>
             Combines two hash values to get a third.
             Note - this function is not commutative.
            
             This function cannot change for backward compatibility reasons.
             You may want to choose HashCombineFast for a better in-memory hash combining function.
             
             NOTE: This is a copy of the method in TypeHash.h
             </summary>
             <param name="A">Hash to merge</param>
             <param name="C">Previously combined hash</param>
             <returns>Resulting hash value</returns>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtPackageCodeGeneratorCppFile.#ctor(EpicGames.UHT.Exporters.CodeGen.UhtCodeGenerator,EpicGames.UHT.Types.UhtPackage)">
            <summary>
            Construct an instance of this generator object
            </summary>
            <param name="codeGenerator">The base code generator</param>
            <param name="package">Package being generated</param>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtPackageCodeGeneratorCppFile.Generate(EpicGames.UHT.Utils.IUhtExportFactory,System.Collections.Generic.List{EpicGames.UHT.Types.UhtHeaderFile})">
            <summary>
            For a given UE header file, generated the generated cpp file
            </summary>
            <param name="factory">Requesting factory</param>
            <param name="packageSortedHeaders">Sorted list of headers by name of all headers in the package</param>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtPackageCodeGeneratorHFile.#ctor(EpicGames.UHT.Exporters.CodeGen.UhtCodeGenerator,EpicGames.UHT.Types.UhtPackage)">
            <summary>
            Construct an instance of this generator object
            </summary>
            <param name="codeGenerator">The base code generator</param>
            <param name="package">Package being generated</param>
        </member>
        <member name="M:EpicGames.UHT.Exporters.CodeGen.UhtPackageCodeGeneratorHFile.Generate(EpicGames.UHT.Utils.IUhtExportFactory,System.Collections.Generic.List{EpicGames.UHT.Types.UhtHeaderFile})">
            <summary>
            For a given UE header file, generated the generated H file
            </summary>
            <param name="factory">Requesting factory</param>
            <param name="packageSortedHeaders">Sorted list of headers by name of all headers in the package</param>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtClassParser">
            <summary>
            UCLASS parser
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtEnumParser">
            <summary>
            UENUM parser
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtAdvancedDisplayParameterHandler">
            AdvancedDisplay can be used in two ways:
            1. 'AdvancedDisplay = "3"' - the number tells how many parameters (from beginning) should NOT BE marked
            2. 'AdvancedDisplay = "AttachPointName, Location, LocationType"' - list the parameters, that should BE marked
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtAdvancedDisplayParameterHandler.ShouldMarkParameter(EpicGames.Core.StringView)">
            return if given parameter should be marked as Advance View, 
            the function should be called only once for any parameter
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtAdvancedDisplayParameterHandler.CanMarkMore">
            return if more parameters can be marked 
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtFunctionParser">
            <summary>
            UFUNCTION parser
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtParseResult">
            <summary>
            Keyword parse results
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtParseResult.Handled">
            <summary>
            Keyword was handled
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtParseResult.Unhandled">
            <summary>
            Keyword wasn't handled (more attempts will be made to match)
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtParseResult.Invalid">
            <summary>
            Keyword is invalid
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtCompilerDirective">
            <summary>
            Compiler directives
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtCompilerDirective.None">
            <summary>
            No compile directives
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtCompilerDirective.CPPBlock">
            <summary>
            This indicates we are in a "#if CPP" block
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtCompilerDirective.NotCPPBlock">
            <summary>
            This indicates we are in a "#if !CPP" block
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtCompilerDirective.ZeroBlock">
            <summary>
            This indicates we are in a "#if 0" block
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtCompilerDirective.OneBlock">
            <summary>
            This indicates we are in a "#if 1" block
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtCompilerDirective.WithEditor">
            <summary>
            This indicates we are in a "#if WITH_EDITOR" block
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtCompilerDirective.WithEditorOnlyData">
            <summary>
            This indicates we are in a "#if WITH_EDITORONLY_DATA" block
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtCompilerDirective.WithHotReload">
            <summary>
            This indicates we are in a "#if WITH_HOT_RELOAD" block
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtCompilerDirective.Unrecognized">
            <summary>
            This directive is unrecognized and does not change the code generation at all
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtCompilerDirectiveExtensions">
            <summary>
            Helper methods for testing flags.  These methods perform better than the generic HasFlag which hits
            the GC and stalls.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtCompilerDirectiveExtensions.HasAnyFlags(EpicGames.UHT.Parsers.UhtCompilerDirective,EpicGames.UHT.Parsers.UhtCompilerDirective)">
            <summary>
            Test to see if any of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if any of the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtCompilerDirectiveExtensions.HasAllFlags(EpicGames.UHT.Parsers.UhtCompilerDirective,EpicGames.UHT.Parsers.UhtCompilerDirective)">
            <summary>
            Test to see if all of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if all the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtCompilerDirectiveExtensions.HasExactFlags(EpicGames.UHT.Parsers.UhtCompilerDirective,EpicGames.UHT.Parsers.UhtCompilerDirective,EpicGames.UHT.Parsers.UhtCompilerDirective)">
            <summary>
            Test to see if a specific set of flags have a specific value.
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <param name="matchFlags">Expected value of the tested flags</param>
            <returns>True if the given flags have a specific value.</returns>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtAccessSpecifierKeywords">
            <summary>
            Specifiers for public, private, and protected
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtHeaderFileParser">
            <summary>
            Header file parser
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtHeaderFileParser.HeaderFile">
            <summary>
            Header file being parsed
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtHeaderFileParser.TokenReader">
            <summary>
            Token reader for the header
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtHeaderFileParser.IsPartOfEngine">
            <summary>
            If true, this header file belongs to the engine
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtHeaderFileParser.SpottedAutogeneratedHeaderInclude">
            <summary>
            If true, the inclusion of the generated header file was seen
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtHeaderFileParser.PropertyParser">
            <summary>
            For a given header file, we share a common property parser to reduce the number of allocations.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtHeaderFileParser.RestrictedPreprocessorContext">
            <summary>
            If set, the preprocessor is run in a C++ UHT compatibility mode where only a subset
            of #if class of preprocessor statements are allowed.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtHeaderFileParser._compilerDirectives">
            <summary>
            Stack of current #if states
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtHeaderFileParser._savedCompilerDirectives">
            <summary>
            Stack of current #if states saved as part of the preprocessor state
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtHeaderFileParser._topScope">
            <summary>
            Current top of the parsing scopes.  Classes, structures and functions all allocate scopes.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtHeaderFileParser.Parse(EpicGames.UHT.Types.UhtHeaderFile)">
            <summary>
            Parse the given header file
            </summary>
            <param name="headerFile">Header file to parse</param>
            <returns>Parser</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtHeaderFileParser.PushScope(EpicGames.UHT.Parsers.UhtParsingScope)">
            <summary>
            Push a new scope
            </summary>
            <param name="scope">Scope to push</param>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Throw if the new scope isn't parented by the current scope</exception>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtHeaderFileParser.PopScope(EpicGames.UHT.Parsers.UhtParsingScope)">
            <summary>
            Pop the given scope
            </summary>
            <param name="scope">Scope to be popped</param>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Thrown if the given scope isn't the top scope</exception>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtHeaderFileParser.GetCachedPropertyParser">
            <summary>
            Get the cached property parser
            </summary>
            <returns>Property parser</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtHeaderFileParser.GetCurrentCompositeCompilerDirective">
            <summary>
            Return the current compiler directive
            </summary>
            <returns>Enumeration flags for all active compiler directives</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtHeaderFileParser.GetCurrentNonCompositeCompilerDirective">
            <summary>
            Get the current compiler directive without any parent scopes merged in
            </summary>
            <returns>Current compiler directive</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtHeaderFileParser.ParsePreprocessorDirective(EpicGames.UHT.Tokenizer.UhtToken@,System.Boolean,System.Boolean@,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtHeaderFileParser.SaveState">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtHeaderFileParser.RestoreState">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtHeaderFileParser.ParseStatements">
            <summary>
            Parse all statements in the header file
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtHeaderFileParser.ParseStatements(System.Char,System.Char,System.Boolean)">
            <summary>
            Parse the statements between the given symbols
            </summary>
            <param name="initiator">Starting symbol</param>
            <param name="terminator">Ending symbol</param>
            <param name="logUnhandledKeywords">If true, log any unhandled keywords</param>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtHeaderFileParser.ParseStatement(EpicGames.UHT.Parsers.UhtParsingScope,EpicGames.UHT.Tokenizer.UhtToken@,System.Boolean)">
            <summary>
            Parse a statement
            </summary>
            <param name="topScope">Current top scope</param>
            <param name="token">Token starting the statement</param>
            <param name="logUnhandledKeywords">If true, log unhandled keywords</param>
            <returns>Always returns true ATM</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtHeaderFileParser.ProbablyAnUnknownObjectLikeMacro(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtToken@)">
            <summary>
            Tests if an identifier looks like a macro which doesn't have a following open parenthesis.
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="token">The current token that initiated the process</param>
            <returns>Result if matching the token</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtHeaderFileParser.ParseDirectiveInternal(System.Boolean)">
            <summary>
            Parse a preprocessor directive.
            </summary>
            <param name="isBeingIncluded">If true, then this directive is in an active block</param>
            <returns>True if we should check to see if tokenizer should clear comments</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtHeaderFileParser.PushCompilerDirective(EpicGames.UHT.Parsers.UhtCompilerDirective)">
            <summary>
            Add a new compiler directive to the stack
            </summary>
            <param name="compilerDirective">Directive to be added</param>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtHeaderFileParser.PopCompilerDirective(EpicGames.UHT.Tokenizer.UhtToken)">
            <summary>
            Remove the top level compiler directive from the stack
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtHeaderFileParser.ClearCommentsCompilerDirective">
            <summary>
            The old UHT would preprocess the file and eliminate any #if blocks that were not required for 
            any contextual information.  This results in comments before the #if block being considered 
            for the next definition.  This routine classifies each #if block type into if comments should
            be purged after the directive.
            </summary>
            <returns></returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException"></exception>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtInterfaceClassParser">
            <summary>
            Interface class parser
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtNativeInterfaceClassParser">
            <summary>
            Parser object for native interfaces
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtParserHelpers">
            <summary>
            Collection of helper methods
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtParserHelpers.ParseInheritance(EpicGames.UHT.Parsers.UhtHeaderFileParser,EpicGames.UHT.Utils.IUhtConfig,EpicGames.UHT.Tokenizer.UhtToken@,System.Collections.Generic.List{EpicGames.UHT.Tokenizer.UhtToken[]}@)">
            <summary>
            Parse the inheritance 
            </summary>
            <param name="headerFileParser">Header file being parsed</param>
            <param name="config">Configuration</param>
            <param name="superIdentifier">Output super identifier</param>
            <param name="baseIdentifiers">Output base identifiers</param>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtParserHelpers.ParseCompileVersionDeclaration(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Utils.IUhtConfig,EpicGames.UHT.Types.UhtStruct)">
            <summary>
            Parse compiler version declaration
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="config">Configuration</param>
            <param name="structObj">Struct being parsed</param>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtParsingScope">
            <summary>
            Nested structure of scopes being parsed
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtParsingScope.HeaderParser">
            <summary>
            Header file parser
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtParsingScope.TokenReader">
            <summary>
            Token reader
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtParsingScope.ParentScope">
            <summary>
            Parent scope
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtParsingScope.ScopeType">
            <summary>
            Type being parsed
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtParsingScope.ScopeKeywordTable">
            <summary>
            Keyword table for the scope
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtParsingScope.AccessSpecifier">
            <summary>
            Current access specifier
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtParsingScope.Session">
            <summary>
            Current session
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtParsingScope.CurrentClassScope">
            <summary>
            Return the current class scope being compiled
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtParsingScope.CurrentClass">
            <summary>
            Return the current class being compiled
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtParsingScope.#ctor(EpicGames.UHT.Parsers.UhtHeaderFileParser,EpicGames.UHT.Types.UhtType,EpicGames.UHT.Tables.UhtKeywordTable)">
            <summary>
            Construct a root/global scope
            </summary>
            <param name="headerParser">Header parser</param>
            <param name="scopeType">Type being parsed</param>
            <param name="keywordTable">Keyword table</param>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtParsingScope.#ctor(EpicGames.UHT.Parsers.UhtParsingScope,EpicGames.UHT.Types.UhtType,EpicGames.UHT.Tables.UhtKeywordTable,EpicGames.UHT.Types.UhtAccessSpecifier)">
            <summary>
            Construct a scope for a type
            </summary>
            <param name="parentScope">Parent scope</param>
            <param name="scopeType">Type being parsed</param>
            <param name="keywordTable">Keyword table</param>
            <param name="accessSpecifier">Current access specifier</param>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtParsingScope.Dispose">
            <summary>
            Dispose the scope
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtParsingScope.Dispose(System.Boolean)">
            <summary>
            Virtual method for disposing the object
            </summary>
            <param name="disposing">If true, we are disposing</param>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtParsingScope.AddModuleRelativePathToMetaData">
            <summary>
            Add the module's relative path to the type's meta data
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtParsingScope.AddModuleRelativePathToMetaData(EpicGames.UHT.Types.UhtMetaData,EpicGames.UHT.Types.UhtHeaderFile)">
            <summary>
            Add the module's relative path to the meta data
            </summary>
            <param name="metaData">The meta data to add the information to</param>
            <param name="headerFile">The header file currently being parsed</param>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtParsingScope.AddFormattedCommentsAsTooltipMetaData(System.Int32)">
            <summary>
            Format the current token reader comments and add it as meta data
            </summary>
            <param name="metaNameIndex">Index for the meta data key.  This is used for enum values</param>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtParsingScope.AddFormattedCommentsAsTooltipMetaData(EpicGames.UHT.Types.UhtType,System.Int32)">
            <summary>
            Format the current token reader comments and add it as meta data
            </summary>
            <param name="type">The type to add the meta data to</param>
            <param name="metaNameIndex">Index for the meta data key.  This is used for enum values</param>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtParsingScope.HasValidCommentChar(System.ReadOnlySpan{System.Char})">
            <summary>
            Given a list of comments, check to see if any have alpha, numeric, or unicode code points with a value larger than 0xFF.
            </summary>
            <param name="comments">Comments to search</param>
            <returns>True is a character in question was found</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtParsingScope.FormatCommentForToolTip(System.String)">
             <summary>
             Convert the given list of comments to a tooltip.  Each string view is a comment where the // style comments also includes the trailing \r\n.
             
             The following style comments are supported:
             
             /* */ - C Style
             /** */ - C Style JavaDocs
             /*~ */ - C Style but ignore
             //\r\n - C++ Style
             ///\r\n - C++ Style JavaDocs
             //~\r\n - C++ Style bug ignore
            
             As per TokenReader, there will only be one C style comment ever present, and it will be the first one.  When a C style comment is parsed, any prior comments
             are cleared.  However, if a C++ style comment follows a C style comment (regardless of any intermediate blank lines), then both blocks of comments will be present.
             If any blank lines are encountered between blocks of C++ style comments, then any prior comments are cleared.
             </summary>
             <param name="comments">Comments to be parsed</param>
             <returns>The generated tooltip</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtParsingScope.RemoveIgnoreComments(System.Char[],System.Int32)">
            <summary>
            Remove any comments marked to be ignored
            </summary>
            <param name="comments">Buffer containing comments to be processed.  Comments are removed inline</param>
            <param name="inLength">Length of the comments</param>
            <returns>New length of the comments</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtParsingScope.RemoveBlockCommentMarkers(System.Char[],System.Int32,System.Boolean)">
            <summary>
            Remove any block comment markers
            </summary>
            <param name="comments">Buffer containing comments to be processed.  Comments are removed inline</param>
            <param name="inLength">Length of the comments</param>
            <param name="javaDocStyle">If true, we are parsing both java and c style.  This is a strange hack for //***__ comments which end up as __</param>
            <returns>New length of the comments</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtParsingScope.RemoveLineCommentMarkers(System.Char[],System.Int32)">
            <summary>
            Remove any line comment markers
            </summary>
            <param name="comments">Buffer containing comments to be processed.  Comments are removed inline</param>
            <param name="inLength">Length of the comments</param>
            <returns>New length of the comments</returns>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtTokenRecorder">
            <summary>
            Token recorder
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtTokenRecorder.#ctor(EpicGames.UHT.Parsers.UhtParsingScope,EpicGames.UHT.Tokenizer.UhtToken@)">
            <summary>
            Construct a new recorder
            </summary>
            <param name="scope">Scope being parsed</param>
            <param name="initialToken">Initial toke nto add to the recorder</param>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtTokenRecorder.#ctor(EpicGames.UHT.Parsers.UhtParsingScope,EpicGames.UHT.Types.UhtFunction)">
            <summary>
            Create a new recorder
            </summary>
            <param name="scope">Scope being parsed</param>
            <param name="function">Function associated with the recorder</param>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtTokenRecorder.Dispose">
            <summary>
            Stop the recording
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtTokenRecorder.Stop">
            <summary>
            Stop the recording
            </summary>
            <returns>True if the recorded content was added to a class</returns>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtPropertyParseOptions">
            <summary>
            Options that customize the parsing of properties.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtPropertyParseOptions.None">
            <summary>
            No options
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtPropertyParseOptions.NoAutoConst">
            <summary>
            Don't automatically mark properties as CPF_Const
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtPropertyParseOptions.ParseLayoutMacro">
            <summary>
            Parse for the layout macro
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtPropertyParseOptions.FunctionNameIncluded">
            <summary>
            If set, then the name of the property will be parsed with the type
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtPropertyParseOptions.NameIncluded">
            <summary>
            If set, then the name of the property will be parsed with the type
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtPropertyParseOptions.CommaSeparatedName">
            <summary>
            When parsing delegates, the name is separated by commas
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtPropertyParseOptions.List">
            <summary>
            Multiple properties can be defined separated by commas
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtPropertyParseOptions.DontAddReturn">
            <summary>
            Don't add a return type to the property list (return values go at the end)
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtPropertyParseOptions.AddModuleRelativePath">
            <summary>
            If set, add the module relative path to the parameter's meta data
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtParsePropertyOptionsExtensions">
            <summary>
            Helper methods for testing flags.  These methods perform better than the generic HasFlag which hits
            the GC and stalls.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtParsePropertyOptionsExtensions.HasAnyFlags(EpicGames.UHT.Parsers.UhtPropertyParseOptions,EpicGames.UHT.Parsers.UhtPropertyParseOptions)">
            <summary>
            Test to see if any of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if any of the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtParsePropertyOptionsExtensions.HasAllFlags(EpicGames.UHT.Parsers.UhtPropertyParseOptions,EpicGames.UHT.Parsers.UhtPropertyParseOptions)">
            <summary>
            Test to see if all of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if all the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtParsePropertyOptionsExtensions.HasExactFlags(EpicGames.UHT.Parsers.UhtPropertyParseOptions,EpicGames.UHT.Parsers.UhtPropertyParseOptions,EpicGames.UHT.Parsers.UhtPropertyParseOptions)">
            <summary>
            Test to see if a specific set of flags have a specific value.
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <param name="matchFlags">Expected value of the tested flags</param>
            <returns>True if the given flags have a specific value.</returns>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtLayoutMacroType">
            <summary>
            Layout macro type
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtLayoutMacroType.None">
            <summary>
            None found
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtLayoutMacroType.Array">
            <summary>
            Array
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtLayoutMacroType.ArrayEditorOnly">
            <summary>
            Editor only array
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtLayoutMacroType.Bitfield">
            <summary>
            Bit field
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtLayoutMacroType.BitfieldEditorOnly">
            <summary>
            Editor only bit field
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtLayoutMacroType.Field">
            <summary>
            Field
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtLayoutMacroType.FieldEditorOnly">
            <summary>
            Editor only field
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtLayoutMacroType.FieldInitialized">
            <summary>
            Field with initializer
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtLayoutMacroTypeExtensions">
            <summary>
            Extensions for working with the layout macro type
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtLayoutMacroTypeExtensions.IsEditorOnly(EpicGames.UHT.Parsers.UhtLayoutMacroType)">
            <summary>
            Return true if the type is editor only
            </summary>
            <param name="layoutMacroType">Layout macro type</param>
            <returns>True if editor only</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtLayoutMacroTypeExtensions.IsBitfield(EpicGames.UHT.Parsers.UhtLayoutMacroType)">
            <summary>
            Return true if the type is a bit field
            </summary>
            <param name="layoutMacroType">Layout macro type</param>
            <returns>True if bit field</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtLayoutMacroTypeExtensions.IsArray(EpicGames.UHT.Parsers.UhtLayoutMacroType)">
            <summary>
            Return true if the type is an array
            </summary>
            <param name="layoutMacroType">Layout macro type</param>
            <returns>True if array</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtLayoutMacroTypeExtensions.HasInitializer(EpicGames.UHT.Parsers.UhtLayoutMacroType)">
            <summary>
            Return true if the type has an initializer
            </summary>
            <param name="layoutMacroType">Layout macro type</param>
            <returns>True if it has an initializer</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtLayoutMacroTypeExtensions.MacroName(EpicGames.UHT.Parsers.UhtLayoutMacroType)">
            <summary>
            Return the layout macro name
            </summary>
            <param name="layoutMacroType">Type in question</param>
            <returns>Macro name</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Thrown if the macro type is none or invalid</exception>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtLayoutMacroTypeExtensions.MacroNameAndValue(EpicGames.UHT.Parsers.UhtLayoutMacroType)">
            <summary>
            Return the macro name and value
            </summary>
            <param name="layoutMacroType">Macro name</param>
            <returns>Name and type</returns>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtPropertyDelegate">
            <summary>
            Delegate invoked to handle a parsed property 
            </summary>
            <param name="topScope">Scope being parsed</param>
            <param name="property">Property just parsed</param>
            <param name="nameToken">Name of the property</param>
            <param name="layoutMacroType">Layout macro type</param>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtPropertySpecifierContext">
            <summary>
            Context for property specifier parsing
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtPropertySpecifierContext.PropertySettings">
            <summary>
            The property settings being parsed
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtPropertySpecifierContext.SeenEditSpecifier">
            <summary>
            If true, editor specifier seen
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtPropertySpecifierContext.SeenBlueprintWriteSpecifier">
            <summary>
            If true, blueprint write specifier seen
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtPropertySpecifierContext.SeenBlueprintReadOnlySpecifier">
            <summary>
            If true, blueprint readonly specifier seen
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtPropertySpecifierContext.SeenBlueprintGetterSpecifier">
            <summary>
            If true, blueprint getter specifier seen
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtThreadBorrower`1">
            <summary>
            Helper class thread specified object cache
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtThreadBorrower`1.Instance">
            <summary>
            The borrowed instance
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtThreadBorrower`1.#ctor(System.Boolean)">
            <summary>
            Request a context
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtThreadBorrower`1.Dispose">
            <summary>
            Return the borrowed buffer to the cache
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtPreResolveProperty">
            <summary>
            A parsed property is a property that was parsed but couldn't yet be resolved.  It retains the list of tokens needed
            to resolve the type of the property.  It will be replaced with the resolved property type during property resolution.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtPreResolveProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtPreResolveProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtPreResolveProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtPreResolveProperty.TypeTokens">
            <summary>
            Collection of type tokens 
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtPreResolveProperty.PropertySettings">
            <summary>
            Property settings being parsed
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtPreResolveProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,System.ReadOnlyMemory{EpicGames.UHT.Tokenizer.UhtToken})">
            <summary>
            Construct a new property to be resolved
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="typeTokens">Type tokens</param>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtPreResolveProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtPreResolveProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtPreResolveProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtPreResolveProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtPreResolveProperty.AppendFunctionThunkParameterGet(System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtPreResolveProperty.AppendNullConstructorArg(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtPreResolveProperty.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtPropertyParser">
            <summary>
            Property parser
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtPropertyParser.#ctor">
            <summary>
            Construct a new property parser
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtPropertyParser.Parse(EpicGames.UHT.Parsers.UhtParsingScope,EpicGames.Core.EPropertyFlags,EpicGames.UHT.Parsers.UhtPropertyParseOptions,EpicGames.UHT.Types.UhtPropertyCategory,EpicGames.UHT.Parsers.UhtPropertyDelegate)">
            <summary>
            Parse the property
            </summary>
            <param name="topScope">Current parsing scope</param>
            <param name="disallowPropertyFlags">Flags to be disallowed</param>
            <param name="options">Parsing options</param>
            <param name="category">Property category</param>
            <param name="propertyDelegate">Delegate to be invoked after property has been parsed</param>
            <returns>The property parser</returns>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtPropertyParser.MessageExtraContext">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtPropertyParser.ResolveProperty(EpicGames.UHT.Tables.UhtPropertyResolvePhase,EpicGames.UHT.Types.UhtPropertySettings,System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{EpicGames.UHT.Tokenizer.UhtToken})">
            <summary>
            Resolve the given property.  This method will resolve any immediate property during the parsing phase or 
            resolve any previously parsed property to the final version.
            </summary>
            <param name="resolvePhase">Used to detect if the property is being parsed or resolved</param>
            <param name="data">Character buffer for header file</param>
            <param name="propertySettings">The property settings.</param>
            <param name="typeTokens">The tokens that represent the type</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtPropertyParser.ResolveChildren(EpicGames.UHT.Types.UhtType,EpicGames.UHT.Parsers.UhtPropertyParseOptions)">
            <summary>
            Given a type with children, resolve any children that couldn't be resolved during the parsing phase.
            </summary>
            <param name="type">The type with children</param>
            <param name="options">Parsing options</param>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtPropertyParser.ParseTemplateParam(EpicGames.UHT.Tables.UhtPropertyResolvePhase,EpicGames.UHT.Types.UhtPropertySettings,EpicGames.Core.StringView,EpicGames.UHT.Tokenizer.IUhtTokenReader)">
            <summary>
            Parse a template parameter
            </summary>
            <param name="resolvePhase">Resolution phase</param>
            <param name="parentPropertySettings">Parent property (container) settings</param>
            <param name="paramName">Name of the template parameter</param>
            <param name="tokenReader">Token type</param>
            <returns>Parsed property</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtPropertyParser.PreParseTypeInternal(EpicGames.UHT.Parsers.UhtPropertySpecifierContext,System.Boolean)">
            <summary>
            Parse the type elements excluding the type itself.
            </summary>
            <param name="specifierContext">Context of what is being parsed</param>
            <param name="isTemplateArgument">If true, this is part of a template argument</param>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException"></exception>
            <exception cref="T:EpicGames.UHT.Utils.UhtException"></exception>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtPropertyParser.Finalize(EpicGames.UHT.Parsers.UhtParsingScope,EpicGames.UHT.Parsers.UhtPropertySpecifierContext,EpicGames.UHT.Tokenizer.UhtToken@,System.ReadOnlyMemory{EpicGames.UHT.Tokenizer.UhtToken},EpicGames.UHT.Parsers.UhtLayoutMacroType,EpicGames.UHT.Parsers.UhtPropertyDelegate)">
            <summary>
            Finish creating the property
            </summary>
            <param name="topScope">Top most scope being parsed</param>
            <param name="specifierContext">Context of the property being parsed</param>
            <param name="nameToken">The name of the property</param>
            <param name="typeTokens">Series of tokens that represent the type</param>
            <param name="layoutMacroType">Optional layout macro type being parsed</param>
            <param name="propertyDelegate">Delegate to invoke when processing has been completed</param>
            <returns>The newly created property.  During the parsing phase, this will often be a temporary property if the type references engine types.</returns>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtScriptStructParser">
            <summary>
            USTRUCT parser object
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtSpecifierParser">
            <summary>
            Class responsible for parsing specifiers and the field meta data.  To reduce allocations, one specifier parser is shared between all objects in
            a given header file.  This makes the Action pattern being used a bit more obtuse, but it does help performance by reducing the allocations fairly
            significantly.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Parsers.UhtSpecifierParser.s_tls">
            <summary>
            For a given header file, we share a common specifier parser to reduce the number of allocations.
            Before the parser can be reused, the ParseDeferred method must be called to dispatch that list.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtSpecifierParser.GetThreadInstance(EpicGames.UHT.Tables.UhtSpecifierContext,EpicGames.Core.StringView,EpicGames.UHT.Tables.UhtSpecifierTable)">
            <summary>
            Get the cached specifier parser
            </summary>
            <param name="specifierContext">Specifier context</param>
            <param name="context">User facing context</param>
            <param name="table">Specifier table</param>
            <returns>Specifier parser</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtSpecifierParser.#ctor(EpicGames.UHT.Tables.UhtSpecifierContext,EpicGames.Core.StringView,EpicGames.UHT.Tables.UhtSpecifierTable)">
            <summary>
            Construct a new specifier parser
            </summary>
            <param name="specifierContext">Specifier context</param>
            <param name="context">User facing context added to messages</param>
            <param name="table">Specifier table</param>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtSpecifierParser.Reset(EpicGames.UHT.Tables.UhtSpecifierContext,EpicGames.Core.StringView,EpicGames.UHT.Tables.UhtSpecifierTable)">
            <summary>
            Reset an existing parser to parse a new specifier block
            </summary>
            <param name="specifierContext">Specifier context</param>
            <param name="context">User facing context added to messages</param>
            <param name="table">Specifier table</param>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtSpecifierParser.ParseSpecifiers">
            <summary>
            Perform the specify parsing
            </summary>
            <returns>The parser</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtSpecifierParser.ParseFieldMetaData">
            <summary>
            Parse field meta data
            </summary>
            <returns>Specifier parser</returns>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtSpecifierParser.ParseDeferred">
            <summary>
            Parse any deferred specifiers
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Parsers.UhtSpecifierParser.MessageExtraContext">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Parsers.UhtSpecifierParser.ReadValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Utils.StringViewBuilder,System.Boolean)">
            <summary>
            Parse the sequence of meta data
            </summary>
            <param name="tokenReader">Input token reader</param>
            <param name="builder">Output string builder</param>
            <param name="respectQuotes">If true, do not convert \" to " in string constants.  This is required for UMETA data</param>
            <returns>True if data was read</returns>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtClassSpecifiers">
            <summary>
            Collection of UCLASS specifiers
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtDefaultSpecifiers">
            <summary>
            Collection of default specifiers that apply to everything
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtEnumSpecifiers">
            <summary>
            Collection of UENUM specifiers
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtFunctionSpecifiers">
            <summary>
            Collection of UFUNCTION/UDELEGATE specifiers
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtPropertyArgumentSpecifiers">
            <summary>
            Collection of property argument specifiers
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtPropertyMemberSpecifiers">
            <summary>
            Collection of property member specifiers
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Parsers.UhtScriptStructSpecifiers">
            <summary>
            Collection of USCRIPT specifiers
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtEngineClassAttribute">
            <summary>
            This attribute is placed on classes that represent Unreal Engine classes.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtEngineClassAttribute.Name">
            <summary>
            The name of the engine class excluding any prefix
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtEngineClassAttribute.IsProperty">
            <summary>
            If true, this class is a property
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtEngineClass">
            <summary>
            Represents an engine class in the engine class table
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtEngineClass.Name">
            <summary>
            The name of the engine class excluding any prefix
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtEngineClass.IsProperty">
            <summary>
            If true, this class is a property
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtEngineClassTable">
            <summary>
            Table of all known engine class names.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtEngineClassTable._engineClasses">
            <summary>
            Internal mapping from engine class name to information
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtEngineClassTable.IsValidPropertyTypeName(EpicGames.Core.StringView)">
            <summary>
            Test to see if the given class name is a property
            </summary>
            <param name="name">Name of the class without the prefix</param>
            <returns>True if the class name is a property.  False if the class name isn't a property or isn't an engine class.</returns>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtEngineClassTable.OnEngineClassAttribute(EpicGames.UHT.Tables.UhtEngineClassAttribute)">
            <summary>
            Add an entry to the table
            </summary>
            <param name="engineClassAttribute">The located attribute</param>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtExporterDelegate">
            <summary>
            Delegate to invoke to run exporter
            </summary>
            <param name="factory">Factory used to generate export tasks and outputs</param>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtExporterOptions">
            <summary>
            Export options
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtExporterOptions.None">
            <summary>
            No options
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtExporterOptions.Default">
            <summary>
            The exporter should be run by default
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtExporterOptionsExtensions">
            <summary>
            Helper methods for testing flags.  These methods perform better than the generic HasFlag which hits
            the GC and stalls.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtExporterOptionsExtensions.HasAnyFlags(EpicGames.UHT.Tables.UhtExporterOptions,EpicGames.UHT.Tables.UhtExporterOptions)">
            <summary>
            Test to see if any of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if any of the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtExporterOptionsExtensions.HasAllFlags(EpicGames.UHT.Tables.UhtExporterOptions,EpicGames.UHT.Tables.UhtExporterOptions)">
            <summary>
            Test to see if all of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if all the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtExporterOptionsExtensions.HasExactFlags(EpicGames.UHT.Tables.UhtExporterOptions,EpicGames.UHT.Tables.UhtExporterOptions,EpicGames.UHT.Tables.UhtExporterOptions)">
            <summary>
            Test to see if a specific set of flags have a specific value.
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <param name="matchFlags">Expected value of the tested flags</param>
            <returns>True if the given flags have a specific value.</returns>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtExporterAttribute">
            <summary>
            Defines an exporter
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtExporterAttribute.Name">
            <summary>
            Name of the exporter
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtExporterAttribute.Description">
            <summary>
            Description of the export.  Used to display help
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtExporterAttribute.ModuleName">
            <summary>
            Exporters in plugins need to specify a module name
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtExporterAttribute.Options">
            <summary>
            Exporter options
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtExporterAttribute.CppFilters">
            <summary>
            Collection of filters used to delete old cpp files
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtExporterAttribute.HeaderFilters">
            <summary>
            Collection of filters used to delete old h files
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtExporterAttribute.OtherFilters">
            <summary>
            Collection of filters for other file types
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtExporter">
            <summary>
            Defines an exporter in the table
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtExporter.Name">
            <summary>
            Name of the exporter
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtExporter.Description">
            <summary>
            Description of the export.  Used to display help
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtExporter.ModuleName">
            <summary>
            Exporters in plugins need to specify a module name
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtExporter.Options">
            <summary>
            Exporter options
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtExporter.Delegate">
            <summary>
            Delegate to invoke to start export
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtExporter.CppFilters">
            <summary>
            Collection of filters used to delete old cpp files
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtExporter.HeaderFilters">
            <summary>
            Collection of filters used to delete old h files
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtExporter.OtherFilters">
            <summary>
            Collection of filters for other file types
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtExporter.#ctor(EpicGames.UHT.Tables.UhtExporterAttribute,EpicGames.UHT.Tables.UhtExporterDelegate)">
            <summary>
            Construct an exporter table instance
            </summary>
            <param name="attribute">Source attribute</param>
            <param name="exporterDelegate">Delegate to invoke</param>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtExporterTable">
            <summary>
            Exporter table
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtExporterTable.TryGet(System.String,EpicGames.UHT.Tables.UhtExporter@)">
            <summary>
            Return the exporter associated with the given name
            </summary>
            <param name="name"></param>
            <param name="value">Exporter associated with the name</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtExporterTable.OnExporterAttribute(System.Type,System.Reflection.MethodInfo,EpicGames.UHT.Tables.UhtExporterAttribute)">
            <summary>
            Handle an exporter attribute
            </summary>
            <param name="type">Containing type</param>
            <param name="methodInfo">Method info</param>
            <param name="exporterAttribute">Defining attribute</param>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Thrown if the attribute doesn't properly define an exporter.</exception>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtExporterTable.GetEnumerator">
            <summary>
            Return an enumerator for all the defined exporters
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtExporterTable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an enumerator for all the defined exporters
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtKeywordAttribute">
            <summary>
            Invoke the given method when the keyword is parsed.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtKeywordAttribute.Extends">
            <summary>
            Keyword table/scope being extended
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtKeywordAttribute.Keyword">
            <summary>
            Name of the keyword
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtKeywordAttribute.AllowText">
            <summary>
            Text to be displayed to the user when referencing this keyword
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtKeywordAttribute.AllScopes">
            <summary>
            If true, this applies to all scopes
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtKeywordAttribute.DisableUsageError">
            <summary>
            If true, do not include in usage errors
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtKeywordCatchAllAttribute">
            <summary>
            Invoked as a last chance processor for a keyword
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtKeywordCatchAllAttribute.Extends">
            <summary>
            Table/scope to be extended
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtKeywordDelegate">
            <summary>
            Delegate to notify a keyword was parsed
            </summary>
            <param name="topScope">Current scope being parsed</param>
            <param name="actionScope">The scope who's table was matched</param>
            <param name="token">Matching token</param>
            <returns>Results of the parsing</returns>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtKeywordCatchAllDelegate">
            <summary>
            Delegate to invoke as a last chance processor for a keyword
            </summary>
            <param name="topScope">Current scope being parsed</param>
            <param name="token">Matching token</param>
            <returns>Results of the parsing</returns>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtKeyword">
            <summary>
            Defines a keyword
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtKeyword.Name">
            <summary>
            Name of the keyword
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtKeyword.Delegate">
            <summary>
            Delegate to invoke
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtKeyword.AllowText">
            <summary>
            Text to be displayed to the user when referencing this keyword
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtKeyword.AllScopes">
            <summary>
            If true, this applies to all scopes
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtKeyword.DisableUsageError">
            <summary>
            If true, do not include in usage errors
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtKeyword.#ctor(System.String,EpicGames.UHT.Tables.UhtKeywordDelegate,EpicGames.UHT.Tables.UhtKeywordAttribute)">
            <summary>
            Construct a new keyword
            </summary>
            <param name="name">Name of the keyword</param>
            <param name="keywordDelegate">Delegate to invoke</param>
            <param name="attribute">Defining attribute</param>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtKeywordTable">
            <summary>
            Keyword table for a specific scope
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtKeywordTable.CatchAlls">
            <summary>
            List of catch-alls associated with this table
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtKeywordTable.#ctor">
            <summary>
            Construct a new keyword table
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtKeywordTable.Add(EpicGames.UHT.Tables.UhtKeyword)">
            <summary>
            Add the given value to the lookup table.  It will throw an exception if it is a duplicate.
            </summary>
            <param name="value">Value to be added</param>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtKeywordTable.AddCatchAll(EpicGames.UHT.Tables.UhtKeywordCatchAllDelegate)">
            <summary>
            Add the given catch-all to the table.
            </summary>
            <param name="catchAll">The catch-all to be added</param>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtKeywordTable.Merge(EpicGames.UHT.Utils.UhtLookupTableBase)">
            <summary>
            Merge the given keyword table.  Duplicates in the BaseTypeTable will be ignored.
            </summary>
            <param name="baseTable">Base table being merged</param>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtKeywordTables">
            <summary>
            Table of all keyword tables
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtKeywordTables.#ctor">
            <summary>
            Construct the keyword tables
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtKeywordTables.OnKeywordCatchAllAttribute(System.Type,System.Reflection.MethodInfo,EpicGames.UHT.Tables.UhtKeywordCatchAllAttribute)">
            <summary>
            Handle a keyword attribute
            </summary>
            <param name="type">Containing type</param>
            <param name="methodInfo">Method information</param>
            <param name="keywordCatchAllAttribute">Defining attribute</param>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Thrown if the attribute isn't well defined</exception>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtKeywordTables.OnKeywordAttribute(System.Type,System.Reflection.MethodInfo,EpicGames.UHT.Tables.UhtKeywordAttribute)">
            <summary>
            Handle a keyword attribute
            </summary>
            <param name="type">Containing type</param>
            <param name="methodInfo">Method information</param>
            <param name="keywordAttribute">Defining attribute</param>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Thrown if the attribute isn't well defined</exception>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtKeywordTables.LogUnhandledError(EpicGames.UHT.Utils.IUhtMessageSite,EpicGames.UHT.Tokenizer.UhtToken)">
            <summary>
            Log an unhandled error
            </summary>
            <param name="messageSite">Destination message site</param>
            <param name="token">Keyword</param>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtLocTextDefaultValueDelegate">
            <summary>
            Delegate to invoke to sanitize a loctext default value
            </summary>
            <param name="property">Property in question</param>
            <param name="defaultValueReader">The default value</param>
            <param name="macroToken">Token for the loctext type being parsed</param>
            <param name="innerDefaultValue">Output sanitized value.</param>
            <returns>True if sanitized, false if not.</returns>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtLocTextDefaultValueAttribute">
            <summary>
            Attribute defining the loctext sanitizer
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtLocTextDefaultValueAttribute.Name">
            <summary>
            Name of the sanitizer (i.e. LOCTEXT, NSLOCTEXT, ...)
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtLocTextDefaultValue">
            <summary>
            Loctext sanitizer
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtLocTextDefaultValue.Delegate">
            <summary>
            Delegate to invoke
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtLocTextDefaultValueTable">
            <summary>
            Table of loctext sanitizers
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtLocTextDefaultValueTable.TryGet(EpicGames.Core.StringView,EpicGames.UHT.Tables.UhtLocTextDefaultValue@)">
            <summary>
            Return the loc text default value associated with the given name
            </summary>
            <param name="name"></param>
            <param name="locTextDefaultValue">Loc text default value handler</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtLocTextDefaultValueTable.OnLocTextDefaultValueAttribute(System.Reflection.MethodInfo,EpicGames.UHT.Tables.UhtLocTextDefaultValueAttribute)">
            <summary>
            Handle a loctext default value attribute
            </summary>
            <param name="methodInfo">Method info</param>
            <param name="locTextDefaultValueAttribute">Defining attribute</param>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Thrown if the attribute isn't properly defined</exception>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtPropertyTypeOptions">
            <summary>
            Property type options
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtPropertyTypeOptions.None">
            <summary>
            No options
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtPropertyTypeOptions.Simple">
            <summary>
            Simple property type with just the property type.  (i.e. "int32 MyValue")
            Simple types are not required to parse the supplied token list.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtPropertyTypeOptions.CaseInsensitive">
            <summary>
            Use case insensitive string compares
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtPropertyTypeOptions.Default">
            <summary>
            This property type is to be invoked when there are no keyword matches found
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtPropertyTypeOptions.Immediate">
            <summary>
            This property type doesn't reference any engine types an can be resolved immediately
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtPropertyTypeOptionsExtensions">
            <summary>
            Helper methods for testing flags.  These methods perform better than the generic HasFlag which hits
            the GC and stalls.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtPropertyTypeOptionsExtensions.HasAnyFlags(EpicGames.UHT.Tables.UhtPropertyTypeOptions,EpicGames.UHT.Tables.UhtPropertyTypeOptions)">
            <summary>
            Test to see if any of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if any of the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtPropertyTypeOptionsExtensions.HasAllFlags(EpicGames.UHT.Tables.UhtPropertyTypeOptions,EpicGames.UHT.Tables.UhtPropertyTypeOptions)">
            <summary>
            Test to see if all of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if all the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtPropertyTypeOptionsExtensions.HasExactFlags(EpicGames.UHT.Tables.UhtPropertyTypeOptions,EpicGames.UHT.Tables.UhtPropertyTypeOptions,EpicGames.UHT.Tables.UhtPropertyTypeOptions)">
            <summary>
            Test to see if a specific set of flags have a specific value.
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <param name="matchFlags">Expected value of the tested flags</param>
            <returns>True if the given flags have a specific value.</returns>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtPropertyResolvePhase">
            <summary>
            The phase of UHT where the property is being resolved
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtPropertyResolvePhase.Parsing">
            <summary>
            Resolved during the source processing phase.  Immediate property types only.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtPropertyResolvePhase.Resolving">
            <summary>
            Resolved during the resolve phase.  Non-immedite property types only.
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtResolvePropertyDelegate">
            <summary>
            Delegate invoked to resolve a tokenized type into a UHTProperty type
            </summary>
            <param name="resolvePhase">Specifies if this is being resolved during the parsing phase or the resolution phase.  Type lookups can not happen during the parsing phase</param>
            <param name="propertySettings">The configuration of the property</param>
            <param name="tokenReader">The token reader containing the type</param>
            <param name="matchedToken">The token that matched the delegate unless the delegate is the default resolver.</param>
            <returns></returns>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtPropertyTypeAttribute">
            <summary>
            Property type attribute
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtPropertyTypeAttribute.Keyword">
            <summary>
            The expected keyword.  Must be set unless this is the default processor
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtPropertyTypeAttribute.Options">
            <summary>
            Options
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtPropertyType">
            <summary>
            Represents a property type as specified by the PropertyTypeAttribute
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtPropertyType.Delegate">
            <summary>
            Delegate to invoke
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtPropertyType.Options">
            <summary>
            Options
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtPropertyTypeTable">
            <summary>
            Property type table
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtPropertyTypeTable.Default">
            <summary>
            Return the default processor
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtPropertyTypeTable.TryGet(EpicGames.Core.StringView,EpicGames.UHT.Tables.UhtPropertyType@)">
            <summary>
            Return the property type associated with the given name
            </summary>
            <param name="name"></param>
            <param name="propertyType">Property type if matched</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtPropertyTypeTable.OnPropertyTypeAttribute(System.Reflection.MethodInfo,EpicGames.UHT.Tables.UhtPropertyTypeAttribute)">
            <summary>
            Handle a property type attribute
            </summary>
            <param name="methodInfo">Method info</param>
            <param name="propertyTypeAttribute">Attribute</param>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Thrown if the property type isn't properly defined.</exception>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierValueType">
            <summary>
            Defines the different types specifiers relating to their allowed values
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtSpecifierValueType.NotSet">
            <summary>
            Internal value used to detect if the attribute has a valid value
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtSpecifierValueType.None">
            <summary>
            No values of any type are allowed
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtSpecifierValueType.String">
            <summary>
            A string value but can not be in the form of a list (i.e. =(bob))
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtSpecifierValueType.OptionalString">
            <summary>
            An optional string value but can not be in the form of a list
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtSpecifierValueType.SingleString">
            <summary>
            A string value or a single element string list
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtSpecifierValueType.KeyValuePairList">
            <summary>
            A list of values in key=value pairs
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtSpecifierValueType.OptionalEqualsKeyValuePairList">
            <summary>
            A list of values in key=value pairs but the equals is optional
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtSpecifierValueType.StringList">
            <summary>
            A list of values.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtSpecifierValueType.NonEmptyStringList">
            <summary>
            A list of values and must contain at least one entry
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtSpecifierValueType.Legacy">
            <summary>
            Accepts a string list but the value is ignored by the specifier and is automatically deferred.  This is for legacy UHT support.
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierDispatchResults">
            <summary>
            Results from dispatching a specifier
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtSpecifierDispatchResults.Known">
            <summary>
            Specifier was known and parsed
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtSpecifierDispatchResults.Unknown">
            <summary>
            Specified was unknown
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierContext">
            <summary>
            The specifier context provides the default and simplest information about the specifiers being processed
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtSpecifierContext.Type">
            <summary>
            Get the type containing the specifiers.  For properties, this is the outer object and
            not the property itself.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtSpecifierContext.TokenReader">
            <summary>
            Return the currently active token reader
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtSpecifierContext.AccessSpecifier">
            <summary>
            Current access specifier
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtSpecifierContext.MessageSite">
            <summary>
            Message site for messages
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtSpecifierContext.MetaData">
            <summary>
            Meta data currently being parsed.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtSpecifierContext.MetaNameIndex">
            <summary>
            Make data key index utilized by enumeration values
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierContext.#ctor(EpicGames.UHT.Parsers.UhtParsingScope,EpicGames.UHT.Utils.IUhtMessageSite,EpicGames.UHT.Types.UhtMetaData,System.Int32)">
            <summary>
            Construct a new specifier context
            </summary>
            <param name="scope"></param>
            <param name="messageSite"></param>
            <param name="metaData"></param>
            <param name="metaNameIndex"></param>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierContext.#ctor">
            <summary>
            Construct an empty context.  Scope, MessageSite, and MetaData must be set at a later point
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierWhen">
            <summary>
            Specifiers are either processed immediately when the declaration is parse or deferred until later in the parsing of the object
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtSpecifierWhen.Immediate">
            <summary>
            Specifier is parsed when the meta data section is parsed.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtSpecifierWhen.Deferred">
            <summary>
            Specifier is executed after more of the object is parsed (but usually before members are parsed)
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifier">
            <summary>
            The specifier table contains an instance of UhtSpecifier which is used to dispatch the parsing of
            a specifier to the implementation
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtSpecifier.Name">
            <summary>
            Name of the specifier
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtSpecifier.ValueType">
            <summary>
            Expected value type
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtSpecifier.When">
            <summary>
            When is the specifier executed
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifier.Dispatch(EpicGames.UHT.Tables.UhtSpecifierContext,System.Object)">
            <summary>
            Dispatch an instance of the specifier
            </summary>
            <param name="specifierContext">Current context</param>
            <param name="value">Specifier value</param>
            <returns>Results of the dispatch</returns>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierNoneDelegate">
            <summary>
            Delegate for a specifier with no value
            </summary>
            <param name="specifierContext"></param>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierNone">
            <summary>
            Specifier with no value
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierNone.#ctor(System.String,EpicGames.UHT.Tables.UhtSpecifierWhen,EpicGames.UHT.Tables.UhtSpecifierNoneDelegate)">
            <summary>
            Construct the specifier
            </summary>
            <param name="name">Name of the specifier</param>
            <param name="when">When the specifier is executed</param>
            <param name="specifierDelegate">Delegate to invoke</param>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierNone.Dispatch(EpicGames.UHT.Tables.UhtSpecifierContext,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierStringDelegate">
            <summary>
            Specifier delegate with a string value
            </summary>
            <param name="specifierContext">Specifier context</param>
            <param name="value">Specifier value</param>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierString">
            <summary>
            Specifier with a string value
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierString.#ctor(System.String,EpicGames.UHT.Tables.UhtSpecifierWhen,EpicGames.UHT.Tables.UhtSpecifierStringDelegate)">
            <summary>
            Construct the specifier
            </summary>
            <param name="name">Name of the specifier</param>
            <param name="when">When the specifier is executed</param>
            <param name="specifierDelegate">Delegate to invoke</param>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierString.Dispatch(EpicGames.UHT.Tables.UhtSpecifierContext,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierOptionalStringDelegate">
            <summary>
            Specifier delegate with an optional string value
            </summary>
            <param name="specifierContext">Specifier context</param>
            <param name="value">Specifier value</param>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierOptionalString">
            <summary>
            Specifier with an optional string value
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierOptionalString.#ctor(System.String,EpicGames.UHT.Tables.UhtSpecifierWhen,EpicGames.UHT.Tables.UhtSpecifierOptionalStringDelegate)">
            <summary>
            Construct the specifier
            </summary>
            <param name="name">Name of the specifier</param>
            <param name="when">When the specifier is executed</param>
            <param name="specifierDelegate">Delegate to invoke</param>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierOptionalString.Dispatch(EpicGames.UHT.Tables.UhtSpecifierContext,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierSingleStringDelegate">
            <summary>
            Specifier delegate with a string value
            </summary>
            <param name="specifierContext">Specifier context</param>
            <param name="value">Specifier value</param>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierSingleString">
            <summary>
            Specifier with a string value
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierSingleString.#ctor(System.String,EpicGames.UHT.Tables.UhtSpecifierWhen,EpicGames.UHT.Tables.UhtSpecifierSingleStringDelegate)">
            <summary>
            Construct the specifier
            </summary>
            <param name="name">Name of the specifier</param>
            <param name="when">When the specifier is executed</param>
            <param name="specifierDelegate">Delegate to invoke</param>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierSingleString.Dispatch(EpicGames.UHT.Tables.UhtSpecifierContext,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierKeyValuePairListDelegate">
            <summary>
            Specifier delegate with list of string keys and values 
            </summary>
            <param name="specifierContext">Specifier context</param>
            <param name="value">Specifier value</param>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierKeyValuePairList">
            <summary>
            Specifier with list of string keys and values 
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierKeyValuePairList.#ctor(System.String,EpicGames.UHT.Tables.UhtSpecifierWhen,System.Boolean,EpicGames.UHT.Tables.UhtSpecifierKeyValuePairListDelegate)">
            <summary>
            Construct the specifier
            </summary>
            <param name="name">Name of the specifier</param>
            <param name="when">When the specifier is executed</param>
            <param name="equalsOptional">If true this has an optional KVP list</param>
            <param name="specifierDelegate">Delegate to invoke</param>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierKeyValuePairList.Dispatch(EpicGames.UHT.Tables.UhtSpecifierContext,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierLegacyDelegate">
            <summary>
            Specifier delegate with no value
            </summary>
            <param name="specifierContext">Specifier context</param>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierLegacy">
            <summary>
            Specifier delegate for legacy UHT specifiers with no value.  Will generate a information/deprecation message
            is a value is supplied
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierLegacy.#ctor(System.String,EpicGames.UHT.Tables.UhtSpecifierLegacyDelegate)">
            <summary>
            Construct the specifier
            </summary>
            <param name="name">Name of the specifier</param>
            <param name="specifierDelegate">Delegate to invoke</param>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierLegacy.Dispatch(EpicGames.UHT.Tables.UhtSpecifierContext,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierStringListDelegate">
            <summary>
            Specifier delegate with an optional string list
            </summary>
            <param name="specifierContext">Specifier context</param>
            <param name="value">Specifier value</param>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierStringList">
            <summary>
            Specifier with an optional string list
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierStringList.#ctor(System.String,EpicGames.UHT.Tables.UhtSpecifierWhen,EpicGames.UHT.Tables.UhtSpecifierStringListDelegate)">
            <summary>
            Construct the specifier
            </summary>
            <param name="name">Name of the specifier</param>
            <param name="when">When the specifier is executed</param>
            <param name="specifierDelegate">Delegate to invoke</param>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierStringList.Dispatch(EpicGames.UHT.Tables.UhtSpecifierContext,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierNonEmptyStringListDelegate">
            <summary>
            Specifier delegate with a list of string views
            </summary>
            <param name="specifierContext">Specifier context</param>
            <param name="value">Specifier value</param>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierNonEmptyStringList">
            <summary>
            Specifier with a list of string views
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierNonEmptyStringList.#ctor(System.String,EpicGames.UHT.Tables.UhtSpecifierWhen,EpicGames.UHT.Tables.UhtSpecifierNonEmptyStringListDelegate)">
            <summary>
            Construct the specifier
            </summary>
            <param name="name">Name of the specifier</param>
            <param name="when">When the specifier is executed</param>
            <param name="specifierDelegate">Delegate to invoke</param>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierNonEmptyStringList.Dispatch(EpicGames.UHT.Tables.UhtSpecifierContext,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierAttribute">
            <summary>
            Defines a specifier method
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtSpecifierAttribute.Name">
            <summary>
            Name of the specifier.   If not supplied, the method name must end in "Specifier" and the name will be the method name with "Specifier" stripped.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtSpecifierAttribute.Extends">
            <summary>
            Name of the table/scope this specifier applies
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtSpecifierAttribute.ValueType">
            <summary>
            Value type of the specifier
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtSpecifierAttribute.When">
            <summary>
            When the specifier is dispatched
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierTable">
            <summary>
            Collection of specifiers for a given scope
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierTable.#ctor">
            <summary>
            Construct a new specifier table
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierTable.Add(EpicGames.UHT.Tables.UhtSpecifier)">
            <summary>
            Add the given value to the lookup table.  It will throw an exception if it is a duplicate.
            </summary>
            <param name="specifier">The specifier to add</param>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierTables">
            <summary>
            Collection of all specifier tables
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierTables.#ctor">
            <summary>
            Construct the specifier table
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierTables.OnSpecifierAttribute(System.Type,System.Reflection.MethodInfo,EpicGames.UHT.Tables.UhtSpecifierAttribute)">
            <summary>
            Invoke for a method that has the specifier attribute
            </summary>
            <param name="type">Type containing the method</param>
            <param name="methodInfo">Method info</param>
            <param name="specifierAttribute">Specified attributes</param>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Throw if the attribute isn't properly defined.</exception>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierValidatorDelegate">
            <summary>
            Delegate used to validate a specifier
            </summary>
            <param name="type">Containing type</param>
            <param name="metaData">Containing meta data</param>
            <param name="key">Key of the meta data entry</param>
            <param name="value">Value of the meta data entry</param>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierValidator">
            <summary>
            Defines a specifier validated created from the attribute
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtSpecifierValidator.Name">
            <summary>
            Name of the validator
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtSpecifierValidator.Delegate">
            <summary>
            Delegate for the validator
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierValidator.#ctor(System.String,EpicGames.UHT.Tables.UhtSpecifierValidatorDelegate)">
            <summary>
            Construct a new instance
            </summary>
            <param name="name">Name of the validator</param>
            <param name="specifierValidatorDelegate">Delegate of the validator</param>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierValidatorAttribute">
            <summary>
            Attribute used to create a specifier validator
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtSpecifierValidatorAttribute.Name">
            <summary>
            Name of the validator. If not supplied &quot;SpecifierValidator&quot; will be removed from the end of the method name
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtSpecifierValidatorAttribute.Extends">
            <summary>
            Name of the table/scope for the validator
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierValidatorTable">
            <summary>
            A table for validators for a given scope
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierValidatorTable.#ctor">
            <summary>
            Construct a new specifier table
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierValidatorTable.Add(EpicGames.UHT.Tables.UhtSpecifierValidator)">
            <summary>
            Add the given value to the lookup table.  It will throw an exception if it is a duplicate.
            </summary>
            <param name="specifier">Validator to add</param>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtSpecifierValidatorTables">
            <summary>
            Collection of specifier validators
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierValidatorTables.#ctor">
            <summary>
            Construct the validator tables
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtSpecifierValidatorTables.OnSpecifierValidatorAttribute(System.Type,System.Reflection.MethodInfo,EpicGames.UHT.Tables.UhtSpecifierValidatorAttribute)">
            <summary>
            Handle the attribute appearing on a method
            </summary>
            <param name="type">Type containing the method</param>
            <param name="methodInfo">The method</param>
            <param name="specifierValidatorAttribute">Attribute</param>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Thrown if the validator isn't properly defined</exception>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtStructDefaultValueDelegate">
            <summary>
            Delegate for invoking structure default value sanitizer
            </summary>
            <param name="property"></param>
            <param name="defaultValueReader"></param>
            <param name="innerDefaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtStructDefaultValueOptions">
            <summary>
            Options for structure default value sanitizer
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtStructDefaultValueOptions.None">
            <summary>
            No options
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tables.UhtStructDefaultValueOptions.Default">
            <summary>
            This method is to be invoked when there are no keyword matches found
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtStructDefaultValueOptionsExtensions">
            <summary>
            Helper methods for testing flags.  These methods perform better than the generic HasFlag which hits
            the GC and stalls.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtStructDefaultValueOptionsExtensions.HasAnyFlags(EpicGames.UHT.Tables.UhtStructDefaultValueOptions,EpicGames.UHT.Tables.UhtStructDefaultValueOptions)">
            <summary>
            Test to see if any of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if any of the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtStructDefaultValueOptionsExtensions.HasAllFlags(EpicGames.UHT.Tables.UhtStructDefaultValueOptions,EpicGames.UHT.Tables.UhtStructDefaultValueOptions)">
            <summary>
            Test to see if all of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if all the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtStructDefaultValueOptionsExtensions.HasExactFlags(EpicGames.UHT.Tables.UhtStructDefaultValueOptions,EpicGames.UHT.Tables.UhtStructDefaultValueOptions,EpicGames.UHT.Tables.UhtStructDefaultValueOptions)">
            <summary>
            Test to see if a specific set of flags have a specific value.
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <param name="matchFlags">Expected value of the tested flags</param>
            <returns>True if the given flags have a specific value.</returns>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtStructDefaultValueAttribute">
            <summary>
            Structure default value sanitizer attribute
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtStructDefaultValueAttribute.Name">
            <summary>
            Name of the structure.  Not required for default processor.  
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtStructDefaultValueAttribute.Options">
            <summary>
            Options
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtStructDefaultValue">
            <summary>
            Structure default value sanitizer
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtStructDefaultValue.Delegate">
            <summary>
            The delegate to invoke
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tables.UhtStructDefaultValueTable">
            <summary>
            Table of all structure default value specifiers
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tables.UhtStructDefaultValueTable.Default">
            <summary>
            Fetch the default sanitizer
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtStructDefaultValueTable.TryGet(EpicGames.Core.StringView,EpicGames.UHT.Tables.UhtStructDefaultValue@)">
            <summary>
            Return the structure default value associated with the given name
            </summary>
            <param name="name"></param>
            <param name="structDefaultValue">Structure default value handler</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Tables.UhtStructDefaultValueTable.OnStructDefaultValueAttribute(System.Reflection.MethodInfo,EpicGames.UHT.Tables.UhtStructDefaultValueAttribute)">
            <summary>
            Handle a structure default value sanitizer attribute
            </summary>
            <param name="methodInfo">Method information</param>
            <param name="structDefaultValueAttribute">Found attribute</param>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Thrown if the attribute isn't property defined</exception>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokenType">
            <summary>
            Type of the token
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tokenizer.UhtTokenType.EndOfFile">
            <summary>
            End of file token.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tokenizer.UhtTokenType.EndOfDefault">
            <summary>
            End of default value. 
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tokenizer.UhtTokenType.EndOfType">
            <summary>
            End of type
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tokenizer.UhtTokenType.EndOfDeclaration">
            <summary>
            End of declaration
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tokenizer.UhtTokenType.Line">
            <summary>
            Line of text (when calling GetLine only)
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tokenizer.UhtTokenType.Identifier">
            <summary>
            Alphanumeric identifier.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tokenizer.UhtTokenType.Symbol">
            <summary>
            Symbol.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tokenizer.UhtTokenType.FloatConst">
            <summary>
            Floating point constant
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tokenizer.UhtTokenType.DecimalConst">
            <summary>
            Decimal Integer constant
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tokenizer.UhtTokenType.HexConst">
            <summary>
            Hex integer constant
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tokenizer.UhtTokenType.CharConst">
            <summary>
            Single character constant
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tokenizer.UhtTokenType.StringConst">
            <summary>
            String constant
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokenTypeExtensions">
            <summary>
            Series of extension methods for the token type
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenTypeExtensions.IsEndType(EpicGames.UHT.Tokenizer.UhtTokenType)">
            <summary>
            Return true if the token type is an end type
            </summary>
            <param name="tokenType">Token type in question</param>
            <returns>True if the token type is an end type</returns>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtToken">
            <summary>
            Token declaration
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tokenizer.UhtToken.MaxNameLength">
            <summary>
            Names/Identifiers can not be longer that the following
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tokenizer.UhtToken.MaxStringLength">
            <summary>
            Strings can not be longer than the following.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtToken.TokenType">
            <summary>
            Type of the token
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtToken.UngetPos">
            <summary>
            Position to restore the reader
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtToken.UngetLine">
            <summary>
            Line to restore the reader
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtToken.InputStartPos">
            <summary>
            Starting position of the token value
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtToken.InputEndPos">
            <summary>
            End position of the token value
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtToken.InputLine">
            <summary>
            Line containing the token
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtToken.Value">
            <summary>
            Token value
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.#ctor(EpicGames.UHT.Tokenizer.UhtTokenType)">
            <summary>
            Construct a new token
            </summary>
            <param name="tokenType">Type of the token</param>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.#ctor(EpicGames.UHT.Tokenizer.UhtTokenType,System.Int32,System.Int32,System.Int32,System.Int32,EpicGames.Core.StringView)">
            <summary>
            Construct a new token
            </summary>
            <param name="tokenType">Type of token</param>
            <param name="ungetPos">Unget position</param>
            <param name="ungetLine">Unget line</param>
            <param name="inputStartPos">Start position of value</param>
            <param name="inputLine">Line of value</param>
            <param name="value">Token value</param>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.op_Implicit(EpicGames.UHT.Tokenizer.UhtToken)~System.Boolean">
            <summary>
            True if the token isn't an end token
            </summary>
            <param name="token">Token in question</param>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.IsEndType">
            <summary>
            Return true if the token is an end token
            </summary>
            <returns>True if the token is an end token</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.IsValue(System.Char)">
            <summary>
            Test to see if the value matches the given character
            </summary>
            <param name="value">Value to test</param>
            <returns>True if the token value matches the given value</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.IsValue(System.String,System.Boolean)">
            <summary>
            Test to see if the value matches the given string
            </summary>
            <param name="value">Value to test</param>
            <param name="ignoreCase">If true, ignore case</param>
            <returns>True if the value matches</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.IsValue(EpicGames.Core.StringView,System.Boolean)">
            <summary>
            Test to see if the value matches the given string
            </summary>
            <param name="value">Value to test</param>
            <param name="ignoreCase">If true, ignore case</param>
            <returns>True if the value matches</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.ValueStartsWith(System.String,System.Boolean)">
            <summary>
            Test to see if the value starts with the given string
            </summary>
            <param name="value">Value to test</param>
            <param name="ignoreCase">If true, ignore case</param>
            <returns>True is the value starts with the given string</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.IsIdentifier">
            <summary>
            Return true if the token is an identifier
            </summary>
            <returns>True if the token is an identifier</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.IsIdentifier(System.String,System.Boolean)">
            <summary>
            Return true if the identifier matches
            </summary>
            <param name="identifier">Identifier to test</param>
            <param name="ignoreCase">If true, ignore case</param>
            <returns>True if the identifier matches</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.IsIdentifier(EpicGames.Core.StringView,System.Boolean)">
            <summary>
            Return true if the identifier matches
            </summary>
            <param name="identifier">Identifier to test</param>
            <param name="ignoreCase">If true, ignore case</param>
            <returns>True if the identifier matches</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.IsSymbol">
            <summary>
            Return true if the token is a symbol
            </summary>
            <returns>True if the token is a symbol</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.IsSymbol(System.Char)">
            <summary>
            Return true if the symbol matches
            </summary>
            <param name="symbol">Symbol to test</param>
            <returns>True if the symbol matches</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.IsSymbol(System.String)">
            <summary>
            Return true if the symbol matches
            </summary>
            <param name="symbol">Symbol to test</param>
            <returns>True if the symbol matches</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.IsSymbol(EpicGames.Core.StringView)">
            <summary>
            Return true if the symbol matches
            </summary>
            <param name="symbol">Symbol to test</param>
            <returns>True if the symbol matches</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.IsConstInt">
            <summary>
            Return true if the token is a constant integer
            </summary>
            <returns>True if constant integer</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.IsConstFloat">
            <summary>
            Return true if the token is a constant floag
            </summary>
            <returns>True if constant float</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.GetConstInt(System.Int32@)">
            <summary>
            Get the integer value of the token.  Only supported for decimal, hexadecimal, and floating point values
            </summary>
            <param name="value">Resulting value</param>
            <returns>True if the value was set</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.GetConstLong(System.Int64@)">
            <summary>
            Get the integer value of the token.  Only supported for decimal, hexadecimal, and floating point values
            </summary>
            <param name="value">Resulting value</param>
            <returns>True if the value was set</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.GetConstFloat(System.Single@)">
            <summary>
            Get the float value of the token.  Only supported for decimal, hexadecimal, and floating point values
            </summary>
            <param name="value">Resulting value</param>
            <returns>True if the value was set</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.GetConstDouble(System.Double@)">
            <summary>
            Get the double value of the token.  Only supported for decimal, hexadecimal, and floating point values
            </summary>
            <param name="value">Resulting value</param>
            <returns>True if the value was set</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.IsConstString">
            <summary>
            Return true if the token is a constant string (or a char constant)
            </summary>
            <returns>True if the token is a string or character constant</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.GetUnescapedString(EpicGames.UHT.Utils.IUhtMessageSite)">
            <summary>
            Return an un-escaped string.  The surrounding quotes will be removed and escaped characters will be converted to the actual values.
            </summary>
            <param name="messageSite"></param>
            <returns>Resulting string</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtException">Thrown if the token type is not a string or character constant</exception>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.GetConstantValue(System.Boolean)">
            <summary>
            Return a string representation of the token value.  This will convert numeric values and format them.
            </summary>
            <param name="respectQuotes">If true, embedded quotes will be respected</param>
            <returns>Resulting string</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.GetTokenString(System.Boolean)">
            <summary>
            Return an un-escaped string.  The surrounding quotes will be removed and escaped characters will be converted to the actual values.
            </summary>
            <param name="respectQuotes">If true, respect embedded quotes</param>
            <returns>Resulting string</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.Join(System.Collections.Generic.IEnumerable{EpicGames.UHT.Tokenizer.UhtToken})">
            <summary>
            Join the given tokens into a string
            </summary>
            <param name="tokens">Tokens to join</param>
            <returns>Joined strings</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.Join(System.Char,System.Collections.Generic.IEnumerable{EpicGames.UHT.Tokenizer.UhtToken})">
            <summary>
            Join the given tokens into a string
            </summary>
            <param name="separator">Separator between tokens</param>
            <param name="tokens">Tokens to join</param>
            <returns>Joined strings</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.Join(System.String,System.Collections.Generic.IEnumerable{EpicGames.UHT.Tokenizer.UhtToken})">
            <summary>
            Join the given tokens into a string
            </summary>
            <param name="separator">Separator between tokens</param>
            <param name="tokens">Tokens to join</param>
            <returns>Joined strings</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtToken.ToString">
            <summary>
            Convert the token to a string.  This will be the value.
            </summary>
            <returns>Value of the token</returns>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokenBufferReader">
            <summary>
            Token reader for source buffers
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.#ctor(EpicGames.UHT.Utils.IUhtMessageSite,System.ReadOnlyMemory{System.Char})">
            <summary>
            Construct a new token reader
            </summary>
            <param name="messageSite">Message site for messages</param>
            <param name="input">Input source</param>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.IsEOF">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.InputPos">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.InputLine">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.Comments">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.TokenPreprocessor">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.PeekToken">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.SkipWhitespaceAndComments">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.ConsumeToken">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.GetToken">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.GetRawString(System.Char,EpicGames.UHT.Tokenizer.UhtRawStringOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.GetLine">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.GetStringView(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.ClearComments">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.DisableComments">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.EnableComments">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.CommitPendingComments">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.IsFirstTokenInLine(EpicGames.UHT.Tokenizer.UhtToken@)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.SaveState">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.RestoreState">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.AbandonState">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.EnableRecording">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.RecordToken(EpicGames.UHT.Tokenizer.UhtToken@)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.DisableRecording">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.RecordedTokens">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.GetTokenInternal(System.Boolean)">
            <summary>
            Get the next token
            </summary>
            <returns>Return the next token from the stream.  If the end of stream is reached, a token type of None will be returned.</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.SkipWhitespaceAndCommentsInternal(System.Boolean@,System.Boolean)">
            <summary>
            Skip all leading whitespace and collect any comments
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.InternalPeekChar(System.ReadOnlySpan{System.Char})">
            <summary>
            Fetch the next character in the input stream or zero if we have reached the end.
            The current offset in the buffer is not advanced.  The method does not support UTF-8
            </summary>
            <param name="span">The span containing the data</param>
            <returns>Next character in the stream or zero</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.InternalGetChar(System.ReadOnlySpan{System.Char})">
            <summary>
            Fetch the next character in the input stream or zero if we have reached the end.
            The current offset in the buffer is advanced.  The method does not support UTF-8.
            </summary>
            <param name="span">The span containing the data</param>
            <returns>Next character in the stream or zero</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenBufferReader.ClearToken">
            <summary>
            If we have a current token, then reset the pending comments and input position back to before the token.
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtRawStringOptions">
            <summary>
            Options for GetRawString method
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tokenizer.UhtRawStringOptions.None">
            <summary>
            No options
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tokenizer.UhtRawStringOptions.RespectQuotes">
            <summary>
            Don't consider the terminator while in a quoted string
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tokenizer.UhtRawStringOptions.DontConsumeTerminator">
            <summary>
            Don't consume the terminator.  It will be parsed later.
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtRawStringOptionsExtensions">
            <summary>
            Helper methods for testing flags.  These methods perform better than the generic HasFlag which hits
            the GC and stalls.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtRawStringOptionsExtensions.HasAnyFlags(EpicGames.UHT.Tokenizer.UhtRawStringOptions,EpicGames.UHT.Tokenizer.UhtRawStringOptions)">
            <summary>
            Test to see if any of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if any of the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtRawStringOptionsExtensions.HasAllFlags(EpicGames.UHT.Tokenizer.UhtRawStringOptions,EpicGames.UHT.Tokenizer.UhtRawStringOptions)">
            <summary>
            Test to see if all of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if all the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtRawStringOptionsExtensions.HasExactFlags(EpicGames.UHT.Tokenizer.UhtRawStringOptions,EpicGames.UHT.Tokenizer.UhtRawStringOptions,EpicGames.UHT.Tokenizer.UhtRawStringOptions)">
            <summary>
            Test to see if a specific set of flags have a specific value.
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <param name="matchFlags">Expected value of the tested flags</param>
            <returns>True if the given flags have a specific value.</returns>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.IUhtTokenPreprocessor">
            <summary>
            Interface invoked when the parser reaches a '#' preprocessor block
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.IUhtTokenPreprocessor.ParsePreprocessorDirective(EpicGames.UHT.Tokenizer.UhtToken@,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Parse a preprocessor directive
            </summary>
            <param name="token">Token starting the directive.  Will be only the '#'</param>
            <param name="isBeingIncluded">If true, the directive the source is being included.  Otherwise it is being skipped as part of an #if block</param>
            <param name="clearComments">If true, comments should be cleared</param>
            <param name="illegalContentsCheck">If true, excluded contents should be checked for unparsed UE macros (i.e. UCLASS) </param>
            <returns>True if the source should continue to be included</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.IUhtTokenPreprocessor.SaveState">
            <summary>
            Save the current preprocessor state
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.IUhtTokenPreprocessor.RestoreState">
            <summary>
            Restore the current preprocessor state
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.IUhtTokenReader">
            <summary>
            Common token reader interfaces for all token reader.  When creating extension methods, use the interface.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.IUhtTokenReader.IsEOF">
            <summary>
            True if the reader is at the end of the stream
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.IUhtTokenReader.InputPos">
            <summary>
            Current input position in the stream by characters
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.IUhtTokenReader.InputLine">
            <summary>
            Current input line in the stream
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.IUhtTokenReader.TokenPreprocessor">
            <summary>
            Preprocessor attached to the token reader
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.IUhtTokenReader.PeekToken">
            <summary>
            If the reader doesn't have a current token, then read the next token and return a reference to it.
            Otherwise return a reference to the current token.
            </summary>
            <returns>The current token.  Will be invalidated by other calls to ITokenReader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.IUhtTokenReader.ConsumeToken">
            <summary>
            Mark the current token as being consumed.  Any call to PeekToken or GetToken will read another token.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.IUhtTokenReader.GetToken">
            <summary>
            Get the next token in the data.  If there is a current token, then that token is returned and marked as consumed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.IUhtTokenReader.IsFirstTokenInLine(EpicGames.UHT.Tokenizer.UhtToken@)">
            <summary>
            Tests to see if the given token is the first token of a line
            </summary>
            <param name="token">The token to test</param>
            <returns>True if the token is the first token on the line</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.IUhtTokenReader.SkipWhitespaceAndComments">
            <summary>
            Skip any whitespace and comments at the current buffer position
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.IUhtTokenReader.GetLine">
            <summary>
            Read the entire next line in the buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.IUhtTokenReader.GetStringView(System.Int32,System.Int32)">
            <summary>
            Get a view of the buffer being read
            </summary>
            <param name="startPos">Starting character offset in the buffer.</param>
            <param name="count">Length of the span</param>
            <returns>The string view into the buffer</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.IUhtTokenReader.GetRawString(System.Char,EpicGames.UHT.Tokenizer.UhtRawStringOptions)">
            <summary>
            Return a string terminated by the given character.
            </summary>
            <param name="terminator">The character to stop at.</param>
            <param name="options">Options</param>
            <returns>The parsed string</returns>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.IUhtTokenReader.Comments">
            <summary>
            The current collection of parsed comments.  This does not include any comments parsed as part of a 
            call to PeekToken unless ConsumeToken has been invoked after a call to PeekToken.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.IUhtTokenReader.ClearComments">
            <summary>
            Clear the current collection of comments.  Any comments parsed by PeekToken prior to calling ConsomeToken will
            not be cleared.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.IUhtTokenReader.DisableComments">
            <summary>
            Disable the processing of comments.  This is often done when skipping a bulk of the buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.IUhtTokenReader.EnableComments">
            <summary>
            Enable comment collection.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.IUhtTokenReader.CommitPendingComments">
            <summary>
            If there are any pending comments (due to a PeekToken), commit then so they will be return as current comments
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.IUhtTokenReader.SaveState">
            <summary>
            Save the current parsing state.  There is a limited number of states that can be saved.
            Invoke either RestoreState or AbandonState after calling SaveState.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.IUhtTokenReader.RestoreState">
            <summary>
            Restore a previously saved state.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.IUhtTokenReader.AbandonState">
            <summary>
            Abandon a previously saved state
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.IUhtTokenReader.EnableRecording">
            <summary>
            Enable the recording of tokens
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.IUhtTokenReader.DisableRecording">
            <summary>
            Disable the recording of tokens.  Any currently recorded tokens will be removed
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.IUhtTokenReader.RecordToken(EpicGames.UHT.Tokenizer.UhtToken@)">
            <summary>
            Record the given token to the list of recorded tokens
            </summary>
            <param name="token">Token to record</param>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.IUhtTokenReader.RecordedTokens">
            <summary>
            Get the current collection of recorded tokens
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokenList">
            <summary>
            Represents a list of tokens. Follow the Next chain for each element in the list.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtTokenList.Token">
            <summary>
            The token
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtTokenList.Next">
            <summary>
            The next token in the list
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenList.Join(System.Text.StringBuilder,System.String)">
            <summary>
            Join the tokens in the list
            </summary>
            <param name="builder">Destination builder</param>
            <param name="seperator">Separator between the tokens</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenList.Join(System.String)">
            <summary>
            Join the tokens in the list
            </summary>
            <param name="seperator">Separator between the tokens</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenList.ToArray">
            <summary>
            Return the token list as an array
            </summary>
            <returns></returns>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokenListCache">
            <summary>
            Token list cache.  Token lists must be returned to the cache.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenListCache.Borrow(EpicGames.UHT.Tokenizer.UhtToken)">
            <summary>
            Borrow a token list
            </summary>
            <param name="token">Starting token</param>
            <returns>Token list</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenListCache.Return(EpicGames.UHT.Tokenizer.UhtTokenList)">
            <summary>
            Return a token list to the cache
            </summary>
            <param name="identifier"></param>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokenDelegate">
            <summary>
            Delegate for when a token is parsed
            </summary>
            <param name="token">The token in question</param>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokensUntilDelegate">
            <summary>
            Delegate for when a token is parsed in an until block
            </summary>
            <param name="token">The token in question</param>
            <returns>True if parsing should continue</returns>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokensDelegate">
            <summary>
            Delegate for an enumeration of tokens
            </summary>
            <param name="tokens">Parsed tokens</param>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokenListDelegate">
            <summary>
            Delegate for cached token list
            </summary>
            <param name="tokenList">Token list that can be cached</param>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokenConstFloatDelegate">
            <summary>
            Delegate for a constant float
            </summary>
            <param name="value">Value in question</param>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokenConstDoubleDelegate">
            <summary>
            Delegate for a constant double
            </summary>
            <param name="value">Value in question</param>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokenDisableComments">
            <summary>
            Helper struct to disable comment parsing.  Should be used in a using block
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenDisableComments.#ctor(EpicGames.UHT.Tokenizer.IUhtTokenReader)">
            <summary>
            Construct instance
            </summary>
            <param name="tokenReader">Token reader to disable</param>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenDisableComments.Dispose">
            <summary>
            Enable comments
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokenSaveState">
            <summary>
            Helper struct to save token reader state
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenSaveState.#ctor(EpicGames.UHT.Tokenizer.IUhtTokenReader)">
            <summary>
            Construct instance
            </summary>
            <param name="tokenReader">Token reader</param>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenSaveState.Dispose">
            <summary>
            Restore the token reader state
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenSaveState.RestoreState">
            <summary>
            Restore the token reader state
            </summary>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Thrown if state has already been restored or aborted</exception>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenSaveState.AbandonState">
            <summary>
            Abandon the saved state
            </summary>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Thrown if state has already been restored or aborted</exception>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokenReaderFloatExtensions">
            <summary>
            Collection of token reader extensions for float values
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFloatExtensions.TryOptionalConstFloat(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Single@)">
            <summary>
            Get the next token as a float.  If the next token is not a float, no token is consumed.
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="value">The float value of the token</param>
            <returns>True if the next token was an float, false if not.</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFloatExtensions.OptionalConstFloat(EpicGames.UHT.Tokenizer.IUhtTokenReader)">
            <summary>
            Get the next token as a float.  If the next token is not a float, no token is consumed.
            </summary>
            <param name="tokenReader"></param>
            <returns>The token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFloatExtensions.OptionalConstFloat(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtTokenConstFloatDelegate)">
            <summary>
            Get the next token as a float.  If the next token is not a float, no token is consumed.
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="floatDelegate">Delegate to invoke with the float value</param>
            <returns>The token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFloatExtensions.RequireConstFloat(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Object)">
            <summary>
            Get the next token as a float.  If the next token is not a float, an exception is thrown
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="exceptionContext">If not null, an exception will be thrown with the given text as part of the message.</param>
            <returns>True if the next token was an float, false if not.</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFloatExtensions.GetConstFloat(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Object)">
            <summary>
            Get the next token as a float.  If the next token is not a float, an exception is thrown
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="exceptionContext">If not null, an exception will be thrown with the given text as part of the message.</param>
            <returns>The floating point value of the token</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFloatExtensions.TryOptionalLeadingSignConstFloat(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Single@)">
            <summary>
            Get the next float.  It also handles [+/-] token followed by an float.
            </summary>
            <param name="tokenReader">Source tokens</param>
            <param name="value">The float value of the token</param>
            <returns>True if the next token was an float, false if not.</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFloatExtensions.TryOptionalConstFloatExpression(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Single@)">
            <summary>
            Get the next float.  It also handles [+/-] token followed by an float.
            </summary>
            <param name="tokenReader">Source tokens</param>
            <param name="value">The float value of the token</param>
            <returns>True if the next token was an float, false if not.</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFloatExtensions.GetConstFloatExpression(EpicGames.UHT.Tokenizer.IUhtTokenReader)">
            <summary>
            Get the next float.  It also handles [+/-] token followed by an float.
            </summary>
            <param name="tokenReader">Source tokens</param>
            <returns>The double value</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFloatExtensions.TryOptionalConstDoubleExpression(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Double@)">
            <summary>
            Get the next double.  It also handles [+/-] token followed by an double.
            </summary>
            <param name="tokenReader">Source tokens</param>
            <param name="value">The double value of the token</param>
            <returns>True if the next token was an double, false if not.</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFloatExtensions.RequireConstDoubleExpression(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtTokenConstDoubleDelegate)">
            <summary>
            Get the next double.  It also handles [+/-] token followed by an double.
            </summary>
            <param name="tokenReader">Source tokens</param>
            <param name="doubleDelegate">Delegate to invoke if the double is parsed</param>
            <returns>The supplied token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFloatExtensions.GetConstDoubleExpression(EpicGames.UHT.Tokenizer.IUhtTokenReader)">
            <summary>
            Get the next double.  It also handles [+/-] token followed by an double.
            </summary>
            <param name="tokenReader">Source tokens</param>
            <returns>The double value</returns>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokenReaderFlowControlExtensions">
            <summary>
            Collection of token reader extensions to help with flow control
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFlowControlExtensions.TryOptionalList(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char,System.Char,System.Char,System.Boolean,System.Action)">
            <summary>
            Parse an optional list
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="initiator">Initiating symbol</param>
            <param name="terminator">Terminating symbol</param>
            <param name="separator">Separator symbol</param>
            <param name="allowTrailingSeparator">If true, allow trailing separators</param>
            <param name="action">Action to be invoked for each list element.</param>
            <returns>True if a list was read</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFlowControlExtensions.RequireList(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char,System.Char,System.Char,System.Boolean,System.Action)">
            <summary>
            Parse a required list
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="initiator">Initiating symbol</param>
            <param name="terminator">Terminating symbol</param>
            <param name="separator">Separator symbol</param>
            <param name="allowTrailingSeparator">If true, allow trailing separators</param>
            <param name="action">Action to be invoked for each list element.</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFlowControlExtensions.RequireList(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char,System.Char,System.Char,System.Boolean,System.Object,System.Action)">
            <summary>
            Parse a required list
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="initiator">Initiating symbol</param>
            <param name="terminator">Terminating symbol</param>
            <param name="separator">Separator symbol</param>
            <param name="allowTrailingSeparator">If true, allow trailing separators</param>
            <param name="exceptionContext">Extra context for error messages</param>
            <param name="action">Action to be invoked for each list element.</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFlowControlExtensions.RequireList(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char,System.Char,System.Boolean,System.Action)">
            <summary>
            Parse a required list.  Initiating token must have already been parsed
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="terminator">Terminating symbol</param>
            <param name="separator">Separator symbol</param>
            <param name="allowTrailingSeparator">If true, allow trailing separators</param>
            <param name="action">Action to be invoked for each list element.</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFlowControlExtensions.RequireList(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char,System.Char,System.Boolean,System.Object,System.Action)">
            <summary>
            Parse a required list.  Initiating token must have already been parsed
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="terminator">Terminating symbol</param>
            <param name="separator">Separator symbol</param>
            <param name="allowTrailingSeparator">If true, allow trailing separators</param>
            <param name="exceptionContext">Extra context for error messages</param>
            <param name="action">Action to be invoked for each list element.</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFlowControlExtensions.TryOptionalList(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char,System.Char,System.Char,System.Boolean,EpicGames.UHT.Tokenizer.UhtTokensDelegate)">
            <summary>
            Parse an optional list
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="initiator">Initiating symbol</param>
            <param name="terminator">Terminating symbol</param>
            <param name="separator">Separator symbol</param>
            <param name="allowTrailingSeparator">If true, allow trailing separators</param>
            <param name="tokensDelegate">Delegate to invoke with the parsed token list</param>
            <returns>True if a list was read</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFlowControlExtensions.RequireList(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char,System.Char,System.Char,System.Boolean,EpicGames.UHT.Tokenizer.UhtTokensDelegate)">
            <summary>
            Parse a required list
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="initiator">Initiating symbol</param>
            <param name="terminator">Terminating symbol</param>
            <param name="separator">Separator symbol</param>
            <param name="allowTrailingSeparator">If true, allow trailing separators</param>
            <param name="tokensDelegate">Delegate to invoke with the parsed token list</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFlowControlExtensions.RequireList(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char,System.Char,System.Char,System.Boolean,System.Object,EpicGames.UHT.Tokenizer.UhtTokensDelegate)">
            <summary>
            Parse a required list
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="initiator">Initiating symbol</param>
            <param name="terminator">Terminating symbol</param>
            <param name="separator">Separator symbol</param>
            <param name="allowTrailingSeparator">If true, allow trailing separators</param>
            <param name="exceptionContext">Extra context for error messages</param>
            <param name="tokensDelegate">Delegate to invoke with the parsed token list</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFlowControlExtensions.RequireList(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char,System.Char,System.Boolean,EpicGames.UHT.Tokenizer.UhtTokensDelegate)">
            <summary>
            Parse a required list.  Initiating token must have already been parsed
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="terminator">Terminating symbol</param>
            <param name="separator">Separator symbol</param>
            <param name="allowTrailingSeparator">If true, allow trailing separators</param>
            <param name="tokensDelegate">Delegate to invoke with the parsed token list</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFlowControlExtensions.RequireList(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char,System.Char,System.Boolean,System.Object,EpicGames.UHT.Tokenizer.UhtTokensDelegate)">
            <summary>
            Parse a required list.  Initiating token must have already been parsed
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="terminator">Terminating symbol</param>
            <param name="separator">Separator symbol</param>
            <param name="allowTrailingSeparator">If true, allow trailing separators</param>
            <param name="exceptionContext">Extra context for error messages</param>
            <param name="tokensDelegate">Delegate to invoke with the parsed token list</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFlowControlExtensions.RequireList(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char,System.Char,System.Object)">
            <summary>
            Consume a block of tokens bounded by the two given symbols.
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="initiator">The next token must be the given symbol.</param>
            <param name="terminator">The tokens are read until the given symbol is found.  The terminating symbol will be consumed.</param>
            <param name="exceptionContext">Extra context for any error messages</param>
            <returns>The input token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFlowControlExtensions.While(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.String,System.Action)">
            <summary>
            Invoke action while the next token is the given string
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="text">Text to match to continue invoking Action</param>
            <param name="action">Action to invoke if and only if the prior text was parsed.</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFlowControlExtensions.While(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char,System.Action)">
            <summary>
            Invoke action while the next token is the given string
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="text">Text to match to continue invoking Action</param>
            <param name="action">Action to invoke if and only if the prior text was parsed.</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFlowControlExtensions.While(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtTokensUntilDelegate)">
            <summary>
            Read tokens until the delegate return false.  The terminating token is not consumed.
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="untilDelegate">Invoked with each read token.  Return true to continue tokenizing or false to terminate.</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFlowControlExtensions.ConsumeUntil(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.String[])">
            <summary>
            Consume tokens until one of the strings are found.  Terminating token will not be consumed.
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="terminators">Strings that will terminate processing.</param>
            <returns>Number of tokens consumed</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderFlowControlExtensions.ConsumeUntil(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char)">
            <summary>
            Consume until the given terminator is found.  Terminating token will be consumed
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="terminator">Terminating symbol</param>
            <returns>Token reader</returns>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokenReaderGeneralExtensions">
            <summary>
            Collection of general token reader extensions
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderGeneralExtensions.TryOptional(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.String)">
            <summary>
            Try to parse the given text
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="text">Text to match</param>
            <returns>True if the text matched</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderGeneralExtensions.TryOptional(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.Core.StringView)">
            <summary>
            Try to parse the given text
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="text">Text to match</param>
            <returns>True if the text matched</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderGeneralExtensions.TryPeekOptional(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.String)">
            <summary>
            Try to parse the given text.  However, the matching token will not be consumed.
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="text">Text to match</param>
            <returns>True if the text matched</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderGeneralExtensions.TryOptional(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.String[])">
            <summary>
            Test to see if the next token is one of the given strings.
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="text">List of keywords to test</param>
            <returns>Index of matched string or -1 if nothing matched</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderGeneralExtensions.TryOptional(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char)">
            <summary>
            Try to parse the given text
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="text">Text to match</param>
            <returns>True if the text matched</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderGeneralExtensions.TryOptional(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char,EpicGames.UHT.Tokenizer.UhtToken@)">
            <summary>
            Try to parse the given text
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="text">Text to match</param>
            <param name="outToken">Open that was matched</param>
            <returns>True if the text matched</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderGeneralExtensions.TryPeekOptional(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char)">
            <summary>
            Try to parse the given text.  However, the matching token will not be consumed.
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="text">Text to match</param>
            <returns>True if the text matched</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderGeneralExtensions.Optional(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.String)">
            <summary>
            Parse optional text
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="text">Text to match</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderGeneralExtensions.Optional(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.String,System.Action)">
            <summary>
            Parse optional text
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="text">Text to match</param>
            <param name="action">Action to invoke if the text was found</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderGeneralExtensions.Optional(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char)">
            <summary>
            Parse optional text
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="text">Text to match</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderGeneralExtensions.Optional(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char,System.Action)">
            <summary>
            Parse optional text
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="text">Text to match</param>
            <param name="action">Action to invoke if the text was found</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderGeneralExtensions.OptionalStartsWith(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.String)">
            <summary>
            Parse optional token that starts with the given text 
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="text">Text to match</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderGeneralExtensions.OptionalStartsWith(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.String,EpicGames.UHT.Tokenizer.UhtTokenDelegate)">
            <summary>
            Parse optional token that starts with the given text 
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="text">Text to match</param>
            <param name="tokenDelegate">Delegate to invoke on a match</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderGeneralExtensions.Require(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.String,System.Object)">
            <summary>
            Require the given text
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="text">Required text</param>
            <param name="exceptionContext">Extra exception context</param>
            <returns>Token reader</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtTokenException">Thrown if text is not found</exception>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderGeneralExtensions.Require(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.String,EpicGames.UHT.Tokenizer.UhtTokenDelegate)">
            <summary>
            Require the given text
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="text">Required text</param>
            <param name="tokenDelegate">Delegate to invoke on a match</param>
            <returns>Token reader</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtTokenException">Thrown if text is not found</exception>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderGeneralExtensions.Require(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.String,System.Object,EpicGames.UHT.Tokenizer.UhtTokenDelegate)">
            <summary>
            Require the given text
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="text">Required text</param>
            <param name="exceptionContext">Extra exception context</param>
            <param name="tokenDelegate">Delegate to invoke on a match</param>
            <returns>Token reader</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtTokenException">Thrown if text is not found</exception>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderGeneralExtensions.Require(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char,System.Object)">
            <summary>
            Require the given text
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="text">Required text</param>
            <param name="exceptionContext">Extra exception context</param>
            <returns>Token reader</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtTokenException">Thrown if text is not found</exception>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderGeneralExtensions.Require(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char,EpicGames.UHT.Tokenizer.UhtTokenDelegate)">
            <summary>
            Require the given text
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="text">Required text</param>
            <param name="tokenDelegate">Delegate to invoke on a match</param>
            <returns>Token reader</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtTokenException">Thrown if text is not found</exception>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderGeneralExtensions.Require(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char,System.Object,EpicGames.UHT.Tokenizer.UhtTokenDelegate)">
            <summary>
            Require the given text
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="text">Required text</param>
            <param name="exceptionContext">Extra exception context</param>
            <param name="tokenDelegate">Delegate to invoke on a match</param>
            <returns>Token reader</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtTokenException">Thrown if text is not found</exception>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtCppIdentifierOptions">
            <summary>
            Options when parsing identifier
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tokenizer.UhtCppIdentifierOptions.None">
            <summary>
            No options
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Tokenizer.UhtCppIdentifierOptions.AllowTemplates">
            <summary>
            Include template arguments when parsing identifier
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtGetCppIdentifierOptionsExtensions">
            <summary>
            Helper methods for testing flags.  These methods perform better than the generic HasFlag which hits
            the GC and stalls.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtGetCppIdentifierOptionsExtensions.HasAnyFlags(EpicGames.UHT.Tokenizer.UhtCppIdentifierOptions,EpicGames.UHT.Tokenizer.UhtCppIdentifierOptions)">
            <summary>
            Test to see if any of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if any of the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtGetCppIdentifierOptionsExtensions.HasAllFlags(EpicGames.UHT.Tokenizer.UhtCppIdentifierOptions,EpicGames.UHT.Tokenizer.UhtCppIdentifierOptions)">
            <summary>
            Test to see if all of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if all the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtGetCppIdentifierOptionsExtensions.HasExactFlags(EpicGames.UHT.Tokenizer.UhtCppIdentifierOptions,EpicGames.UHT.Tokenizer.UhtCppIdentifierOptions,EpicGames.UHT.Tokenizer.UhtCppIdentifierOptions)">
            <summary>
            Test to see if a specific set of flags have a specific value.
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <param name="matchFlags">Expected value of the tested flags</param>
            <returns>True if the given flags have a specific value.</returns>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokenReaderIdentifierExtensions">
            <summary>
            Collection of token reader extensions for working with identifiers
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIdentifierExtensions.TryOptionalIdentifier(EpicGames.UHT.Tokenizer.IUhtTokenReader)">
            <summary>
            Get the next token and verify that it is an identifier
            </summary>
            <returns>True if it is an identifier, false if not.</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIdentifierExtensions.TryOptionalIdentifier(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtToken@)">
            <summary>
            Get the next token and verify that it is an identifier
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="identifier">The fetched value of the identifier</param>
            <returns>True if it is an identifier, false if not.</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIdentifierExtensions.OptionalIdentifier(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtTokenDelegate)">
            <summary>
            Parse an optional identifier
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="tokenDelegate">Invoked of an identifier is parsed</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIdentifierExtensions.RequireIdentifier(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Object)">
            <summary>
            Parse a required identifier
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="exceptionContext">Extra exception context</param>
            <returns>Token reader</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtTokenException">Thrown if an identifier isn't found</exception>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIdentifierExtensions.RequireIdentifier(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtTokenDelegate)">
            <summary>
            Parse a required identifier
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="tokenDelegate">Invoked if an identifier is parsed</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIdentifierExtensions.RequireIdentifier(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Object,EpicGames.UHT.Tokenizer.UhtTokenDelegate)">
            <summary>
            Parse a required identifier
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="exceptionContext">Extra exception context</param>
            <param name="tokenDelegate">Invoked if an identifier is parsed</param>
            <returns>Token reader</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtTokenException">Thrown if an identifier isn't found</exception>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIdentifierExtensions.GetIdentifier(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Object)">
            <summary>
            Get a required identifier
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="exceptionContext">Extra exception context</param>
            <returns>Identifier token</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtTokenException">Thrown if an identifier isn't found</exception>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIdentifierExtensions.TryOptionalCppIdentifier(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Collections.Generic.IEnumerable{EpicGames.UHT.Tokenizer.UhtToken}@,EpicGames.UHT.Tokenizer.UhtCppIdentifierOptions)">
            <summary>
            Parse an optional cpp identifier
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="identifier">Enumeration of the identifier tokens</param>
            <param name="options">Identifier options</param>
            <returns>True if an identifier is parsed</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIdentifierExtensions.RequireCppIdentifier(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtCppIdentifierOptions)">
            <summary>
            Parse a required cpp identifier
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="options">Parsing options</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIdentifierExtensions.RequireCppIdentifier(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtToken@,EpicGames.UHT.Tokenizer.UhtCppIdentifierOptions)">
            <summary>
            Parse a required cpp identifier
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="initialIdentifier">Initial token of the identifier</param>
            <param name="options">Parsing options</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIdentifierExtensions.RequireCppIdentifier(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtTokenListDelegate)">
            <summary>
            Parse a required cpp identifier
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="tokenListDelegate">Invoked when identifier is parsed</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIdentifierExtensions.RequireCppIdentifier(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtCppIdentifierOptions,EpicGames.UHT.Tokenizer.UhtTokenListDelegate)">
            <summary>
            Parse a required cpp identifier
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="options">Parsing options</param>
            <param name="tokenListDelegate">Invoked when identifier is parsed</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIdentifierExtensions.RequireCppIdentifier(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtToken@,EpicGames.UHT.Tokenizer.UhtTokenListDelegate)">
            <summary>
            Parse a required cpp identifier
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="initialIdentifier">Initial token of the identifier</param>
            <param name="tokenListDelegate">Invoked when identifier is parsed</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIdentifierExtensions.RequireCppIdentifier(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtToken@,EpicGames.UHT.Tokenizer.UhtCppIdentifierOptions,EpicGames.UHT.Tokenizer.UhtTokenListDelegate)">
            <summary>
            Parse a required cpp identifier
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="initialIdentifier">Initial token of the identifier</param>
            <param name="options">Parsing options</param>
            <param name="tokenListDelegate">Invoked when identifier is parsed</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIdentifierExtensions.GetCppIdentifier(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtCppIdentifierOptions)">
            <summary>
            Get a required cpp identifier
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="options">Parsing options</param>
            <returns>Token list</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIdentifierExtensions.GetCppIdentifier(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtToken@,EpicGames.UHT.Tokenizer.UhtCppIdentifierOptions)">
            <summary>
            Get a required cpp identifier
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="initialIdentifier">Initial token of the identifier</param>
            <param name="options">Parsing options</param>
            <returns>Token list</returns>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtParseMergedSignToken">
            <summary>
            Notification of signed token being parsed
            </summary>
            <param name="token">Token in question</param>
            <returns>True if the token value is acceptable</returns>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokenReaderIntegerExtensions">
            <summary>
            Collection of helper methods to parse integers
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIntegerExtensions.TryOptionalConstInt(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Int32@)">
            <summary>
            Get the next token as an integer.  If the next token is not an integer, no token is consumed.
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="value">The integer value of the token</param>
            <returns>True if the next token was an integer, false if not.</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIntegerExtensions.OptionalConstInt(EpicGames.UHT.Tokenizer.IUhtTokenReader)">
            <summary>
            Get the next token as an integer.  If the next token is not an integer, an exception is thrown
            </summary>
            <param name="tokenReader">Token reader</param>
            <returns>The value of the constant</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIntegerExtensions.RequireConstInt(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Object)">
            <summary>
            Get the next token as an integer.  If the next token is not an integer, an exception is thrown
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="exceptionContext">If not null, an exception will be thrown with the given text as part of the message.</param>
            <returns>The value of the constant</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIntegerExtensions.GetConstInt(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Object)">
            <summary>
            Get the next token as an integer.  If the next token is not an integer, an exception is thrown
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="exceptionContext">If not null, an exception will be thrown with the given text as part of the message.</param>
            <returns>The value of the constant</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIntegerExtensions.TryOptionalConstLong(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Int64@)">
            <summary>
            Get the next token as an integer.  If the next token is not an integer, no token is consumed.
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="value">The integer value of the token</param>
            <returns>True if the next token was an integer, false if not.</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIntegerExtensions.OptionalConstLong(EpicGames.UHT.Tokenizer.IUhtTokenReader)">
            <summary>
            Get the next token as an integer.  If the next token is not an integer, an exception is thrown
            </summary>
            <param name="tokenReader">Token reader</param>
            <returns>The value of the constant</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIntegerExtensions.RequireConstLong(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Object)">
            <summary>
            Get the next token as an integer.  If the next token is not an integer, an exception is thrown
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="exceptionContext">If not null, an exception will be thrown with the given text as part of the message.</param>
            <returns>The value of the constant</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIntegerExtensions.GetConstLong(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Object)">
            <summary>
            Get the next token as an integer.  If the next token is not an integer, an exception is thrown
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="exceptionContext">If not null, an exception will be thrown with the given text as part of the message.</param>
            <returns>The value of the constant</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIntegerExtensions.TryOptionalLeadingSignConstNumeric(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtParseMergedSignToken)">
            <summary>
            Helper method to combine any leading sign with the next numeric token
            </summary>
            <param name="tokenReader">Source tokens</param>
            <param name="tokenDelegate">Delegate to invoke with the merged value</param>
            <returns>True if the next token was an parsed, false if not.</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIntegerExtensions.TryOptionalConstIntExpression(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Int32@)">
            <summary>
            Get the next integer.  It also handled [+/-] token followed by an integer.
            </summary>
            <param name="tokenReader">Source tokens</param>
            <param name="value">The integer value of the token</param>
            <returns>True if the next token was an integer, false if not.</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIntegerExtensions.GetConstIntExpression(EpicGames.UHT.Tokenizer.IUhtTokenReader)">
            <summary>
            Get the next integer.  It also handled [+/-] token followed by an integer.
            </summary>
            <param name="tokenReader">Source tokens</param>
            <returns>The integer value</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIntegerExtensions.TryOptionalConstLongExpression(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Int64@)">
            <summary>
            Get the next integer.  It also handled [+/-] token followed by an integer.
            </summary>
            <param name="tokenReader">Source tokens</param>
            <param name="value">The integer value of the token</param>
            <returns>True if the next token was an integer, false if not.</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderIntegerExtensions.GetConstLongExpression(EpicGames.UHT.Tokenizer.IUhtTokenReader)">
            <summary>
            Get the next long.  It also handled [+/-] token followed by an long.
            </summary>
            <param name="tokenReader">Source tokens</param>
            <returns>The long value</returns>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokenReaderSkipExtensions">
            <summary>
            Series of extensions to token reading that are far too specialized to be included in the reader.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderSkipExtensions.SkipOne(EpicGames.UHT.Tokenizer.IUhtTokenReader)">
            <summary>
            Skip a token regardless of the type.
            </summary>
            <param name="tokenReader">Token reader</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderSkipExtensions.SkipAlignasIfNecessary(EpicGames.UHT.Tokenizer.IUhtTokenReader)">
            <summary>
            Skip an alignas expression
            </summary>
            <param name="tokenReader">Token reader</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderSkipExtensions.SkipDeprecatedMacroIfNecessary(EpicGames.UHT.Tokenizer.IUhtTokenReader)">
            <summary>
            Skip deprecation macro
            </summary>
            <param name="tokenReader">Token reader</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderSkipExtensions.SkipAlignasAndDeprecatedMacroIfNecessary(EpicGames.UHT.Tokenizer.IUhtTokenReader)">
            <summary>
            Skip alignas and/or deprecation macros
            </summary>
            <param name="tokenReader">Token reader</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderSkipExtensions.SkipBrackets(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char,System.Char,System.Int32,System.Object)">
            <summary>
            Skip any block of tokens wrapped by the given token symbols
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="initiator">Initiating token (i.e. &quot;(&quot;)</param>
            <param name="terminator">Terminating token (i.e. &quot;)&quot;)</param>
            <param name="initialNesting">If true, start with an initial nesting count of one (assume we already parsed an initiator)</param>
            <param name="exceptionContext">Extra context for any errors</param>
            <returns>Token reader</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtTokenException">Throw if end of file is reached</exception>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderSkipExtensions.SkipUntil(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Char,System.Object)">
            <summary>
            Skip tokens until the given terminator is found.  The terminator will not be consumed.
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="terminator">Terminator to skip until</param>
            <param name="exceptionContext">Extra context for any exceptions</param>
            <returns>Token reader</returns>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokenReaderStringExtensions">
            <summary>
            Collection of token reader exceptions for handling strings
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderStringExtensions.TryOptionalConstString(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.Core.StringView@)">
            <summary>
            Get the next token as a string.  If the next token is not a string, no token is consumed.
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="value">The string value of the token</param>
            <returns>True if the next token was an string, false if not.</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderStringExtensions.OptionalConstString(EpicGames.UHT.Tokenizer.IUhtTokenReader)">
            <summary>
            Get the next token as a string.  If the next token is not a string, no token is consumed.
            </summary>
            <param name="tokenReader">Token reader</param>
            <returns>True if the next token was an string, false if not.</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderStringExtensions.RequireConstString(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Object)">
            <summary>
            Verify that the next token is a string.
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="exceptionContext">If not null, an exception will be thrown with the given text as part of the message.</param>
            <returns>True if the next token was a string, false if not.</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderStringExtensions.GetConstString(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Object)">
            <summary>
            Get the next token as a string.  If the next token is not a string, an exception is thrown
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="exceptionContext">If not null, an exception will be thrown with the given text as part of the message.</param>
            <returns>The value of the string.</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderStringExtensions.GetConstQuotedString(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Object)">
            <summary>
            Get the next token as a quoted string.  If the next token is not a string, an exception is thrown.
            Character constants are not considered strings by this routine.
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="exceptionContext">If not null, an exception will be thrown with the given text as part of the message.</param>
            <returns>The value of the string.</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderStringExtensions.GetWrappedConstString(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Object)">
            <summary>
            Get a const string that can optionally be wrapped with a TEXT() macro
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="exceptionContext">If not null, an exception will be thrown with the given text as part of the message.</param>
            <returns>The value of the string</returns>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokenReaderUtilityExtensions">
            <summary>
            Collection of assorted utility token reader extensions
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderUtilityExtensions.SkipExpectedType(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.Core.StringView,System.Boolean)">
            <summary>
            When processing type, make sure that the next token is the expected token
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="expectedIdentifier">Expected identifier</param>
            <param name="isMember">If true, log an error if the type begins with const</param>
            <returns>true if there could be more header to process, false if the end was reached.</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderUtilityExtensions.TryOptionalAPIMacro(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtToken@)">
            <summary>
            Try to parse an optional _API macro
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="apiMacroToken">_API macro parsed</param>
            <returns>True if an _API macro was parsed</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderUtilityExtensions.OptionalInheritance(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtTokenDelegate)">
            <summary>
            Parse an optional single inheritance
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="superClassDelegate">Invoked with the inherited type name</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderUtilityExtensions.OptionalInheritance(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtTokenDelegate,EpicGames.UHT.Tokenizer.UhtTokenListDelegate)">
            <summary>
            Parse an optional inheritance
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="superClassDelegate">Invoked with the inherited type name</param>
            <param name="baseClassDelegate">Invoked when other base classes are parsed</param>
            <returns>Token reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReaderUtilityExtensions.SkipDeclaration(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtToken@)">
            <summary>
            Given a declaration/statement that starts with the given token, skip the declaration in the header.
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="token">Token that started the process</param>
            <returns>true if there could be more header to process, false if the end was reached.</returns>
        </member>
        <member name="T:EpicGames.UHT.Tokenizer.UhtTokenReplayReader">
            <summary>
            Token reader to replay previously recorded token stream
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.#ctor(EpicGames.UHT.Utils.IUhtMessageSite,System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{EpicGames.UHT.Tokenizer.UhtToken},EpicGames.UHT.Tokenizer.UhtTokenType)">
            <summary>
            Construct new token reader
            </summary>
            <param name="messageSite">Message site for generating errors</param>
            <param name="data">Complete data for the token (i.e. original source)</param>
            <param name="tokens">Tokens to replay</param>
            <param name="endTokenType">Token type to return when end of tokens reached</param>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.#ctor">
            <summary>
            Construct token replay reader intended for caching.  Use Reset method to prepare it for use
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.Reset(EpicGames.UHT.Utils.IUhtMessageSite,System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{EpicGames.UHT.Tokenizer.UhtToken},EpicGames.UHT.Tokenizer.UhtTokenType)">
            <summary>
            Reset a cached replay reader for replaying a new stream of tokens
            </summary>
            <param name="messageSite">Message site for generating errors</param>
            <param name="data">Complete data for the token (i.e. original source)</param>
            <param name="tokens">Tokens to replay</param>
            <param name="endTokenType">Token type to return when end of tokens reached</param>
            <returns>The replay reader</returns>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.GetThreadInstance(EpicGames.UHT.Utils.IUhtMessageSite,System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{EpicGames.UHT.Tokenizer.UhtToken},EpicGames.UHT.Tokenizer.UhtTokenType)">
            <summary>
            Return the replay reader associated with the current thread.  Only one replay reader is cached per thread.
            </summary>
            <param name="messageSite">The message site used to log errors</param>
            <param name="data">Source data where tokens were originally parsed</param>
            <param name="tokens">Collection of tokens to replay</param>
            <param name="endTokenType">Type of end token marker to return when the end of the token list is reached.  This is used to produce errors in the context of the replay</param>
            <returns>The threaded instance of the replay reader</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Thrown if the TLS value can not be retrieved.</exception>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.IsEOF">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.InputPos">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.InputLine">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.TokenPreprocessor">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.LookAheadEnableCount">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.Comments">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.ClearComments">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.ConsumeToken">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.DisableComments">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.EnableComments">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.CommitPendingComments">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.GetLine">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.GetRawString(System.Char,EpicGames.UHT.Tokenizer.UhtRawStringOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.GetStringView(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.GetToken">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.IsFirstTokenInLine(EpicGames.UHT.Tokenizer.UhtToken@)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.PeekToken">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.SkipWhitespaceAndComments">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.SaveState">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.RestoreState">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.AbandonState">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.EnableRecording">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.DisableRecording">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.RecordToken(EpicGames.UHT.Tokenizer.UhtToken@)">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Tokenizer.UhtTokenReplayReader.RecordedTokens">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtArrayProperty">
            <summary>
            Represents the FArrayProperty engine type
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtArrayProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtArrayProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtArrayProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtArrayProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtArrayProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtProperty)">
            <summary>
            Construct a new array property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="value">Inner property value</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtArrayProperty.ResolveSelf(EpicGames.UHT.Types.UhtResolvePhase)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtArrayProperty.CollectReferencesInternal(EpicGames.UHT.Utils.IUhtReferenceCollector,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtArrayProperty.GetForwardDeclarations">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtArrayProperty.EnumerateReferencedTypes">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtArrayProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtArrayProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtArrayProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtArrayProperty.AppendMemberPtr(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtArrayProperty.AppendObjectHashes(System.Text.StringBuilder,System.Int32,EpicGames.UHT.Types.IUhtPropertyMemberContext)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtArrayProperty.AppendNullConstructorArg(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtArrayProperty.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtArrayProperty.ValidateFunctionArgument(EpicGames.UHT.Types.UhtFunction,EpicGames.UHT.Types.UhtValidationOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtArrayProperty.Validate(EpicGames.UHT.Types.UhtStruct,EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.UhtValidationOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtArrayProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtBoolType">
            <summary>
            Type of boolean
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtBoolType.Native">
            <summary>
            Native bool
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtBoolType.UInt8">
            <summary>
            Used for all bitmask uint booleans
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtBoolType.UInt16">
            <summary>
            Currently unused
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtBoolType.UInt32">
            <summary>
            Currently unused
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtBoolType.UInt64">
            <summary>
            Currently unused
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtBoolProperty">
            <summary>
            Represents the FBoolProperty engine type
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtBoolProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtBoolProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtBoolProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtBoolProperty.IsNativeBool">
            <summary>
            If true, the boolean is a native bool and not a UBOOL
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtBoolProperty.BoolType">
            <summary>
            Type of the boolean
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtBoolProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtBoolType)">
            <summary>
            Construct a new boolean property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="boolType">Type of the boolean</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtBoolProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtBoolProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtBoolProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtBoolProperty.AppendFullDecl(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtBoolProperty.AppendNullConstructorArg(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtBoolProperty.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtBoolProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtByteProperty">
            <summary>
            FByteProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtByteProperty.Enum">
            <summary>
            Referenced enumeration (TEnumAsByte)
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtByteProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtByteProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtByteProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtByteProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtByteProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtPropertyIntType,EpicGames.UHT.Types.UhtEnum)">
            <summary>
            Construct a new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="intType">Integer type</param>
            <param name="enumObj">Optional referenced enum</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtByteProperty.EnumerateReferencedTypes">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtByteProperty.CollectReferencesInternal(EpicGames.UHT.Utils.IUhtReferenceCollector,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtByteProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtByteProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtByteProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtByteProperty.AppendObjectHashes(System.Text.StringBuilder,System.Int32,EpicGames.UHT.Types.IUhtPropertyMemberContext)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtByteProperty.AppendFunctionThunkParameterArg(System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtByteProperty.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtByteProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtByteProperty.ValidateFunctionArgument(EpicGames.UHT.Types.UhtFunction,EpicGames.UHT.Types.UhtValidationOptions)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtClassProperty">
            <summary>
            FClassProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClassProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClassProperty.PGetPassAsNoPtr">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClassProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClassProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtClass,EpicGames.UHT.Types.UhtClass,EpicGames.Core.EPropertyFlags)">
            <summary>
            Construct a new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="classObj">Referenced class</param>
            <param name="metaClass">Reference meta class</param>
            <param name="extraFlags">Extra flags to apply to the property.</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClassProperty.GetForwardDeclarations">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClassProperty.AppendSubClassText(System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClassProperty.AppendText(System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClassProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClassProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClassProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtClassPtrProperty">
            <summary>
            FClassPtrProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClassPtrProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClassPtrProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClassPtrProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClassPtrProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClassPtrProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtClass,EpicGames.UHT.Types.UhtClass,EpicGames.Core.EPropertyFlags)">
            <summary>
            Construct a new property
            </summary>
            <param name="propertySettings"></param>
            <param name="classObj">Referenced class</param>
            <param name="metaClass">Meta data class</param>
            <param name="extraFlags">Extra property flags to apply to the property</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClassPtrProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClassPtrProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClassPtrProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClassPtrProperty.Validate(EpicGames.UHT.Types.UhtStruct,EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.UhtValidationOptions)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtContainerBaseProperty">
            <summary>
            Common base class for containers with a value
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtContainerBaseProperty.ValueProperty">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtContainerBaseProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtProperty)">
            <summary>
            Construct a new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="value">Value property</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtContainerBaseProperty.Validate(EpicGames.UHT.Types.UhtStruct,EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.UhtValidationOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtContainerBaseProperty.PropagateFlagsFromInnerAndHandlePersistentInstanceMetadata(EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.UhtMetaData,EpicGames.UHT.Types.UhtProperty)">
            <summary>
            Propagate flags and meta data to/from child properties
            </summary>
            <param name="container">Container property</param>
            <param name="metaData">Meta data</param>
            <param name="inner">Inner property</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtContainerBaseProperty.ResolveAndReturnNewFlags(EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.UhtResolvePhase)">
            <summary>
            Resolve the child and return any new flags
            </summary>
            <param name="child">Child to resolve</param>
            <param name="phase">Resolve phase</param>
            <returns>And new flags</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtContainerBaseProperty.ScanForInstancedReferenced(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtContainerBaseProperty.ContainsEditorOnlyProperties">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtDelegateProperty">
            <summary>
            FDelegatePropertyDelegateProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtDelegateProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtDelegateProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtDelegateProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtDelegateProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtDelegateProperty.Function">
            <summary>
            Referenced function
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtDelegateProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtFunction)">
            <summary>
            Construct new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="function">Referenced function</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtDelegateProperty.ResolveSelf(EpicGames.UHT.Types.UhtResolvePhase)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtDelegateProperty.ScanForInstancedReferenced(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtDelegateProperty.CollectReferencesInternal(EpicGames.UHT.Utils.IUhtReferenceCollector,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtDelegateProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtDelegateProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtDelegateProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtDelegateProperty.AppendFunctionThunkParameterArg(System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtDelegateProperty.AppendObjectHashes(System.Text.StringBuilder,System.Int32,EpicGames.UHT.Types.IUhtPropertyMemberContext)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtDelegateProperty.AppendNullConstructorArg(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtDelegateProperty.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtDelegateProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtDelegateProperty.ValidateFunctionArgument(EpicGames.UHT.Types.UhtFunction,EpicGames.UHT.Types.UhtValidationOptions)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtDoubleProperty">
            <summary>
            FDoubleProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtDoubleProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtDoubleProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtDoubleProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings)">
            <summary>
            Create new property
            </summary>
            <param name="propertySettings">Property settings</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtDoubleProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtDoubleProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtDoubleProperty.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtDoubleProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtEnumProperty">
            <summary>
            FEnumProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtEnumProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtEnumProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtEnumProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtEnumProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtEnumProperty.Enum">
            <summary>
            Referenced enum
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtEnumProperty.UnderlyingProperty">
            <summary>
            Underlying property set when the enum has an underlying interger type
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtEnumProperty.UnderlyingType">
            <summary>
            Underlying type which defaults to int32 if the referenced enum doesn't have an underlying type
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtEnumProperty.UnderlyingTypeSize">
            <summary>
            Underlying type size.  Defaults to unsized if the referenced enum doesn't have an underlying type
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnumProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtEnum)">
            <summary>
            Construct property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="enumObj">Referenced enum</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnumProperty.CollectReferencesInternal(EpicGames.UHT.Utils.IUhtReferenceCollector,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnumProperty.GetForwardDeclarations">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnumProperty.EnumerateReferencedTypes">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnumProperty.AppendEnumText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.UhtEnum,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <summary>
            Append enum text
            </summary>
            <param name="builder">Destination builder</param>
            <param name="property">Property in question</param>
            <param name="enumObj">Referenced enum</param>
            <param name="textType">Type of text to append</param>
            <param name="isTemplateArgument">If true, this property is a template argument</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnumProperty.AppendEnumFunctionThunkParameterArg(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.UhtEnum)">
            <summary>
            Append the text for a function thunk call argument
            </summary>
            <param name="builder">Output builder</param>
            <param name="property">Property in question</param>
            <param name="enumObj">Referenced enum</param>
            <returns>Output builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnumProperty.SanitizeEnumDefaultValue(EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.UhtEnum,EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <summary>
            Sanitize the default value for an enumeration
            </summary>
            <param name="property">Property in question</param>
            <param name="enumObj">Referenced enumeration</param>
            <param name="defaultValueReader">Default value</param>
            <param name="innerDefaultValue">Destination builder</param>
            <returns>True if the default value was parsed.</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnumProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnumProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnumProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnumProperty.AppendMemberPtr(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnumProperty.AppendFunctionThunkParameterArg(System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnumProperty.AppendObjectHashes(System.Text.StringBuilder,System.Int32,EpicGames.UHT.Types.IUhtPropertyMemberContext)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnumProperty.AppendNullConstructorArg(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnumProperty.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnumProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtFieldPathProperty">
            <summary>
            FFieldPathProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFieldPathProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFieldPathProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFieldPathProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFieldPathProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFieldPathProperty.FieldClassName">
            <summary>
            Class name without the prefix
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFieldPathProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,System.String)">
            <summary>
            Construct new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="fieldClassName">Field class name</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFieldPathProperty.GetForwardDeclarations">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFieldPathProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFieldPathProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFieldPathProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFieldPathProperty.AppendNullConstructorArg(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFieldPathProperty.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFieldPathProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtFloatProperty">
            <summary>
            FFloatProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFloatProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFloatProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFloatProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings)">
            <summary>
            Construct a new property
            </summary>
            <param name="propertySettings">Property settings</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFloatProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFloatProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFloatProperty.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFloatProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtInt16Property">
            <summary>
            FInt16Property
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtInt16Property.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtInt16Property.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInt16Property.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtPropertyIntType)">
            <summary>
            Construct new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="intType">Integer type</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInt16Property.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInt16Property.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInt16Property.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInt16Property.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtInt64Property">
            <summary>
            FInt64Property
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtInt64Property.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtInt64Property.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInt64Property.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtPropertyIntType)">
            <summary>
            Construct new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="intType">Integer type</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInt64Property.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInt64Property.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInt64Property.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInt64Property.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtInt8Property">
            <summary>
            FInt8Property
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtInt8Property.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtInt8Property.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInt8Property.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtPropertyIntType)">
            <summary>
            Construct a new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="intType">Integer type</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInt8Property.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInt8Property.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInt8Property.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInt8Property.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtInterfaceProperty">
            <summary>
            FInterfaceProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtInterfaceProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtInterfaceProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtInterfaceProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtInterfaceProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtInterfaceProperty.InterfaceClass">
            <summary>
            Referenced interface class
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInterfaceProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtClass)">
            <summary>
            Create a new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="interfaceClass">Referenced interface</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInterfaceProperty.ResolveSelf(EpicGames.UHT.Types.UhtResolvePhase)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInterfaceProperty.ScanForInstancedReferenced(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInterfaceProperty.CollectReferencesInternal(EpicGames.UHT.Utils.IUhtReferenceCollector,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInterfaceProperty.GetForwardDeclarations">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInterfaceProperty.EnumerateReferencedTypes">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInterfaceProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInterfaceProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInterfaceProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInterfaceProperty.AppendNullConstructorArg(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInterfaceProperty.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInterfaceProperty.ValidateMember(EpicGames.UHT.Types.UhtStruct,EpicGames.UHT.Types.UhtValidationOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInterfaceProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtInterfaceProperty.MustBeConstArgument(EpicGames.UHT.Types.UhtType@)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtIntProperty">
            <summary>
            FIntProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtIntProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtIntProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtIntProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtPropertyIntType)">
            <summary>
            Construct new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="intType">Integer type</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtIntProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtIntProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtIntProperty.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtIntProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtLargeWorldCoordinatesRealProperty">
            <summary>
            FLargeWorldCoordinatesRealProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtLargeWorldCoordinatesRealProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtLargeWorldCoordinatesRealProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtLargeWorldCoordinatesRealProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings)">
            <summary>
            Construct new property
            </summary>
            <param name="propertySettings">Property settings</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtLargeWorldCoordinatesRealProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtLargeWorldCoordinatesRealProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtLargeWorldCoordinatesRealProperty.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtLargeWorldCoordinatesRealProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtLazyObjectPtrProperty">
            <summary>
            FLazyObjectProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtLazyObjectPtrProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtLazyObjectPtrProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtLazyObjectPtrProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtLazyObjectPtrProperty.PGetPassAsNoPtr">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtLazyObjectPtrProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtLazyObjectPtrProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtClass)">
            <summary>
            Construct new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="classObj">Referenced class</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtLazyObjectPtrProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtLazyObjectPtrProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtLazyObjectPtrProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtLazyObjectPtrProperty.AppendNullConstructorArg(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtLazyObjectPtrProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtLazyObjectPtrProperty.Validate(EpicGames.UHT.Types.UhtStruct,EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.UhtValidationOptions)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtMapProperty">
            <summary>
            FMapProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtMapProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtMapProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtMapProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtMapProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtMapProperty.KeyProperty">
            <summary>
            Key property
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMapProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.UhtProperty)">
            <summary>
            Construct new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="key">Key property</param>
            <param name="value">Value property</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMapProperty.ResolveSelf(EpicGames.UHT.Types.UhtResolvePhase)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMapProperty.CollectReferencesInternal(EpicGames.UHT.Utils.IUhtReferenceCollector,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMapProperty.GetForwardDeclarations">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMapProperty.EnumerateReferencedTypes">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMapProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMapProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMapProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMapProperty.AppendMemberPtr(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMapProperty.AppendObjectHashes(System.Text.StringBuilder,System.Int32,EpicGames.UHT.Types.IUhtPropertyMemberContext)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMapProperty.AppendNullConstructorArg(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMapProperty.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMapProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMapProperty.ValidateDeprecated">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMapProperty.Validate(EpicGames.UHT.Types.UhtStruct,EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.UhtValidationOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMapProperty.ValidateStructPropertyOkForNet(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMapProperty.ValidateFunctionArgument(EpicGames.UHT.Types.UhtFunction,EpicGames.UHT.Types.UhtValidationOptions)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtMulticastDelegateProperty">
            <summary>
            FMulticastDelegateProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtMulticastDelegateProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtMulticastDelegateProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtMulticastDelegateProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtMulticastDelegateProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtMulticastDelegateProperty.Function">
            <summary>
            Referenced function
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMulticastDelegateProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtFunction)">
            <summary>
            Construct property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="function">Referenced function</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMulticastDelegateProperty.ResolveSelf(EpicGames.UHT.Types.UhtResolvePhase)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMulticastDelegateProperty.ScanForInstancedReferenced(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMulticastDelegateProperty.CollectReferencesInternal(EpicGames.UHT.Utils.IUhtReferenceCollector,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMulticastDelegateProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMulticastDelegateProperty.AppendObjectHashes(System.Text.StringBuilder,System.Int32,EpicGames.UHT.Types.IUhtPropertyMemberContext)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMulticastDelegateProperty.AppendFunctionThunkParameterArg(System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMulticastDelegateProperty.AppendNullConstructorArg(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMulticastDelegateProperty.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMulticastDelegateProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtMulticastInlineDelegateProperty">
            <summary>
            FMulticastInlineDelegateProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtMulticastInlineDelegateProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMulticastInlineDelegateProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtFunction)">
            <summary>
            Construct new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="function">Referenced function</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMulticastInlineDelegateProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMulticastInlineDelegateProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMulticastInlineDelegateProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtMulticastSparseDelegateProperty">
            <summary>
            FMulticastSparseDelegateProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtMulticastSparseDelegateProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMulticastSparseDelegateProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtFunction)">
            <summary>
            Construct a new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="function">Referenced function</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMulticastSparseDelegateProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMulticastSparseDelegateProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMulticastSparseDelegateProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtNameProperty">
            <summary>
            FNameProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtNameProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtNameProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtNameProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtNameProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtNameProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings)">
            <summary>
            Construct a new property
            </summary>
            <param name="propertySettings">Property settings</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtNameProperty.AppendNullConstructorArg(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtNameProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtNameProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtNameProperty.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtNameProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtNumericProperty">
            <summary>
            Base class for all numeric properties
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtNumericProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtNumericProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtNumericProperty.IntType">
            <summary>
            Describes the integer as either being sized on unsized
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtNumericProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtPropertyIntType)">
            <summary>
            Construct new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="intType">Type of integer</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtNumericProperty.AppendNullConstructorArg(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtObjectProperty">
            <summary>
            FObjectProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtObjectProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtObjectProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtClass,EpicGames.UHT.Types.UhtClass,EpicGames.Core.EPropertyFlags)">
            <summary>
            Construct a new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="classObj">Referenced class</param>
            <param name="metaClass">Optional reference class (used by class properties)</param>
            <param name="extraFlags">Extra flags to add to the property</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectProperty.ResolveSelf(EpicGames.UHT.Types.UhtResolvePhase)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectProperty.ScanForInstancedReferenced(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectProperty.AppendNullConstructorArg(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtObjectPropertyBase">
            <summary>
            FObjectPropertyBase
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtObjectPropertyBase.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtObjectPropertyBase.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtObjectPropertyBase.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtObjectPropertyBase.Class">
            <summary>
            Referenced UCLASS
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtObjectPropertyBase.MetaClass">
            <summary>
            Referenced UCLASS for class properties
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectPropertyBase.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtClass,EpicGames.UHT.Types.UhtClass)">
            <summary>
            Construct a property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="classObj">Referenced UCLASS</param>
            <param name="metaClass">Referenced UCLASS used by class properties</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectPropertyBase.ResolveSelf(EpicGames.UHT.Types.UhtResolvePhase)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectPropertyBase.ScanForInstancedReferenced(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectPropertyBase.CollectReferencesInternal(EpicGames.UHT.Utils.IUhtReferenceCollector,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectPropertyBase.GetForwardDeclarations">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectPropertyBase.EnumerateReferencedTypes">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectPropertyBase.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectPropertyBase.ValidateDeprecated">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectPropertyBase.MustBeConstArgument(EpicGames.UHT.Types.UhtType@)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectPropertyBase.ParseTemplateObject(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtToken,System.Boolean)">
            <summary>
            Parse a template type
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="tokenReader">Token reader</param>
            <param name="matchedToken">Token matched for type</param>
            <param name="returnUInterface">If true, return the UInterface instead of the type listed</param>
            <returns>Referenced class</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectPropertyBase.ParseTemplateClass(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtToken)">
            <summary>
            Parse a template type
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="tokenReader">Token reader</param>
            <param name="matchedToken">Token matched for type</param>
            <returns>Referenced class</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectPropertyBase.ConditionalLogPointerUsage(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Utils.UhtPointerMemberBehavior,EpicGames.UHT.Utils.UhtPointerMemberBehavior,EpicGames.UHT.Utils.UhtPointerMemberBehavior,System.String,EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Int32,System.String)">
            <summary>
            Log point usage warning/error
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="engineBehavior">Expected behavior for engine types</param>
            <param name="enginePluginBehavior">Expected behavior for engine plugin types</param>
            <param name="nonEngineBehavior">Expected behavior for non-engine types</param>
            <param name="pointerTypeDesc">Description of the pointer type</param>
            <param name="tokenReader">Token reader for type being parsed</param>
            <param name="typeStartPos">Starting character position of the type</param>
            <param name="alternativeTypeDesc">Suggested alternate declaration</param>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Thrown if the behavior type is unexpected</exception>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtObjectPtrProperty">
            <summary>
            FObjectPtrProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtObjectPtrProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtObjectPtrProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtObjectPtrProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtObjectPtrProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectPtrProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtClass,EpicGames.Core.EPropertyFlags)">
            <summary>
            Construct a new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="classObj">Referenced class</param>
            <param name="extraFlags">Extra property flags to apply</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectPtrProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectPtrProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectPtrProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObjectPtrProperty.Validate(EpicGames.UHT.Types.UhtStruct,EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.UhtValidationOptions)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtSetProperty">
            <summary>
            FSetProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSetProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSetProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSetProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSetProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSetProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtProperty)">
            <summary>
            Construct a new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="value">Property key</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSetProperty.ResolveSelf(EpicGames.UHT.Types.UhtResolvePhase)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSetProperty.CollectReferencesInternal(EpicGames.UHT.Utils.IUhtReferenceCollector,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSetProperty.GetForwardDeclarations">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSetProperty.EnumerateReferencedTypes">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSetProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSetProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSetProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSetProperty.AppendMemberPtr(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSetProperty.AppendObjectHashes(System.Text.StringBuilder,System.Int32,EpicGames.UHT.Types.IUhtPropertyMemberContext)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSetProperty.AppendNullConstructorArg(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSetProperty.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSetProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSetProperty.ValidateStructPropertyOkForNet(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSetProperty.ValidateFunctionArgument(EpicGames.UHT.Types.UhtFunction,EpicGames.UHT.Types.UhtValidationOptions)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtSoftClassProperty">
            <summary>
            FSoftClassProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSoftClassProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSoftClassProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSoftClassProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSoftClassProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSoftClassProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtClass,EpicGames.UHT.Types.UhtClass)">
            <summary>
            Construct a new class property
            </summary>
            <param name="propertySettings">Property setting</param>
            <param name="classObj">Referenced class (Always UClass)</param>
            <param name="metaClass">Referenced meta class</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSoftClassProperty.GetForwardDeclarations">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSoftClassProperty.CollectReferencesInternal(EpicGames.UHT.Utils.IUhtReferenceCollector,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSoftClassProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSoftClassProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSoftClassProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtSoftObjectProperty">
            <summary>
            FSoftObjectProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSoftObjectProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSoftObjectProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSoftObjectProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSoftObjectProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSoftObjectProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtClass,EpicGames.UHT.Types.UhtClass)">
            <summary>
            Construct a new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="classObj">UCLASS being referenced</param>
            <param name="metaClass">Optional meta class (used by SoftClassProperty)</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSoftObjectProperty.AppendNullConstructorArg(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSoftObjectProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSoftObjectProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSoftObjectProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSoftObjectProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtStrProperty">
            <summary>
            FStrProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtStrProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtStrProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtStrProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtStrProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStrProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings)">
            <summary>
            Construct a new property
            </summary>
            <param name="propertySettings">Property settings</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStrProperty.AppendNullConstructorArg(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStrProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStrProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStrProperty.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStrProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStrProperty.ValidateFunctionArgument(EpicGames.UHT.Types.UhtFunction,EpicGames.UHT.Types.UhtValidationOptions)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtStructProperty">
            <summary>
            FStructProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtStructProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtStructProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtStructProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtStructProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtStructProperty.ScriptStruct">
            <summary>
            USTRUCT referenced by the property
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStructProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtScriptStruct)">
            <summary>
            Construct property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="scriptStruct">USTRUCT being referenced</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStructProperty.ResolveSelf(EpicGames.UHT.Types.UhtResolvePhase)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStructProperty.ScanForInstancedReferenced(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStructProperty.CollectReferencesInternal(EpicGames.UHT.Utils.IUhtReferenceCollector,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStructProperty.GetForwardDeclarations">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStructProperty.EnumerateReferencedTypes">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStructProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStructProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStructProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStructProperty.AppendObjectHashes(System.Text.StringBuilder,System.Int32,EpicGames.UHT.Types.IUhtPropertyMemberContext)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStructProperty.AppendNullConstructorArg(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStructProperty.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStructProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStructProperty.ValidateFunctionArgument(EpicGames.UHT.Types.UhtFunction,EpicGames.UHT.Types.UhtValidationOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStructProperty.ValidateMember(EpicGames.UHT.Types.UhtStruct,EpicGames.UHT.Types.UhtValidationOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStructProperty.ValidateStructPropertyOkForNet(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStructProperty.ContainsEditorOnlyProperties">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtTextProperty">
            <summary>
            FTextProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtTextProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtTextProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtTextProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtTextProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtTextProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings)">
            <summary>
            Construct a new property
            </summary>
            <param name="propertySettings">Property settings</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtTextProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtTextProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtTextProperty.AppendNullConstructorArg(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtTextProperty.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtTextProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtUInt16Property">
            <summary>
            FUInt16Property
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtUInt16Property.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtUInt16Property.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtUInt16Property.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtPropertyIntType)">
            <summary>
            Construct a new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="intType">Integer type</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtUInt16Property.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtUInt16Property.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtUInt16Property.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtUInt16Property.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtUInt32Property">
            <summary>
            FUInt32Property
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtUInt32Property.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtUInt32Property.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtUInt32Property.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtPropertyIntType)">
            <summary>
            Construct a new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="intType">Integer type</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtUInt32Property.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtUInt32Property.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtUInt32Property.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtUInt32Property.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtUInt64Property">
            <summary>
            FUInt64Property
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtUInt64Property.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtUInt64Property.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtUInt64Property.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtPropertyIntType)">
            <summary>
            Construct a new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="intType">Integer type</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtUInt64Property.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtUInt64Property.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtUInt64Property.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtUInt64Property.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtVoidProperty">
            <summary>
            Internal only void property for void return types
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtVoidProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtVoidProperty.CppTypeText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtVoidProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtVoidProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings)">
            <summary>
            Construct a new void property
            </summary>
            <param name="propertySettings">Property settings</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtVoidProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtVoidProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtVoidProperty.AppendFunctionThunkParameterGet(System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtVoidProperty.AppendNullConstructorArg(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtVoidProperty.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtVoidProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtWeakObjectPtrProperty">
            <summary>
            Represents a FWeakObjectProperty
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtWeakObjectPtrProperty.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtWeakObjectPtrProperty.PGetMacroText">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtWeakObjectPtrProperty.PGetPassAsNoPtr">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtWeakObjectPtrProperty.PGetTypeArgument">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtWeakObjectPtrProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings,EpicGames.UHT.Types.UhtClass,EpicGames.Core.EPropertyFlags)">
            <summary>
            Construct a new property
            </summary>
            <param name="propertySettings">Property settings</param>
            <param name="propertyClass">Class being referenced</param>
            <param name="extraFlags">Extra property flags to add to the definition</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtWeakObjectPtrProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtWeakObjectPtrProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtWeakObjectPtrProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtWeakObjectPtrProperty.AppendNullConstructorArg(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtWeakObjectPtrProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtClassExportFlags">
            <summary>
            Series of flags not part of the engine's class flags that affect code generation or verification
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtClassExportFlags.None">
            <summary>
            No export flags
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtClassExportFlags.SelfHasReplicatedProperties">
            <summary>
            If set, the class itself has replicated properties.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtClassExportFlags.SuperHasReplicatedProperties">
            <summary>
            If set, some super class has replicated properties.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtClassExportFlags.HasReplciatedProperties">
            <summary>
            If set, either the class itself or a super class has replicated properties
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtClassExportFlags.HasCustomConstructor">
            <summary>
            Custom constructor specifier present
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtClassExportFlags.HasDefaultConstructor">
            <summary>
            A default constructor was found in the class
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtClassExportFlags.HasObjectInitializerConstructor">
            <summary>
            An object initializer constructor was found in the class
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtClassExportFlags.HasCustomVTableHelperConstructor">
            <summary>
            A custom vtable helper constructor was found
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtClassExportFlags.HasConstructor">
            <summary>
            A constructor was found
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtClassExportFlags.HasGetLifetimeReplicatedProps">
            <summary>
            GetLifetimeReplicatedProps was found in the class
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtClassExportFlags.NoExport">
            <summary>
            Class should not be exported
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtClassExportFlags.HasCustomFieldNotify">
            <summary>
            Class has a custom field notify
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtClassExportFlags.HasFieldNotify">
            <summary>
            Class has a field notify
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtClassExportFlags.HasDestructor">
            <summary>
            Class has destructor
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtClassExportFlagsExtensions">
            <summary>
            Helper methods for testing flags.  These methods perform better than the generic HasFlag which hits
            the GC and stalls.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClassExportFlagsExtensions.HasAnyFlags(EpicGames.UHT.Types.UhtClassExportFlags,EpicGames.UHT.Types.UhtClassExportFlags)">
            <summary>
            Test to see if any of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if any of the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClassExportFlagsExtensions.HasAllFlags(EpicGames.UHT.Types.UhtClassExportFlags,EpicGames.UHT.Types.UhtClassExportFlags)">
            <summary>
            Test to see if all of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if all the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClassExportFlagsExtensions.HasExactFlags(EpicGames.UHT.Types.UhtClassExportFlags,EpicGames.UHT.Types.UhtClassExportFlags,EpicGames.UHT.Types.UhtClassExportFlags)">
            <summary>
            Test to see if a specific set of flags have a specific value.
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <param name="matchFlags">Expected value of the tested flags</param>
            <returns>True if the given flags have a specific value.</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtClassType">
            <summary>
            Type of the class
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtClassType.Class">
            <summary>
            Class is a UCLASS
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtClassType.Interface">
            <summary>
            Class is a UINTERFACE
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtClassType.NativeInterface">
            <summary>
            Class is the native interface for a UINTERFACE
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtSerializerArchiveType">
            <summary>
            Type of archive serializer found
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtSerializerArchiveType.None">
            <summary>
            No serializer found
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtSerializerArchiveType.Archive">
            <summary>
            Archive serializer found
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtSerializerArchiveType.StructuredArchiveRecord">
            <summary>
            Structured archive serializer found
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtSerializerArchiveType.All">
            <summary>
            Mask of all serializer types
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtSerializerArchiveTypeExtensions">
            <summary>
            Helper methods for testing flags.  These methods perform better than the generic HasFlag which hits
            the GC and stalls.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSerializerArchiveTypeExtensions.HasAnyFlags(EpicGames.UHT.Types.UhtSerializerArchiveType,EpicGames.UHT.Types.UhtSerializerArchiveType)">
            <summary>
            Test to see if any of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if any of the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSerializerArchiveTypeExtensions.HasAllFlags(EpicGames.UHT.Types.UhtSerializerArchiveType,EpicGames.UHT.Types.UhtSerializerArchiveType)">
            <summary>
            Test to see if all of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if all the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSerializerArchiveTypeExtensions.HasExactFlags(EpicGames.UHT.Types.UhtSerializerArchiveType,EpicGames.UHT.Types.UhtSerializerArchiveType,EpicGames.UHT.Types.UhtSerializerArchiveType)">
            <summary>
            Test to see if a specific set of flags have a specific value.
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <param name="matchFlags">Expected value of the tested flags</param>
            <returns>True if the given flags have a specific value.</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtDeclaration">
            <summary>
            A skipped declaration
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtDeclaration.CompilerDirectives">
            <summary>
            Compiler directives when declaration was parsed
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtDeclaration.Tokens">
            <summary>
            Collection of tokens parsed in the declaration
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtDeclaration.Function">
            <summary>
            If this declaration is part of a UFUNCTION, this will be set
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtFoundDeclaration">
            <summary>
            Represents a declaration found by name
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFoundDeclaration.CompilerDirectives">
            <summary>
            Compiler directives when declaration was parsed
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFoundDeclaration.Tokens">
            <summary>
            Collection of tokens parsed in the declaration
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFoundDeclaration.NameTokenIndex">
            <summary>
            Token index for the matching name
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFoundDeclaration.IsVirtual">
            <summary>
            True if "virtual" was found prior to the matching name
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtClass">
            <summary>
            Instance of a UCLASS, UINTERFACE, or a native interface
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.Config">
            <summary>
            Configuration section
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.EnclosingDefine">
            <summary>
            If needed, the #if block define for the serializer
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.ClassWithin">
            <summary>
            The class within
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.ClassFlags">
            <summary>
            Class flags
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.ClassCastFlags">
            <summary>
            Class cast flags
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.ClassExportFlags">
            <summary>
            Export flags not present in the engine
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.ClassType">
            <summary>
            Type of the class
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.SerializerArchiveType">
            <summary>
            Type of archivers present
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.PrologLineNumber">
            <summary>
            Line number of the prolog
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.Declarations">
            <summary>
            Collection of functions and other declarations found in the class
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.NativeInterface">
            <summary>
            If this, this class is a UINTERFACE and NativeInterface is the associated native interface
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.GeneratedBodyLineNumber">
            <summary>
            Line number o the generated body statement
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.GeneratedBodyAccessSpecifier">
            <summary>
            Access of the generated body
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.HasGeneratedBody">
            <summary>
            True if GENERATED_BODY was used.  If false, GENERATED_UCLASS_BODY was used.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.RemovedClassFlags">
            <summary>
            Engine class flags removed
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.ClassWithinIdentifier">
            <summary>
            Class within identifier
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.ShowCategories">
            <summary>
            Collection of show categories
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.HideCategories">
            <summary>
            Collection of hide categories
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.AutoExpandCategories">
            <summary>
            Collection of auto expand categories
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.AutoCollapseCategories">
            <summary>
            Collection of auto collapse categories
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.PrioritizeCategories">
            <summary>
            Collection of prioritize categories
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.ShowFunctions">
            <summary>
            Collection of show functions
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.HideFunctions">
            <summary>
            Collection of hide functions
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.SparseClassDataTypes">
            <summary>
            Sparse class data types
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.ClassGroupNames">
            <summary>
            Class group names
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClass.AddClassFlags(EpicGames.Core.EClassFlags)">
            <summary>
            Add the given class flags
            </summary>
            <param name="flags">Flags to add</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClass.RemoveClassFlags(EpicGames.Core.EClassFlags)">
            <summary>
            Remove the given class flags
            </summary>
            <param name="flags">Flags to remove</param>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.EngineType">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.Deprecated">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.SpecifierValidatorTable">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.SuperClass">
            <summary>
            The super class
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClass.#ctor(EpicGames.UHT.Types.UhtType,System.Int32)">
            <summary>
            Construct a new instance of the class
            </summary>
            <param name="outer">The outer type</param>
            <param name="lineNumber">Line number where class begins</param>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.IsActorClass">
            <summary>
            True if this class inherits from AActor
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtClass.EngineNamePrefix">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClass.AddDeclaration(EpicGames.UHT.Parsers.UhtCompilerDirective,System.Collections.Generic.List{EpicGames.UHT.Tokenizer.UhtToken},EpicGames.UHT.Types.UhtFunction)">
            <summary>
            Add the given list of tokens as a possible declaration
            </summary>
            <param name="compilerDirectives">Currently active compiler directives</param>
            <param name="tokens">List of declaration tokens</param>
            <param name="function">If parsed as part of a UFUNCTION, this will reference it</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClass.TryGetDeclaration(System.String,EpicGames.UHT.Types.UhtFoundDeclaration@)">
            <summary>
            Search the declarations for a possible declaration match with the given name
            </summary>
            <param name="name">Name to be located</param>
            <param name="foundDeclaration">Information about the matched declaration</param>
            <returns>True if a declaration was found with the name.</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClass.HierarchyHasAnyClassFlags(EpicGames.Core.EClassFlags)">
            <summary>
            Checks to see if the class or any super class has the given flags.
            </summary>
            <param name="flagsToCheck"></param>
            <returns>True if the flags are found</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClass.ResolveSuper(EpicGames.UHT.Types.UhtResolvePhase)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClass.ResolveSelf(EpicGames.UHT.Types.UhtResolvePhase)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClass.ResolveChildren(EpicGames.UHT.Types.UhtResolvePhase)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClass.ScanForInstancedReferencedInternal(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClass.TryMatchGetterSetter(EpicGames.UHT.Types.UhtProperty,System.Boolean,EpicGames.UHT.Types.UhtDeclaration,System.Int32)">
            <summary>
            Given a token stream, verify that it matches the expected signature for a getter/setter
            </summary>
            <param name="property">Property requesting the setter/getter</param>
            <param name="setter">If true, a setter is expected</param>
            <param name="declaration">The declaration being tested</param>
            <param name="nameIndex">The index of the token with the expected getter/setter name</param>
            <returns>True if the declaration matches</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClass.AddGetterSetter(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{EpicGames.UHT.Types.UhtClass.GetterSetterToResolve}},System.String,EpicGames.UHT.Types.UhtProperty,System.Boolean)">
            <summary>
            Add a requested getter/setter function name
            </summary>
            <param name="gsToResolve">Dictionary containing the lookup by function name.  Will be created if null.</param>
            <param name="name">Name of the getter/setter</param>
            <param name="property">Property requesting the getter/setter</param>
            <param name="setter">True if this is a setter</param>
            <returns>Resulting dictionary</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClass.Validate(EpicGames.UHT.Types.UhtValidationOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClass.CanImplementInBlueprints">
            <summary>
            Interface with blueprint data should declare explicitly Blueprintable or NotBlueprintable to be clear
            In the backward compatible case where they declare neither, both of these bools are false
            </summary>
            <returns>True if the interface is marked as Blueprintable</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClass.CannotImplementInBlueprints">
            <summary>
            Interface with blueprint data should declare explicitly Blueprintable or NotBlueprintable to be clear
            In the backward compatible case where they declare neither, both of these bools are false
            </summary>
            <returns>True if the interface is marked as NotBlueprintable</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClass.CannotImplementInBlueprints(System.Boolean)">
            <summary>
            Interface with blueprint data should declare explicitly Blueprintable or NotBlueprintable to be clear
            In the backward compatible case where they declare neither, both of these bools are false
            </summary>
            <param name="canImplementInBlueprints">If true, class has already been marked as Blueprintable</param>
            <returns>True if the interface is marked as NotBlueprintable</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtClass.CollectReferences(EpicGames.UHT.Utils.IUhtReferenceCollector)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtEnumCppForm">
            <summary>
            How the enumeration was declared
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEnumCppForm.Regular">
            <summary>
            enum Name {...}
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEnumCppForm.Namespaced">
            <summary>
            namespace Name { enum Type { ... } }
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEnumCppForm.EnumClass">
            <summary>
            enum class Name {...}
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtEnumUnderlyingType">
            <summary>
            Underlying type of the enumeration
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEnumUnderlyingType.Unspecified">
            <summary>
            Not specified
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEnumUnderlyingType.uint8">
            <summary>
            uint8
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEnumUnderlyingType.uint16">
            <summary>
            uint16
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEnumUnderlyingType.uint32">
            <summary>
            uint32
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEnumUnderlyingType.uint64">
            <summary>
            uint64
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEnumUnderlyingType.int8">
            <summary>
            int8
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEnumUnderlyingType.int16">
            <summary>
            int16
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEnumUnderlyingType.int32">
            <summary>
            int32
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEnumUnderlyingType.int64">
            <summary>
            int64
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtEnumValue">
            <summary>
            Represents an enumeration value
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtEnumValue.Name">
            <summary>
            Name of the enumeration value
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtEnumValue.Value">
            <summary>
            Value of the enumeration or -1 if not parsed.
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtEnum">
            <summary>
            Represents a UEnum
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtEnum.EnumFlags">
            <summary>
            Engine enumeration flags
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtEnum.CppForm">
            <summary>
            C++ form of the enumeration
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtEnum.UnderlyingType">
            <summary>
            Underlying integer enumeration type
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtEnum.CppType">
            <summary>
            Full enumeration type.  For namespace enumerations, this includes the namespace name and the enum type name
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtEnum.IsEditorOnly">
            <summary>
            True if the enum was declared in an WITH_EDITORONLY_DATA block
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtEnum.EnumValues">
            <summary>
            Collection of enumeration values
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtEnum.EngineType">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtEnum.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtEnum.SpecifierValidatorTable">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnum.#ctor(EpicGames.UHT.Types.UhtType,System.Int32)">
            <summary>
            Construct a new enumeration
            </summary>
            <param name="outer">Outer type</param>
            <param name="lineNumber">Line number of declaration</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnum.IsValidEnumValue(System.Int64)">
            <summary>
            Test to see if the value is a known enum value
            </summary>
            <param name="value">Value in question</param>
            <returns>True if the value is known</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnum.GetIndexByName(System.String)">
            <summary>
            Return the index of the given enumeration value name
            </summary>
            <param name="name">Value name in question</param>
            <returns>Index of the value or -1 if not found.</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnum.GetMetaDataKey(System.String,System.Int32)">
            <summary>
            Converts meta data name and index to a full meta data key name
            </summary>
            <param name="name">Meta data key name</param>
            <param name="nameIndex">Meta data key index</param>
            <returns>Meta data name with the enum value name</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnum.GetFullEnumName(System.String)">
            <summary>
            Given an enumeration value name, return the full enumeration name
            </summary>
            <param name="shortEnumName">Enum value name</param>
            <returns>If required, enum type name combined with value name.  Otherwise just the value name.</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Unexpected enum form</exception>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnum.AddEnumValue(System.String,System.Int64)">
            <summary>
            Add a new enum value.
            </summary>
            <param name="shortEnumName">Name of the enum value.</param>
            <param name="value">Enumeration value or -1 if the value can't be determined.</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnum.CleanEnumValueName(System.String)">
            <summary>
            Reconstruct the full enum name.  Any existing enumeration name will be stripped and replaced 
            with this enumeration name.
            </summary>
            <param name="name">Name to reconstruct.</param>
            <returns>Reconstructed enum name</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnum.ValidateDocumentationPolicy(EpicGames.UHT.Types.UhtDocumentationPolicy)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEnum.CollectReferences(EpicGames.UHT.Utils.IUhtReferenceCollector)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtField">
            <summary>
            Represents a UField
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtField.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtField.#ctor(EpicGames.UHT.Types.UhtType,System.Int32)">
            <summary>
            Construct a new field
            </summary>
            <param name="outer">Outer object</param>
            <param name="lineNumber">Line number of declaration</param>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtFunctionExportFlags">
            <summary>
            Series of flags not part of the engine's function flags that affect code generation or verification
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionExportFlags.None">
            <summary>
            No export flags
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionExportFlags.Final">
            <summary>
            Function declaration included "final" keyword.  Used to differentiate between functions that have FUNC_Final only because they're private
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionExportFlags.RequiredAPI">
            <summary>
            Function should be exported as a public API function
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionExportFlags.Inline">
            <summary>
            Export as an inline static C++ function
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionExportFlags.CppStatic">
            <summary>
            Export as a real C++ static function, causing thunks to call via ClassName::FuncName instead of this->FuncName
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionExportFlags.CustomThunk">
            <summary>
            Export no thunk function; the user will manually define a custom one
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionExportFlags.Virtual">
            <summary>
            Function is marked as virtual
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionExportFlags.Unreliable">
            <summary>
            The unreliable specified was present
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionExportFlags.SealedEvent">
            <summary>
            The function is a sealed event
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionExportFlags.ForceBlueprintImpure">
            <summary>
            Blueprint pure is being forced to false
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionExportFlags.AutoBlueprintPure">
            <summary>
            If set, the BlueprintPure was automatically set
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionExportFlags.ImplFound">
            <summary>
            If set, a method matching the CppImplName was found.  The search is only performed if it
            differs from the function name.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionExportFlags.ImplVirtual">
            <summary>
            If the ImplFound flag is set, then if this flag is set, the method is virtual
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionExportFlags.ValidationImplFound">
            <summary>
            If set, a method matching the CppValidationImplName was found.  The search is only performed if 
            CppImplName differs from the function name
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionExportFlags.ValidationImplVirtual">
            <summary>
            If the ValidationImplFound flag is set, then if this flag is set, the method id virtual.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionExportFlags.DeclaredConst">
            <summary>
            Set true if the function itself is declared const.  The is required for the automatic setting of BlueprintPure.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionExportFlags.AutoFinal">
            <summary>
            Final flag was set automatically and should not be considered for validation
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionExportFlags.FieldNotify">
            <summary>
            Generate the entry for the FieldNotificationClassDescriptor
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionExportFlags.SawPropertyAccessor">
            <summary>
            True if the function specifier has a getter/setter specified
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtFunctionExportFlagsExtensions">
            <summary>
            Helper methods for testing flags.  These methods perform better than the generic HasFlag which hits
            the GC and stalls.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFunctionExportFlagsExtensions.HasAnyFlags(EpicGames.UHT.Types.UhtFunctionExportFlags,EpicGames.UHT.Types.UhtFunctionExportFlags)">
            <summary>
            Test to see if any of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if any of the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFunctionExportFlagsExtensions.HasAllFlags(EpicGames.UHT.Types.UhtFunctionExportFlags,EpicGames.UHT.Types.UhtFunctionExportFlags)">
            <summary>
            Test to see if all of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if all the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFunctionExportFlagsExtensions.HasExactFlags(EpicGames.UHT.Types.UhtFunctionExportFlags,EpicGames.UHT.Types.UhtFunctionExportFlags,EpicGames.UHT.Types.UhtFunctionExportFlags)">
            <summary>
            Test to see if a specific set of flags have a specific value.
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <param name="matchFlags">Expected value of the tested flags</param>
            <returns>True if the given flags have a specific value.</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtFunctionType">
            <summary>
            Type of function
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionType.Function">
            <summary>
            UFUNCTION
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionType.Delegate">
            <summary>
            UDELEGATE/DECLARE_DYNAMIC_...
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunctionType.SparseDelegate">
            <summary>
            UDELEGATE/DECLARE_DYNAMIC_...SPARSE_...
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtFunctionTypeExtensions">
            <summary>
            Extension 
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFunctionTypeExtensions.IsDelegate(EpicGames.UHT.Types.UhtFunctionType)">
            <summary>
            Test to see if the function type is a delegate type
            </summary>
            <param name="functionType">Function type being tested</param>
            <returns>True if the type is a delegate</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtFunction">
            <summary>
            Represents a UFUNCTION/delegate
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFunction.GeneratedDelegateSignatureSuffix">
            <summary>
            Suffix added to delegate engine names 
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.FunctionFlags">
            <summary>
            Engine function flags
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.FunctionExportFlags">
            <summary>
            UHT specific function flags
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.FunctionType">
            <summary>
            The type of function
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.MacroLineNumber">
            <summary>
            The line number for the macro.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.SparseOwningClassName">
            <summary>
            Owning class name for sparse functions
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.SparseDelegateName">
            <summary>
            Sparse delegate name
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.SuperFunction">
            <summary>
            The super function.  Currently unused
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.EngineType">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.StrippedFunctionName">
            <summary>
            Stripped function name without the generated delegate suffix
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.Deprecated">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.SpecifierValidatorTable">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.RPCId">
            <summary>
            Identifier for an RPC call to a platform service
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.RPCResponseId">
            <summary>
            Identifier for an RPC call expecting a response
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.CppImplName">
            <summary>
            Name of the actual implementation
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.CppValidationImplName">
            <summary>
            Name of the actual validation implementation
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.MarshalAndCallName">
            <summary>
            Name of the wrapper function that marshals the arguments and does the indirect call
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.UnMarshalAndCallName">
            <summary>
            Name for callback-style names
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.EndpointName">
            <summary>
            Endpoint name
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.HasReturnProperty">
            <summary>
            True if the function has a return value.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.ReturnProperty">
            <summary>
            The return value property or null if the function doesn't have a return value
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.HasParameters">
            <summary>
            True if the function has parameters.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.ParameterProperties">
            <summary>
            Return read only memory of all the function parameters
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtFunction.HasAnyOutputs">
            <summary>
            True if the function has any outputs including a return value
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFunction.#ctor(EpicGames.UHT.Types.UhtType,System.Int32)">
            <summary>
            Construct a new instance of a function
            </summary>
            <param name="outer">The parent object</param>
            <param name="lineNumber">The line number where the function is defined</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFunction.AddChild(EpicGames.UHT.Types.UhtType)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFunction.ResolveSelf(EpicGames.UHT.Types.UhtResolvePhase)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFunction.Validate(EpicGames.UHT.Types.UhtValidationOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFunction.ValidateDocumentationPolicy(EpicGames.UHT.Types.UhtDocumentationPolicy)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFunction.AddParameterToolTip(EpicGames.Core.StringView,EpicGames.Core.StringView,System.Collections.Generic.Dictionary{EpicGames.Core.StringView,EpicGames.Core.StringView})">
            <summary>
            Add a parameter tooltip to the collection
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="text">Text of the parameter tooltip</param>
            <param name="paramMap">Parameter map to add the tooltip</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFunction.AddParameterToolTip(EpicGames.Core.StringView,System.Collections.Generic.Dictionary{EpicGames.Core.StringView,EpicGames.Core.StringView})">
            <summary>
            Add a parameter tooltip to the collection where the name of the parameter is the first word of the line
            </summary>
            <param name="text">Text of the parameter tooltip</param>
            <param name="paramMap">Parameter map to add the tooltip</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFunction.GetParameterToolTipsFromFunctionComment(EpicGames.Core.StringView)">
            <summary>
            Parse the function comment looking for parameter documentation.
            </summary>
            <param name="input">The function input comment</param>
            <returns>Dictionary of parameter names and the documentation.  The return value will have a name of "ReturnValue"</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFunction.CollectReferences(EpicGames.UHT.Utils.IUhtReferenceCollector)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFunction.GetPropertyParseOptions(System.Boolean)">
            <summary>
            Return the property parse options for the given function
            </summary>
            <param name="returnValue">If true, return property parse options for the return value</param>
            <returns>Property parse options</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException"></exception>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtHeaderFileType">
            <summary>
            Represents the different directories where headers can appear
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtHeaderFileType.Classes">
            <summary>
            Classes folder
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtHeaderFileType.Public">
            <summary>
            Public folder
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtHeaderFileType.Internal">
            <summary>
            Internal folder
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtHeaderFileType.Private">
            <summary>
            Private folder
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtHeaderFileExportFlags">
            <summary>
            Series of flags not part of the engine's class flags that affect code generation or verification
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtHeaderFileExportFlags.None">
            <summary>
            No export flags
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtHeaderFileExportFlags.Referenced">
            <summary>
            This header is being included by another header
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtHeaderFileExportFlagsExtensions">
            <summary>
            Helper methods for testing flags.  These methods perform better than the generic HasFlag which hits
            the GC and stalls.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtHeaderFileExportFlagsExtensions.HasAnyFlags(EpicGames.UHT.Types.UhtHeaderFileExportFlags,EpicGames.UHT.Types.UhtHeaderFileExportFlags)">
            <summary>
            Test to see if any of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if any of the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtHeaderFileExportFlagsExtensions.HasAllFlags(EpicGames.UHT.Types.UhtHeaderFileExportFlags,EpicGames.UHT.Types.UhtHeaderFileExportFlags)">
            <summary>
            Test to see if all of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if all the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtHeaderFileExportFlagsExtensions.HasExactFlags(EpicGames.UHT.Types.UhtHeaderFileExportFlags,EpicGames.UHT.Types.UhtHeaderFileExportFlags,EpicGames.UHT.Types.UhtHeaderFileExportFlags)">
            <summary>
            Test to see if a specific set of flags have a specific value.
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <param name="matchFlags">Expected value of the tested flags</param>
            <returns>True if the given flags have a specific value.</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtHeaderFile">
            <summary>
            Represents a header file.  Unlike the engine, UhtHeader files will appear as a child 
            of a UhtPackage and the outer of all global types found in that header.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtHeaderFile.Data">
            <summary>
            Contents of the header
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtHeaderFile.FilePath">
            <summary>
            Path of the header
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtHeaderFile.FileNameWithoutExtension">
            <summary>
            File name without the extension
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtHeaderFile.GeneratedHeaderFileName">
            <summary>
            Required name for the generated.h file name.  Used to validate parsed code
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtHeaderFile.IsNoExportTypes">
            <summary>
            True if this header is NoExportTypes.h
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtHeaderFile.ModuleRelativeFilePath">
            <summary>
            The file path of the header relative to the module location
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtHeaderFile.IncludeFilePath">
            <summary>
            Include file path added as meta data to the types
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtHeaderFile.HeaderFileType">
            <summary>
            Location where the header file was found
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtHeaderFile.HeaderFileTypeIndex">
            <summary>
            Unique index of the header file
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtHeaderFile.HeaderFileExportFlags">
            <summary>
            UHT flags for the header
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtHeaderFile.ShouldExport">
            <summary>
            If true, the header file should be exported
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtHeaderFile.References">
            <summary>
            Resource collector for the header file
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtHeaderFile.Package">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtHeaderFile.HeaderFile">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtHeaderFile.EngineType">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtHeaderFile.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtHeaderFile.IncludedHeaders">
            <summary>
            Collection of headers directly included by this header
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtHeaderFile.MessageSession">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtHeaderFile.MessageSource">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtHeaderFile.#ctor(EpicGames.UHT.Types.UhtPackage,System.String)">
            <summary>
            Construct a new header file
            </summary>
            <param name="package">Owning package</param>
            <param name="path">Path to the header file</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtHeaderFile.Read">
            <summary>
            Read the contents of the header
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtHeaderFile.AddReferencedHeader(System.String,System.Boolean)">
            <summary>
            Add a reference to the given header
            </summary>
            <param name="id">Path of the header</param>
            <param name="isIncludedFile">True if this is a directly included file</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtHeaderFile.AddReferencedHeader(EpicGames.UHT.Types.UhtType)">
            <summary>
            Add a reference to the header that defines the given type
            </summary>
            <param name="type">Type in question</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtHeaderFile.AddReferencedHeader(EpicGames.UHT.Types.UhtHeaderFile,System.Boolean)">
            <summary>
            Add a reference to the given header file
            </summary>
            <param name="headerFile">Header file in question</param>
            <param name="isIncludedFile">True if this is a directly included file</param>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtHeaderFile.ReferencedHeadersNoLock">
            <summary>
            Return an enumerator without locking.  This method can only be utilized AFTER all header parsing is complete. 
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtHeaderFile.ReferencedHeadersLocked">
            <summary>
            Return an enumerator of all current referenced headers under a lock.  This should be used during parsing.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtHeaderFile.AppendPathName(System.Text.StringBuilder,EpicGames.UHT.Types.UhtType)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtHeaderFile.Validate(EpicGames.UHT.Types.UhtValidationOptions)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtManifestFile">
            <summary>
            Represents the UHT manifest file
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtManifestFile.Manifest">
            <summary>
            Loaded manifest from the json manifest file
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtManifestFile.MessageSession">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtManifestFile.MessageSource">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtManifestFile.MessageLineNumber">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtManifestFile.#ctor(EpicGames.UHT.Utils.UhtSession,System.String)">
            <summary>
            Construct a new manifest file
            </summary>
            <param name="session">Current session</param>
            <param name="filePath">Path of the file</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtManifestFile.Read">
            <summary>
            Read the contents of the file
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.IUhtMetaDataKeyConversion">
            <summary>
            UhtEnum types need to convert a meta data name index to the enum name
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.IUhtMetaDataKeyConversion.GetMetaDataKey(System.String,System.Int32)">
            <summary>
            Convert a name and index into a full meta data name
            </summary>
            <param name="name">Base name of the meta data</param>
            <param name="nameIndex">Index of the meta data.  -1 for the root object.</param>
            <returns>Complete meta data key name</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtMetaDataKey">
            <summary>
            Uniquely identifies a meta data element
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtMetaDataKey.Name">
            <summary>
            The name of the meta data
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtMetaDataKey.Index">
            <summary>
            The index of the meta data name (i.e. enum value index) or -1 for the owning object meta data
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaDataKey.#ctor(System.String,System.Int32)">
            <summary>
            Construct a new meta data key
            </summary>
            <param name="name">Meta data name</param>
            <param name="index">Meta data index</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaDataKey.ToString">
            <summary>
            Convert the key to a string
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtMetaDataKeyComparer">
            <summary>
            Comparer for meta data keys
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaDataKeyComparer.Compare(EpicGames.UHT.Types.UhtMetaDataKey,EpicGames.UHT.Types.UhtMetaDataKey)">
            <summary>
            Compare two keys
            </summary>
            <param name="x">First key</param>
            <param name="y">Second key</param>
            <returns>-1, 0, or 1 depending on the relationship</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaDataKeyComparer.Equals(EpicGames.UHT.Types.UhtMetaDataKey,EpicGames.UHT.Types.UhtMetaDataKey)">
            <summary>
            Test to see if two meta data keys are equal
            </summary>
            <param name="x">First key</param>
            <param name="y">Second key</param>
            <returns>True if the keys match</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaDataKeyComparer.GetHashCode(EpicGames.UHT.Types.UhtMetaDataKey)">
            <summary>
            Get the hash code of the meta data key
            </summary>
            <param name="obj">Key</param>
            <returns>Hash code</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtMetaData">
            <summary>
            Represents a collection of key/value pairs.  Each type has this collection and enumerations also
            have key/value pairs for each enumeration value index.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtMetaData.s_comparer">
            <summary>
            Helper comparer for meta data keys
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtMetaData.Empty">
            <summary>
            Empty collection of meta data
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtMetaData.Parent">
            <summary>
            The meta data of the outer object for the type that owns this meta data
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtMetaData.MessageSite">
            <summary>
            Message site associated with the meta data.  That in combination with the line number is used to generate errors
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtMetaData.Config">
            <summary>
            Configuration object used to redirect meta data
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtMetaData.LineNumber">
            <summary>
            Source code line number where the meta data is declared
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtMetaData.Dictionary">
            <summary>
            Contains the meta data entries.  Due to the small size of these dictionaries, a SortedList performs
            better than a Dictionary.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtMetaData.KeyConversion">
            <summary>
            Enumerations implement this interface so that the index part of the key can be converted to a string
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtMetaData.IndexNone">
            <summary>
            Index for a meta data key associated with the owning object
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.#ctor(EpicGames.UHT.Utils.IUhtMessageSite,EpicGames.UHT.Utils.IUhtConfig)">
            <summary>
            Construct new meta data
            </summary>
            <param name="messageSite">Message site for generating errors</param>
            <param name="config">Configuration for redirects</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.IsEmpty">
            <summary>
            Test to see if the meta data object contains no entries
            </summary>
            <returns>True if the meta data object contains no entries</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.Clear">
            <summary>
            Remove all meta data entries
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.Clone">
            <summary>
            Copy the elements of the meta data
            </summary>
            <returns>A deep copy of the meta data</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.ContainsKey(System.String,System.Int32)">
            <summary>
            Test to see if the meta data contains the given key
            </summary>
            <param name="name">Name of the meta data</param>
            <param name="nameIndex">Enumeration value index or -1 for the type's meta data</param>
            <returns>True if the key is found</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.ContainsKeyHierarchical(System.String,System.Int32)">
            <summary>
            Test to see if the meta data or parent meta data contains the given key
            </summary>
            <param name="name">Name of the meta data</param>
            <param name="nameIndex">Enumeration value index or -1 for the type's meta data</param>
            <returns>True if the key is found</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.TryGetValue(System.String,System.String@)">
            <summary>
            Attempt to get the value associated with the key
            </summary>
            <param name="name">Name of the meta data</param>
            <param name="value">Found value</param>
            <returns>True if the key is found</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.TryGetValueHierarchical(System.String,System.String@)">
            <summary>
            Attempt to get the value associated with the key including parent meta data
            </summary>
            <param name="name">Name of the meta data</param>
            <param name="value">Found value</param>
            <returns>True if the key is found</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.TryGetValue(System.String,System.Int32,System.String@)">
            <summary>
            Attempt to get the value associated with the key
            </summary>
            <param name="name">Name of the meta data</param>
            <param name="nameIndex">Enumeration value index or -1 for the type's meta data</param>
            <param name="value">Found value</param>
            <returns>True if the key is found</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.TryGetValueHierarchical(System.String,System.Int32,System.String@)">
            <summary>
            Attempt to get the value associated with the key including parent meta data
            </summary>
            <param name="name">Name of the meta data</param>
            <param name="nameIndex">Enumeration value index or -1 for the type's meta data</param>
            <param name="value">Found value</param>
            <returns>True if the key is found</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.GetValueOrDefault(System.String,System.Int32)">
            <summary>
            Get the string value of the given meta data key or the default value.
            </summary>
            <param name="name">Name of the meta data key</param>
            <param name="nameIndex">Index of the meta data key</param>
            <returns>Meta data value or empty string if not found.</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.GetValueOrDefaultHierarchical(System.String,System.Int32)">
            <summary>
            Get the string value of the given meta data searching the whole meta data chain.
            </summary>
            <param name="name">Name of the meta data key</param>
            <param name="nameIndex">Index of the meta data key</param>
            <returns>Meta data value or empty string if not found.</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.GetBoolean(System.String,System.Int32)">
            <summary>
            Get the boolean value of the given meta data.
            </summary>
            <param name="name">Name of the meta data key</param>
            <param name="nameIndex">Index of the meta data key</param>
            <returns>Boolean value or false if not found</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.GetBooleanHierarchical(System.String,System.Int32)">
            <summary>
            Get the boolean value of the given meta data searching the whole meta data chain.
            </summary>
            <param name="name">Name of the meta data key</param>
            <param name="nameIndex">Index of the meta data key</param>
            <returns>Boolean value or false if not found</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.GetDouble(System.String,System.Int32)">
            <summary>
            Get the double value of the given meta data.
            </summary>
            <param name="name">Name of the meta data key</param>
            <param name="nameIndex">Index of the meta data key</param>
            <returns>Double value or zero if not found</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.GetStringArray(System.String,System.Int32)">
            <summary>
            Get the string array value of the given meta data.
            </summary>
            <param name="name">Name of the meta data key</param>
            <param name="nameIndex">Index of the meta data key</param>
            <returns>String array or null if not found</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.GetStringArrayHierarchical(System.String,System.Int32)">
            <summary>
            Get the string array value of the given meta data searching the whole meta data chain.
            </summary>
            <param name="name">Name of the meta data key</param>
            <param name="nameIndex">Index of the meta data key</param>
            <returns>String array or null if not found</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.Add(System.String,System.String)">
            <summary>
            Add new meta data
            </summary>
            <param name="name">Name of the meta data key</param>
            <param name="value">Value of the meta data</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.Add(System.String,System.Int32,System.String)">
            <summary>
            Add new meta data
            </summary>
            <param name="name">Name of the meta data key</param>
            <param name="nameIndex">Index of the meta data key</param>
            <param name="value">Value of the meta data</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.Add(System.String,System.Boolean,System.Int32)">
            <summary>
            Add new meta data
            </summary>
            <param name="name">Name of the meta data key</param>
            <param name="value">Value of the meta data</param>
            <param name="nameIndex">Index of the meta data key</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.Add(System.String,System.Collections.Generic.List{System.String},System.Char)">
            <summary>
            Add new meta data
            </summary>
            <param name="name">Name of the meta data key</param>
            <param name="strings">Value of the meta data</param>
            <param name="separator">Separator to use to join the strings</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.AddIfNotEmpty(System.String,System.Collections.Generic.List{System.String},System.Char)">
            <summary>
            Add new meta data if there are strings in the value.
            </summary>
            <param name="name">Name of the meta data key</param>
            <param name="strings">Value of the meta data</param>
            <param name="separator">Separator to use to join the strings</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.Add(EpicGames.UHT.Types.UhtMetaData)">
            <summary>
            Add the meta data from another meta data block
            </summary>
            <param name="metaData"></param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.Remove(System.String,System.Int32)">
            <summary>
            Remove the given meta data
            </summary>
            <param name="name">Name of the meta data key</param>
            <param name="nameIndex">Index of the meta data key</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.GetKeyString(EpicGames.UHT.Types.UhtMetaDataKey)">
            <summary>
            Given a key, return the full meta data name
            </summary>
            <param name="key">Meta data key</param>
            <returns>Full meta data name</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.GetKeyString(System.String,System.Int32)">
            <summary>
            Given a key, return the full meta data name
            </summary>
            <param name="name">Name of the meta data key</param>
            <param name="nameIndex">Index of the meta data key</param>
            <returns>Full meta data name</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Thrown if an index is supplied (not -1) and no key conversion interface is set</exception>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtMetaData.GetSorted">
            <summary>
            Given a type, return an array of all the meta data formatted and sorted by name
            </summary>
            <returns>List of meta data key and value pairs</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtObject">
            <summary>
            Represents a UObject in the engine
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtObject.InternalObjectFlags">
            <summary>
            Internal object flags.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtObject.ObjectTypeIndex">
            <summary>
            Unique index of the object
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtObject.AlternateObject">
            <summary>
            The alternate object is used by the interface system where the native interface will
            update this setting to point to the UInterface derived companion object.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtObject.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObject.#ctor(EpicGames.UHT.Utils.UhtSession)">
            <summary>
            Construct a new instance of the object
            </summary>
            <param name="session">Session of the object</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtObject.#ctor(EpicGames.UHT.Types.UhtType,System.Int32)">
            <summary>
            Construct a new instance of the object
            </summary>
            <param name="outer">Outer object</param>
            <param name="lineNumber">Line number where object is defined</param>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtPackage">
            <summary>
            Represents a UPackage in the engine
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPackage.PackageTypeIndex">
            <summary>
            Unique index of the package
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPackage.PackageFlags">
            <summary>
            Engine package flags
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPackage.Module">
            <summary>
            UHT module of the package (1 to 1 relationship)
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPackage.EngineType">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPackage.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPackage.Package">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPackage.HeaderFile">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPackage.IsPartOfEngine">
            <summary>
            True if the package is part of the engine
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPackage.IsPlugin">
            <summary>
            True if the package is a plugin
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPackage.ShortName">
            <summary>
            Short name of the package (without the /Script/)
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPackage.#ctor(EpicGames.UHT.Utils.UhtSession,EpicGames.Core.UHTManifest.Module,EpicGames.Core.EPackageFlags)">
            <summary>
            Construct a new instance of a package
            </summary>
            <param name="session">Running session</param>
            <param name="module">Source module of the package</param>
            <param name="packageFlags">Assorted package flags</param>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtPropertyExportFlags">
            <summary>
            Collection of UHT only flags associated with properties
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyExportFlags.Public">
            <summary>
            Property should be exported as public
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyExportFlags.Private">
            <summary>
            Property should be exported as private
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyExportFlags.Protected">
            <summary>
            Property should be exported as protected
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyExportFlags.ImpliedBlueprintPure">
            <summary>
            The BlueprintPure flag was set in software and should not be considered an error
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyExportFlags.GetterSpecified">
            <summary>
            If true, the property has a getter function
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyExportFlags.SetterSpecified">
            <summary>
            If true, the property has a setter function
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyExportFlags.GetterSpecifiedNone">
            <summary>
            If true, the getter has been disabled in the specifiers
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyExportFlags.SetterSpecifiedNone">
            <summary>
            If true, the setter has been disabled in the specifiers
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyExportFlags.GetterFound">
            <summary>
            If true, the getter function was found
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyExportFlags.SetterFound">
            <summary>
            If true, the property has a setter function
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyExportFlags.FieldNotify">
            <summary>
            Property is marked as a field notify
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtPropertyExportFlagsExtensions">
            <summary>
            Helper methods for testing flags.  These methods perform better than the generic HasFlag which hits
            the GC and stalls.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyExportFlagsExtensions.HasAnyFlags(EpicGames.UHT.Types.UhtPropertyExportFlags,EpicGames.UHT.Types.UhtPropertyExportFlags)">
            <summary>
            Test to see if any of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if any of the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyExportFlagsExtensions.HasAllFlags(EpicGames.UHT.Types.UhtPropertyExportFlags,EpicGames.UHT.Types.UhtPropertyExportFlags)">
            <summary>
            Test to see if all of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if all the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyExportFlagsExtensions.HasExactFlags(EpicGames.UHT.Types.UhtPropertyExportFlags,EpicGames.UHT.Types.UhtPropertyExportFlags,EpicGames.UHT.Types.UhtPropertyExportFlags)">
            <summary>
            Test to see if a specific set of flags have a specific value.
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <param name="matchFlags">Expected value of the tested flags</param>
            <returns>True if the given flags have a specific value.</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtPropertyCategory">
            <summary>
            The context of the property.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyCategory.RegularParameter">
            <summary>
            Function parameter for a function that isn't marked as NET
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyCategory.ReplicatedParameter">
            <summary>
            Function parameter for a function that is marked as NET
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyCategory.Return">
            <summary>
            Function return value
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyCategory.Member">
            <summary>
            Class or a script structure member property
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtPropertyCategoryExtensions">
            <summary>
            Helper methods for the property category
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyCategoryExtensions.GetHintText(EpicGames.UHT.Types.UhtPropertyCategory)">
            <summary>
            Return the hint text for the property category
            </summary>
            <param name="propertyCategory">Property category</param>
            <returns>The user facing hint text</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Unexpected category</exception>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtPropertyAllocator">
            <summary>
            Allocator used for container
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyAllocator.Default">
            <summary>
            Default allocator
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyAllocator.MemoryImage">
            <summary>
            Memory image allocator
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtPointerType">
            <summary>
            Type of pointer
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPointerType.None">
            <summary>
            No pointer specified
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPointerType.Native">
            <summary>
            Native pointer specified
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtPropertyIntType">
            <summary>
            Size type of an integer
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyIntType.None">
            <summary>
            Property is not an integer
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyIntType.Sized">
            <summary>
            Property is a sized integer
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyIntType.Unsized">
            <summary>
            Property is an unsized integer
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtPropertyRefQualifier">
            <summary>
            Type of reference
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyRefQualifier.None">
            <summary>
            Property is not a reference
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyRefQualifier.ConstRef">
            <summary>
            Property is a const reference
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyRefQualifier.NonConstRef">
            <summary>
            Property is a non-const reference
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtPropertyOptions">
            <summary>
            Options that customize the properties.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyOptions.None">
            <summary>
            No property options
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyOptions.NoAutoConst">
            <summary>
            Don't automatically mark properties as CPF_Const
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtPropertyOptionsExtensions">
            <summary>
            Helper methods for testing flags.  These methods perform better than the generic HasFlag which hits
            the GC and stalls.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyOptionsExtensions.HasAnyFlags(EpicGames.UHT.Types.UhtPropertyOptions,EpicGames.UHT.Types.UhtPropertyOptions)">
            <summary>
            Test to see if any of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if any of the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyOptionsExtensions.HasAllFlags(EpicGames.UHT.Types.UhtPropertyOptions,EpicGames.UHT.Types.UhtPropertyOptions)">
            <summary>
            Test to see if all of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if all the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyOptionsExtensions.HasExactFlags(EpicGames.UHT.Types.UhtPropertyOptions,EpicGames.UHT.Types.UhtPropertyOptions,EpicGames.UHT.Types.UhtPropertyOptions)">
            <summary>
            Test to see if a specific set of flags have a specific value.
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <param name="matchFlags">Expected value of the tested flags</param>
            <returns>True if the given flags have a specific value.</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtPropertyCaps">
            <summary>
            Property capabilities.  Use the caps system instead of patterns such as "Property is UhtObjectProperty"
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyCaps.None">
            <summary>
            No property caps
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyCaps.PassCppArgsByRef">
            <summary>
            If true, the property will be passed by reference when generating the full type string
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyCaps.RequiresNullConstructorArg">
            <summary>
            If true, the an argument will need to be added to the constructor
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyCaps.CanBeContainerValue">
            <summary>
            If true, the property type can be TArray or TMap value
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyCaps.CanBeContainerKey">
            <summary>
            If true, the property type can be a TSet or TMap key
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyCaps.CanBeInstanced">
            <summary>
            True if the property can be instanced
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyCaps.CanExposeOnSpawn">
            <summary>
            True if the property can be exposed on spawn
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyCaps.CanHaveConfig">
            <summary>
            True if the property can have a config setting
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyCaps.CanBeBlueprintAssignable">
            <summary>
            True if the property allows the BlueprintAssignable flag.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyCaps.CanBeBlueprintCallable">
            <summary>
            True if the property allows the BlueprintCallable flag.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyCaps.CanBeBlueprintAuthorityOnly">
            <summary>
            True if the property allows the BlueprintAuthorityOnly flag.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyCaps.IsParameterSupportedByBlueprint">
            <summary>
            True to see if the function parameter property is supported by blueprint
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyCaps.IsMemberSupportedByBlueprint">
            <summary>
            True to see if the member property is supported by blueprint
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyCaps.SupportsRigVM">
            <summary>
            True if the property supports RigVM
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyCaps.IsRigVMEnum">
            <summary>
            True if the property should codegen as an enumeration
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyCaps.IsRigVMArray">
            <summary>
            True if the property should codegen as an array
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtPropertyCapsExtensions">
            <summary>
            Helper methods for testing flags.  These methods perform better than the generic HasFlag which hits
            the GC and stalls.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyCapsExtensions.HasAnyFlags(EpicGames.UHT.Types.UhtPropertyCaps,EpicGames.UHT.Types.UhtPropertyCaps)">
            <summary>
            Test to see if any of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if any of the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyCapsExtensions.HasAllFlags(EpicGames.UHT.Types.UhtPropertyCaps,EpicGames.UHT.Types.UhtPropertyCaps)">
            <summary>
            Test to see if all of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if all the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyCapsExtensions.HasExactFlags(EpicGames.UHT.Types.UhtPropertyCaps,EpicGames.UHT.Types.UhtPropertyCaps,EpicGames.UHT.Types.UhtPropertyCaps)">
            <summary>
            Test to see if a specific set of flags have a specific value.
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <param name="matchFlags">Expected value of the tested flags</param>
            <returns>True if the given flags have a specific value.</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtPropertyTextType">
            <summary>
            Text can be formatted in different context with slightly different results
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyTextType.Generic">
            <summary>
            Generic type
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyTextType.GenericFunctionArgOrRetVal">
            <summary>
            Generic function argument or return value
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyTextType.GenericFunctionArgOrRetValImpl">
            <summary>
            Generic function argument or return value implementation (specific to booleans and will always return "bool")
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyTextType.ClassFunctionArgOrRetVal">
            <summary>
            Class function argument or return value
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyTextType.EventFunctionArgOrRetVal">
            <summary>
            Event function argument or return value
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyTextType.InterfaceFunctionArgOrRetVal">
            <summary>
            Interface function argument or return value
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyTextType.Sparse">
            <summary>
            Sparse property declaration
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyTextType.SparseShort">
            <summary>
            Sparse property short name
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyTextType.ExportMember">
            <summary>
            Class or structure member
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyTextType.EventParameterMember">
            <summary>
            Members of the event parameters structure used by code generation to invoke events
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyTextType.EventParameterFunctionMember">
            <summary>
            Members of the event parameters structure used by code generation to invoke functions
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyTextType.Construction">
            <summary>
            Instance of the property is being constructed
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyTextType.FunctionThunkParameterArrayType">
            <summary>
            Used to get the type argument for a function thunk.  This is used for P_GET_ARRAY_*
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyTextType.FunctionThunkParameterArgType">
            <summary>
            If the P_GET macro requires an argument, this is used to fetch that argument
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyTextType.FunctionThunkRetVal">
            <summary>
            Used to get the return type for function thunks
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyTextType.RigVMType">
            <summary>
            Basic RigVM type
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPropertyTextType.GetterSetterArg">
            <summary>
            Type expected in a getter/setter argument list
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtPropertyTextTypeExtensions">
            <summary>
            Extension methods for the property text type
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyTextTypeExtensions.IsParameter(EpicGames.UHT.Types.UhtPropertyTextType)">
            <summary>
            Test to see if the text type is for a function
            </summary>
            <param name="textType">Type of text</param>
            <returns>True if the text type is a function</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtPGetArgumentType">
            <summary>
            Specifies how the PGet argument type is to be formatted
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPGetArgumentType.None">
            <summary>
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPGetArgumentType.EngineClass">
            <summary>
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtPGetArgumentType.TypeText">
            <summary>
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.IUhtPropertyMemberContext">
            <summary>
            Property member context provides extra context when formatting the member declaration and definitions.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.IUhtPropertyMemberContext.OuterStruct">
            <summary>
            The outer/owning structure
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.IUhtPropertyMemberContext.OuterStructSourceName">
            <summary>
            The outer/owning structure source name.  In some cases, this can differ from the OuterStruct.SourceName
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.IUhtPropertyMemberContext.StaticsName">
            <summary>
            Name of the statics block for static definitions for the outer object
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.IUhtPropertyMemberContext.NamePrefix">
            <summary>
            Prefix to apply to declaration names
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.IUhtPropertyMemberContext.MetaDataSuffix">
            <summary>
            Suffix to add to the declaration name
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.IUhtPropertyMemberContext.GetTypeHash(EpicGames.UHT.Types.UhtObject)">
            <summary>
            Return the hash code for a given object
            </summary>
            <param name="obj">Object in question</param>
            <returns>Hash code</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.IUhtPropertyMemberContext.GetSingletonName(EpicGames.UHT.Types.UhtObject,System.Boolean)">
            <summary>
            Return the singleton name for the given object
            </summary>
            <param name="obj">Object in question</param>
            <param name="registered">If true, the singleton that returns the registered object is returned.</param>
            <returns>Singleton function name</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtPropertySettings">
            <summary>
            Property settings is a transient object used during the parsing of properties
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPropertySettings.SourceName">
            <summary>
            Source name of the property
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPropertySettings.EngineName">
            <summary>
            Engine name of the property
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPropertySettings.MetaData">
            <summary>
            Property's meta data
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPropertySettings.Outer">
            <summary>
            Property outer object
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPropertySettings.LineNumber">
            <summary>
            Line number of the property declaration
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPropertySettings.PropertyCategory">
            <summary>
            Property category
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPropertySettings.PropertyFlags">
            <summary>
            Engine property flags
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPropertySettings.DisallowPropertyFlags">
            <summary>
            Property flags not allowed by the context of the property parsing
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPropertySettings.PropertyExportFlags">
            <summary>
            UHT specified property flags
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPropertySettings.Allocator">
            <summary>
            Allocator used for containers
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPropertySettings.Options">
            <summary>
            Options for property parsing
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPropertySettings.PointerType">
            <summary>
            Property pointer type
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPropertySettings.RepNotifyName">
            <summary>
            Replication notify name
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPropertySettings.ArrayDimensions">
            <summary>
            If set, the array size of the property
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPropertySettings.Setter">
            <summary>
            Getter method
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPropertySettings.Getter">
            <summary>
            Setter method
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPropertySettings.DefaultValueTokens">
            <summary>
            Default value of the property
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtPropertySettings.IsBitfield">
            <summary>
            If true, the property is a bit field
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertySettings.#ctor">
            <summary>
            Construct a new, uninitialized version of the property settings
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertySettings.Reset(EpicGames.UHT.Types.UhtPropertySettings,System.String,EpicGames.UHT.Utils.IUhtMessageSite)">
            <summary>
            Construct property settings based on the property settings for a parent container
            </summary>
            <param name="parentPropertySettings">Parent container property</param>
            <param name="sourceName">Name of the property</param>
            <param name="messageSite">Message site used to construct meta data object</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertySettings.Reset(EpicGames.UHT.Types.UhtType,System.Int32,EpicGames.UHT.Types.UhtPropertyCategory,EpicGames.Core.EPropertyFlags)">
            <summary>
            Reset the property settings.  Used on a cached property settings object
            </summary>
            <param name="outer">Outer/owning type</param>
            <param name="lineNumber">Line number of property</param>
            <param name="propertyCategory">Category of property</param>
            <param name="disallowPropertyFlags">Property flags that are not allowed</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertySettings.Reset(EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.UhtPropertyOptions)">
            <summary>
            Reset property settings based on the given property.  Used to prepare a cached property settings for parsing.
            </summary>
            <param name="property">Source property</param>
            <param name="options">Property options</param>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Thrown if the input property doesn't have an outer</exception>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtProperty">
            <summary>
            Represents FProperty fields
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtProperty.s_casts">
            <summary>
            Collection of recognized casts when parsing array dimensions
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtProperty.s_invalidParamNames">
            <summary>
            Collection of invalid names for parameters 
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtProperty.ObjectFlags">
            <summary>
            Standard object flags for properties
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtProperty.FunctionParameterThunkPrefix">
            <summary>
            Prefix used when declaring P_GET_ parameters
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.CppTypeText">
            <summary>
            Simple native CPP type text.  Will not include any template arguments
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.PGetMacroText">
            <summary>
            P_GET_ macro name
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.PGetPassAsNoPtr">
            <summary>
            If true, then references must be passed without a pointer
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.PGetTypeArgument">
            <summary>
            Type of the PGet argument if one is required
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.PropertyCategory">
            <summary>
            Property category
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.PropertyFlags">
            <summary>
            Engine property flags
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.PropertyCaps">
            <summary>
            Capabilities of the property.  Use caps system instead of testing for specific property types.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.DisallowPropertyFlags">
            <summary>
            Engine flags that are disallowed on this property
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.PropertyExportFlags">
            <summary>
            UHT specified property flags
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.RefQualifier">
            <summary>
            Reference type of the property
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.PointerType">
            <summary>
            Pointer type of the property
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.Allocator">
            <summary>
            Allocator to be used with containers
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.RepNotifyName">
            <summary>
            Replication notify name
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.ArrayDimensions">
            <summary>
            Fixed array size
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.Setter">
            <summary>
            Property setter
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.Getter">
            <summary>
            Property getter
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.DefaultValueTokens">
            <summary>
            Default value of property
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.IsBitfield">
            <summary>
            If true, this property is a bit field
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.EngineType">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.Deprecated">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.SpecifierValidatorTable">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.IsStaticArray">
            <summary>
            If true, the property is a fixed/static array
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtProperty.IsEditorOnlyProperty">
            <summary>
            If true, the property is editor only
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.#ctor(EpicGames.UHT.Types.UhtType,System.Int32)">
            <summary>
            Construct a new property
            </summary>
            <param name="outer">Outer type of the property</param>
            <param name="lineNumber">Line number where property was declared</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.#ctor(EpicGames.UHT.Types.UhtPropertySettings)">
            <summary>
            Construct a new property
            </summary>
            <param name="propertySettings">Property settings from parsing</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.AppendText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <summary>
            Internal version of AppendText.  Don't append any text to the builder to get the default behavior
            </summary>
            <param name="builder">Destination builder</param>
            <param name="textType">Text type of where the property is being referenced</param>
            <param name="isTemplateArgument">If true, this property is a template arguments</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.AppendFullDecl(System.Text.StringBuilder,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <summary>
            Append the full declaration including such things as property name and const<amp/> requirements
            </summary>
            <param name="builder">Destination builder</param>
            <param name="textType">Text type of where the property is being referenced</param>
            <param name="skipParameterName">If true, do not include the property name</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <summary>
            Append the required code to declare the property as a member
            </summary>
            <param name="builder">Output builder</param>
            <param name="context">Current context</param>
            <param name="name">Name of the property.  This is needed in some cases where the name in the declarations doesn't match the property name.</param>
            <param name="nameSuffix">Suffix to the property name</param>
            <param name="tabs">Number of tabs prefix the line with</param>
            <returns>Output builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Append the required code to declare the property as a member
            </summary>
            <param name="builder">Output builder</param>
            <param name="context">Current context</param>
            <param name="name">Name of the property.  This is needed in some cases where the name in the declarations doesn't match the property name.</param>
            <param name="nameSuffix">Suffix to the property name</param>
            <param name="tabs">Number of tabs prefix the line with</param>
            <param name="paramsStructName">Structure name</param>
            <param name="appendMetaDataDecl">If true, add the meta data decl prior to the member decl</param>
            <returns>Output builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <summary>
            Append the required code to define the property as a member
            </summary>
            <param name="builder">Output builder</param>
            <param name="context">Context of the call</param>
            <param name="name">Name of the property.  This is needed in some cases where the name in the declarations doesn't match the property name.</param>
            <param name="nameSuffix">Suffix to the property name</param>
            <param name="offset">Offset of the property</param>
            <param name="tabs">Number of tabs prefix the line with</param>
            <returns>Output builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.AppendMemberDefStart(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Append the required start of code to define the property as a member
            </summary>
            <param name="builder">Output builder</param>
            <param name="context">Context of the call</param>
            <param name="name">Name of the property.  This is needed in some cases where the name in the declarations doesn't match the property name.</param>
            <param name="nameSuffix">Suffix to the property name</param>
            <param name="offset">Offset of the property</param>
            <param name="tabs">Number of tabs prefix the line with</param>
            <param name="paramsStructName">Structure name</param>
            <param name="paramsGenFlags">Structure flags</param>
            <param name="appendMetaDataDef">If true, add the meta data def prior to the member def</param>
            <param name="appendOffset">If true, add the offset parameter</param>
            <returns>Output builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.AppendMemberDefEnd(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String)">
            <summary>
            Append the required end of code to define the property as a member
            </summary>
            <param name="builder">Output builder</param>
            <param name="context">Context of the call</param>
            <param name="name">Name of the property.  This is needed in some cases where the name in the declarations doesn't match the property name.</param>
            <param name="nameSuffix">Suffix to the property name</param>
            <returns>Output builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.AppendMemberDefRef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,EpicGames.UHT.Types.UhtObject,System.Boolean,System.Boolean)">
            <summary>
            Append the a type reference to the member definition
            </summary>
            <param name="builder">Output builder</param>
            <param name="context">Context of the call</param>
            <param name="obj">Referenced object</param>
            <param name="registered">True if the registered singleton name is to be used</param>
            <param name="appendNull">True if a "nullptr" is to be appended if the object is null</param>
            <returns>Output builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.AppendMemberPtr(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <summary>
            Append the required code to add the properties to a pointer array
            </summary>
            <param name="builder">Output builder</param>
            <param name="context">Context of the call</param>
            <param name="name">Name of the property.  This is needed in some cases where the name in the declarations doesn't match the property name.</param>
            <param name="nameSuffix">Suffix to the property name</param>
            <param name="tabs">Number of tabs prefix the line with</param>
            <returns>Output builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.AppendFunctionThunkParameterGet(System.Text.StringBuilder)">
            <summary>
            Append a P_GET macro
            </summary>
            <param name="builder">Destination builder</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.AppendFunctionThunkParameterArg(System.Text.StringBuilder)">
            <summary>
            Append the text for a function thunk call argument
            </summary>
            <param name="builder">Output builder</param>
            <returns>Output builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.AppendFunctionThunkParameterName(System.Text.StringBuilder)">
            <summary>
            Apppend the name of a function thunk paramter
            </summary>
            <param name="builder">Output builder</param>
            <returns>Output builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.AppendNullConstructorArg(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Append the appropriate values to initialize the property to a "NULL" value;
            </summary>
            <param name="builder"></param>
            <param name="isInitializer"></param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.GetUserFacingDecl">
            <summary>
            Return the basic declaration type text for user facing messages
            </summary>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.GetRigVMType">
            <summary>
            Return the RigVM type
            </summary>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.AppendObjectHashes(System.Text.StringBuilder,System.Int32,EpicGames.UHT.Types.IUhtPropertyMemberContext)">
            <summary>
            Appends any applicable objects and child properties
            </summary>
            <param name="builder">Output builder</param>
            <param name="startingLength">Initial length of the builder prior to appending the hashes</param>
            <param name="context">Context used to lookup the hashes</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.SanitizeDefaultValue(EpicGames.UHT.Tokenizer.IUhtTokenReader,System.Text.StringBuilder)">
            <summary>
            Parse a default value for the property and return a sanitized string representation.
            
            All tokens in the token reader must be consumed.  Otherwise the default value will be considered to be invalid.
            </summary>
            <param name="defaultValueReader">Reader containing the default value</param>
            <param name="innerDefaultValue">Sanitized representation of default value</param>
            <returns>True if a default value was parsed.</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.ResolveSelf(EpicGames.UHT.Types.UhtResolvePhase)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.ScanForInstancedReferenced(System.Boolean)">
            <summary>
            Check properties to see if any instances are referenced.
            This method does NOT cache the result.
            </summary>
            <param name="deepScan">If true, the ScanForInstancedReferenced method on the properties will also be called.</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.Validate(EpicGames.UHT.Types.UhtValidationOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.Validate(EpicGames.UHT.Types.UhtStruct,EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.UhtValidationOptions)">
            <summary>
            Validate the property settings
            </summary>
            <param name="outerStruct">The outer structure for the property.  For properties inside containers, this will be the owning struct of the container</param>
            <param name="outermostProperty">Outer most property being validated.  For properties in containers, 
            this will be the container property.  For properties outside of containers or the container itself, this will be the property.</param>
            <param name="options"></param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.ValidateDeprecated">
            <summary>
            Validate that we don't reference any deprecated classes
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.ValidateFunctionArgument(EpicGames.UHT.Types.UhtFunction,EpicGames.UHT.Types.UhtValidationOptions)">
            <summary>
            Verify function argument
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.ValidateMember(EpicGames.UHT.Types.UhtStruct,EpicGames.UHT.Types.UhtValidationOptions)">
            <summary>
            Validate member settings
            </summary>
            <param name="structObj">Containing struct.  This is either a UhtScriptStruct or UhtClass</param>
            <param name="options">Validation options</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.ValidateDeprecatedClass(EpicGames.UHT.Types.UhtClass)">
            <summary>
            Generate an error if the class has been deprecated
            </summary>
            <param name="classObj">Class to check</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.ValidateStructPropertyOkForNet(EpicGames.UHT.Types.UhtProperty)">
            <summary>
            Check to see if the property is valid as a member of a networked structure
            </summary>
            <param name="referencingProperty">The property referencing the structure property.  All error should be logged on the referencing property.</param>
            <returns>True if the property is valid, false if not.  If the property is not valid, an error should also be generated.</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.MustBeConstArgument(EpicGames.UHT.Types.UhtType@)">
            <summary>
            Test to see if this property references something that requires the argument to be marked as const
            </summary>
            <param name="errorType">If const is required, returns the type that is forcing the const</param>
            <returns>True if the argument must be marked as const</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.ContainsEditorOnlyProperties">
            <summary>
            Test to see if the property contains any editor only properties.  This does not 
            test to see if the property itself is editor only.  This is implemented for struct properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.CollectReferences(EpicGames.UHT.Utils.IUhtReferenceCollector)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.CollectReferencesInternal(EpicGames.UHT.Utils.IUhtReferenceCollector,System.Boolean)">
            <summary>
            Collect the references for the property.  This method is used by container properties to
            collect the contained property's references.
            </summary>
            <param name="collector">Reference collector</param>
            <param name="isTemplateProperty">If true, this is a property in a container</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.GetForwardDeclarations">
            <summary>
            Return a string of all the forward declarations.
            This method should be removed once C++ UHT is removed.
            This information can be collected via CollectReferences.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.EnumerateReferencedTypes">
            <summary>
            Enumerate all reference types.  This method is used exclusively by FindNoExportStructsRecursive
            </summary>
            <returns>Type enumerator</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.GetNameSuffix(System.String,System.String)">
            <summary>
            Generate a new name suffix based on the current suffix and the new suffix
            </summary>
            <param name="outerSuffix">Current suffix</param>
            <param name="newSuffix">Suffix to be added</param>
            <returns>Combination of the two suffixes</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.IsSameType(EpicGames.UHT.Types.UhtProperty)">
            <summary>
            Test to see if the two properties are the same type
            </summary>
            <param name="other">Other property to test</param>
            <returns>True if the properies are the same type</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtProperty.MatchesType(EpicGames.UHT.Types.UhtProperty)">
            <summary>
            Test to see if the two properties are the same type and ConstParm/OutParm flags somewhat match
            </summary>
            <param name="other">The other property to test</param>
            <returns></returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions">
            <summary>
            Assorted StringBuilder extensions for properties
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions.AppendPropertyText(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <summary>
            Add the given property text
            </summary>
            <param name="builder">Destination builder</param>
            <param name="property">Property in question</param>
            <param name="textType">Type of text to append</param>
            <param name="isTemplateArgument">If true, this is a template argument property</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions.AppendMemberDecl(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <summary>
            Append the member declaration
            </summary>
            <param name="builder">Destination builder</param>
            <param name="property">Property in question</param>
            <param name="context">Context of the property</param>
            <param name="name">Property name</param>
            <param name="nameSuffix">Name suffix</param>
            <param name="tabs">Number of tabs in the formatting</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions.AppendMemberDef(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.String,System.Int32)">
            <summary>
            Append the member definition
            </summary>
            <param name="builder">Destination builder</param>
            <param name="property">Property in question</param>
            <param name="context">Context of the property</param>
            <param name="name">Property name</param>
            <param name="nameSuffix">Name suffix</param>
            <param name="offset">Offset of the property in the parent</param>
            <param name="tabs">Number of tabs in the formatting</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions.AppendMemberPtr(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <summary>
            Append the member pointer
            </summary>
            <param name="builder">Destination builder</param>
            <param name="property">Property in question</param>
            <param name="context">Context of the property</param>
            <param name="name">Property name</param>
            <param name="nameSuffix">Name suffix</param>
            <param name="tabs">Number of tabs in the formatting</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions.AppendFullDecl(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.UhtPropertyTextType,System.Boolean)">
            <summary>
            Append the full declaration including such things as const, *, and &amp;
            </summary>
            <param name="builder">Destination builder</param>
            <param name="property">Property in question</param>
            <param name="textType">Type of text to append</param>
            <param name="skipParameterName">If true, don't append the parameter name</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions.AppendFunctionThunkParameterGet(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty)">
            <summary>
            Append the function thunk parameter get
            </summary>
            <param name="builder">Destination builder</param>
            <param name="property">Property in question</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions.AppendFunctionThunkParameterArrayType(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty)">
            <summary>
            Append the function thunk parameter array type
            </summary>
            <param name="builder">Destination builder</param>
            <param name="property">Property in question</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions.AppendFunctionThunkParameterArg(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty)">
            <summary>
            Append the function thunk parameter argument
            </summary>
            <param name="builder">Destination builder</param>
            <param name="property">Property in question</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions.AppendFunctionThunkReturn(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty)">
            <summary>
            Append the function thunk return
            </summary>
            <param name="builder">Destination builder</param>
            <param name="property">Property in question</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions.AppendFunctionThunkParameterName(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty)">
            <summary>
            Append the function thunk parameter name
            </summary>
            <param name="builder">Destination builder</param>
            <param name="property">Property in question</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions.AppendSparse(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty)">
            <summary>
            Append the sparse type
            </summary>
            <param name="builder">Destination builder</param>
            <param name="property">Property in question</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions.AppendNullConstructorArg(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty,System.Boolean)">
            <summary>
            Append the property's null constructor arg
            </summary>
            <param name="builder">Destination builder</param>
            <param name="property">Property in question</param>
            <param name="isInitializer">If true this is in an initializer context.</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions.AppendNotifyFunc(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty)">
            <summary>
            Append the replication notify function or a 'nullptr'
            </summary>
            <param name="builder">Destination builder</param>
            <param name="property">Property in question</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions.AppendFlags(System.Text.StringBuilder,EpicGames.Core.EPropertyFlags)">
            <summary>
            Append the parameter flags
            </summary>
            <param name="builder">Destination builder</param>
            <param name="propertyFlags">Property flags</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions.AppendArrayDim(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.IUhtPropertyMemberContext)">
            <summary>
            Append the property array dimensions as a CPP_ARRAY_DIM macro or '1' if not a fixed array.
            </summary>
            <param name="builder">Destination builder</param>
            <param name="property">Property in question</param>
            <param name="context">Context of the property</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions.AppendObjectHash(System.Text.StringBuilder,System.Int32,EpicGames.UHT.Types.UhtType,EpicGames.UHT.Types.IUhtPropertyMemberContext,EpicGames.UHT.Types.UhtObject)">
            <summary>
            Given an object, append the hash (if applicable) to the builder
            </summary>
            <param name="builder">Output builder</param>
            <param name="referingType">Type asking for an object hash</param>
            <param name="startingLength">Initial length of the builder prior to appending the hashes</param>
            <param name="context">Context used to lookup the hashes</param>
            <param name="obj">Object being appended</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions.AppendObjectHash(System.Text.StringBuilder,EpicGames.UHT.Types.UhtType,EpicGames.UHT.Types.IUhtPropertyMemberContext,EpicGames.UHT.Types.UhtObject)">
            <summary>
            Given an object, append the hash (if applicable) to the builder
            </summary>
            <param name="builder">Output builder</param>
            <param name="referingType">Type asking for an object hash</param>
            <param name="context">Context used to lookup the hashes</param>
            <param name="obj">Object being appended</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions.AppendObjectHashes(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.IUhtPropertyMemberContext)">
            <summary>
            Append the object hashes for all referenced objects
            </summary>
            <param name="builder">Destination builder</param>
            <param name="property">Property in question</param>
            <param name="context">Context of the property</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions.AppendSingletonName(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,EpicGames.UHT.Types.UhtObject,System.Boolean)">
            <summary>
            Append the singleton name for the given type
            </summary>
            <param name="builder">Destination builder</param>
            <param name="context">Context of the property</param>
            <param name="type">Type to append</param>
            <param name="registered">If true, append the registered type singleton.</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions.AppendPropertyGetterWrapperName(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty)">
            <summary>
            Append the getter wrapper name
            </summary>
            <param name="builder">Destination builder</param>
            <param name="property">Property in question</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtPropertyStringBuilderExtensions.AppendPropertySetterWrapperName(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty)">
            <summary>
            Append the setter wrapper name
            </summary>
            <param name="builder">Destination builder</param>
            <param name="property">Property in question</param>
            <returns>Destination builder</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtRigVMParameterFlags">
            <summary>
            Flags to represent information about a RigVM parameter
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtRigVMParameterFlags.None">
            <summary>
            No RigVM flags
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtRigVMParameterFlags.Constant">
            <summary>
            "Constant" metadata specified
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtRigVMParameterFlags.Input">
            <summary>
            "Input" metadata specified
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtRigVMParameterFlags.Output">
            <summary>
            "Output" metadata specified
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtRigVMParameterFlags.Singleton">
            <summary>
            "Singleton" metadata specified
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtRigVMParameterFlags.EditorOnly">
            <summary>
            Set if the property is editor only
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtRigVMParameterFlags.IsEnum">
            <summary>
            Set if the property is an enum
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtRigVMParameterFlags.IsArray">
            <summary>
            Set if the property is an array
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtRigVMParameterFlagsExtensions">
            <summary>
            Helper methods for testing flags.  These methods perform better than the generic HasFlag which hits
            the GC and stalls.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtRigVMParameterFlagsExtensions.HasAnyFlags(EpicGames.UHT.Types.UhtRigVMParameterFlags,EpicGames.UHT.Types.UhtRigVMParameterFlags)">
            <summary>
            Test to see if any of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if any of the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtRigVMParameterFlagsExtensions.HasAllFlags(EpicGames.UHT.Types.UhtRigVMParameterFlags,EpicGames.UHT.Types.UhtRigVMParameterFlags)">
            <summary>
            Test to see if all of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if all the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtRigVMParameterFlagsExtensions.HasExactFlags(EpicGames.UHT.Types.UhtRigVMParameterFlags,EpicGames.UHT.Types.UhtRigVMParameterFlags,EpicGames.UHT.Types.UhtRigVMParameterFlags)">
            <summary>
            Test to see if a specific set of flags have a specific value.
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <param name="matchFlags">Expected value of the tested flags</param>
            <returns>True if the given flags have a specific value.</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtRigVMParameter">
            <summary>
            The FRigVMParameter represents a single parameter of a method
            marked up with RIGVM_METHOD.
            Each parameter can be marked with Constant, Input or Output
            metadata - this struct simplifies access to that information.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtRigVMParameter.Property">
            <summary>
            Property associated with the RigVM parameter
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtRigVMParameter.Name">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtRigVMParameter.Type">
            <summary>
            Type of the property
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtRigVMParameter.CastName">
            <summary>
            Cast name
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtRigVMParameter.CastType">
            <summary>
            Cast type
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtRigVMParameter.ParameterFlags">
            <summary>
            Flags associated with the parameter
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtRigVMParameter.Constant">
            <summary>
            True if the parameter is marked as "Constant"
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtRigVMParameter.Input">
            <summary>
            True if the parameter is marked as "Input"
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtRigVMParameter.Output">
            <summary>
            True if the parameter is marked as "Output"
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtRigVMParameter.Singleton">
            <summary>
            True if the parameter is marked as "Singleton"
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtRigVMParameter.EditorOnly">
            <summary>
            True if the parameter is editor only
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtRigVMParameter.IsEnum">
            <summary>
            True if the parameter is an enum
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtRigVMParameter.IsArray">
            <summary>
            True if the parameter is an array
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtRigVMParameter.#ctor(EpicGames.UHT.Types.UhtProperty,System.Int32)">
            <summary>
            Create a new RigVM parameter from a property
            </summary>
            <param name="property">Source property</param>
            <param name="index">Parameter index.  Used to create a unique cast name.</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtRigVMParameter.#ctor(System.String,System.String)">
            <summary>
            Create a new parameter
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="type">Type of the parameter</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtRigVMParameter.NameOriginal(System.Boolean)">
            <summary>
            Get the name of the parameter
            </summary>
            <param name="castName">If true, return the cast name</param>
            <returns>Parameter name</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtRigVMParameter.TypeOriginal(System.Boolean)">
            <summary>
            Get the type of the parameter
            </summary>
            <param name="castType">If true, return the cast type</param>
            <returns>Parameter type</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtRigVMParameter.Declaration(System.Boolean,System.Boolean)">
            <summary>
            Get the full declaration (type and name)
            </summary>
            <param name="castType">If true, return the cast type</param>
            <param name="castName">If true, return the cast name</param>
            <returns>Parameter declaration</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtRigVMParameter.BaseType(System.Boolean)">
            <summary>
            Return the base type without any template arguments
            </summary>
            <param name="castType">If true, return the cast type</param>
            <returns>Base parameter type</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtRigVMParameter.ExtendedType(System.Boolean)">
            <summary>
            Template arguments of the type or type if not a template type.
            </summary>
            <param name="castType">If true, return the cast type</param>
            <returns>Template arguments of the type</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtRigVMParameter.TypeConstRef(System.Boolean)">
            <summary>
            Return the type with a const reference
            </summary>
            <param name="castType">If true, return the cast type</param>
            <returns>Type with a const reference</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtRigVMParameter.TypeRef(System.Boolean)">
            <summary>
            Return the type with a reference
            </summary>
            <param name="castType">If true, return the cast type</param>
            <returns>Type with a reference</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtRigVMParameter.TypeNoRef(System.Boolean)">
            <summary>
            Return the type without reference
            </summary>
            <param name="castType">If true, return the cast type</param>
            <returns>Type without the reference</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtRigVMParameter.TypeVariableRef(System.Boolean)">
            <summary>
            Return the type as a reference
            </summary>
            <param name="castType">If true, return the cast type</param>
            <returns>Type as a reference</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtRigVMParameter.Variable(System.Boolean,System.Boolean)">
            <summary>
            Return a variable declaration for the parameter
            </summary>
            <param name="castType">If true, return the cast type</param>
            <param name="castName">If true, return the cast name</param>
            <returns>Parameter as a variable declaration</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtRigVMParameter.IsConst">
            <summary>
            True if the parameter is constant
            </summary>
            <returns>True if the parameter is constant</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtRigVMParameter.RequiresCast">
            <summary>
            Return true if the parameter requires a cast
            </summary>
            <returns>True if the parameter requires a cast</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtRigVMMethodInfo">
            <summary>
            A single info dataset for a function marked with RIGVM_METHOD.
            This struct provides access to its name, the return type and all parameters.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtRigVMMethodInfo.ReturnType">
            <summary>
            Return type of the method
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtRigVMMethodInfo.Name">
            <summary>
            Name of the method
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtRigVMMethodInfo.Parameters">
            <summary>
            Method parameters
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtRigVMMethodInfo.ReturnPrefix">
            <summary>
            If the method has a return value, return "return".  Otherwise return nothing.
            </summary>
            <returns>Prefix required for the return value</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtRigVMStructInfo">
            <summary>
            An info dataset providing access to all functions marked with RIGVM_METHOD
            for each struct.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtRigVMStructInfo.HasGetUpgradeInfoMethod">
            <summary>
            True if the GetUpgradeInfoMethod was found. 
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtRigVMStructInfo.HasGetNextAggregateNameMethod">
            <summary>
            True if the GetNextAggregateNameMethod was found. 
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtRigVMStructInfo.Name">
            <summary>
            Engine name of the owning script struct
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtRigVMStructInfo.Members">
            <summary>
            List of the members
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtRigVMStructInfo.Methods">
            <summary>
            List of the methods
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtScriptStructExportFlags">
            <summary>
            Series of flags not part of the engine's script struct flags that affect code generation or verification
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtScriptStructExportFlags.None">
            <summary>
            No export flags
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtScriptStructExportFlags.HasDefaults">
            <summary>
            "HasDefaults" specifier present
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtScriptStructExportFlags.HasNoOpConstructor">
            <summary>
            "HasNoOpConstructor" specifier present
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtScriptStructExportFlags.IsAlwaysAccessible">
            <summary>
            "IsAlwaysAccessible" specifier present
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtScriptStructExportFlags.IsCoreType">
            <summary>
            "IsCoreType" specifier present
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtScriptStructExportFlagsExtensions">
            <summary>
            Helper methods for testing flags.  These methods perform better than the generic HasFlag which hits
            the GC and stalls.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtScriptStructExportFlagsExtensions.HasAnyFlags(EpicGames.UHT.Types.UhtScriptStructExportFlags,EpicGames.UHT.Types.UhtScriptStructExportFlags)">
            <summary>
            Test to see if any of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if any of the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtScriptStructExportFlagsExtensions.HasAllFlags(EpicGames.UHT.Types.UhtScriptStructExportFlags,EpicGames.UHT.Types.UhtScriptStructExportFlags)">
            <summary>
            Test to see if all of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if all the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtScriptStructExportFlagsExtensions.HasExactFlags(EpicGames.UHT.Types.UhtScriptStructExportFlags,EpicGames.UHT.Types.UhtScriptStructExportFlags,EpicGames.UHT.Types.UhtScriptStructExportFlags)">
            <summary>
            Test to see if a specific set of flags have a specific value.
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <param name="matchFlags">Expected value of the tested flags</param>
            <returns>True if the given flags have a specific value.</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtScriptStruct">
            <summary>
            Represents the USTRUCT object
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtScriptStruct.ScriptStructFlags">
            <summary>
            Script struct engine flags
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtScriptStruct.ScriptStructExportFlags">
            <summary>
            UHT only script struct falgs
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtScriptStruct.MacroDeclaredLineNumber">
            <summary>
            Line number where GENERATED_BODY/GENERATED_USTRUCT_BODY macro was found
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtScriptStruct.RigVMStructInfo">
            <summary>
            RigVM structure info
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtScriptStruct.EngineType">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtScriptStruct.HasDefaults">
            <summary>
            True if the struct has the "HasDefaults" specifier
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtScriptStruct.IsAlwaysAccessible">
            <summary>
            True if the struct has the "IsAlwaysAccessible" specifier
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtScriptStruct.IsCoreType">
            <summary>
            True if the struct has the "IsCoreType" specifier
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtScriptStruct.HasNoOpConstructor">
            <summary>
            True if the struct has the "HasNoOpConstructor" specifier
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtScriptStruct.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtScriptStruct.EngineNamePrefix">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtScriptStruct.SpecifierValidatorTable">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtScriptStruct.SuperScriptStruct">
            <summary>
            Super struct
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtScriptStruct.#ctor(EpicGames.UHT.Types.UhtType,System.Int32)">
            <summary>
            Construct a new script struct
            </summary>
            <param name="outer">Outer type</param>
            <param name="lineNumber">Line number of the definition</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtScriptStruct.ResolveSuper(EpicGames.UHT.Types.UhtResolvePhase)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtScriptStruct.ResolveSelf(EpicGames.UHT.Types.UhtResolvePhase)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtScriptStruct.ResolveChildren(EpicGames.UHT.Types.UhtResolvePhase)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtScriptStruct.ScanForInstancedReferencedInternal(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtScriptStruct.Validate(EpicGames.UHT.Types.UhtValidationOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtScriptStruct.CollectReferences(EpicGames.UHT.Utils.IUhtReferenceCollector)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtSourceFile">
            <summary>
            Represents a source file in UHT
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSourceFile.Session">
            <summary>
            The session associated with the source
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSourceFile.FilePath">
            <summary>
            The full file path
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSourceFile.FileName">
            <summary>
            The file name
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSourceFile.Data">
            <summary>
            The contents of the source file
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSourceFile.FragmentSourceFile">
            <summary>
            If this source is from a fragment, the original source file
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSourceFile.FragmentLineNumber">
            <summary>
            If this source is from a fragment, the starting line of the fragment
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSourceFile.FullFilePath">
            <summary>
            Full file path of the source file
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSourceFile.MessageSession">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSourceFile.MessageSource">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSourceFile.MessageLineNumber">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSourceFile.MessageFilePath">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSourceFile.MessageFullFilePath">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSourceFile.MessageIsFragment">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSourceFile.MessageFragmentFilePath">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSourceFile.MessageFragmentFullFilePath">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtSourceFile.MessageFragmentLineNumber">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSourceFile.#ctor(EpicGames.UHT.Utils.UhtSession,System.String)">
            <summary>
            Construct a new instance of a source file
            </summary>
            <param name="session">The owning session</param>
            <param name="filePath">The full file path</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtSourceFile.Read">
            <summary>
            Read the contents of the source file
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtStruct">
            <summary>
            Base class for all types that contain properties and functions.
            Also support the ability to specifier super class and base classes
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtStruct.GeneratedCodeVersion">
            <summary>
            Generated code version of the type.  Set via specifiers
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtStruct.Properties">
            <summary>
            Return a collection of children that are properties
            
            NOTE: This method allocates memory to construct the enumerator.  In code
            invoked a large number of times, the loop should be written directly into
            the code and not use this method.  Also, the Linq version performs even
            worse.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtStruct.Functions">
            <summary>
            Return a collection of children that are functions
            
            NOTE: This method allocates memory to construct the enumerator.  In code
            invoked a large number of times, the loop should be written directly into
            the code and not use this method.  Also, the Linq version performs even
            worse.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtStruct.EngineNamePrefix">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtStruct.EngineClassName">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtStruct.Super">
            <summary>
            Super type
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtStruct.Bases">
            <summary>
            Base types
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtStruct.SuperIdentifier">
            <summary>
            Super identifier
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtStruct.BaseIdentifiers">
            <summary>
            Base identifiers
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtStruct.SuperStruct">
            <summary>
            Super struct type
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtStruct._scanForInstanceReferencedStack">
            <summary>
            Stack used to test to see if we are recursing in a ScanForInstanceReferenced call
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStruct.#ctor(EpicGames.UHT.Types.UhtType,System.Int32)">
            <summary>
            Construct a new instance
            </summary>
            <param name="outer">Outer type</param>
            <param name="lineNumber">Line number where definition begins</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStruct.IsChildOf(EpicGames.UHT.Types.UhtStruct)">
            <summary>
            Test to see if the given struct is derived from the base structure
            </summary>
            <param name="baseStruct">Base structure.</param>
            <returns>True if the given structure is the specified base or derives from the base.  If the base is null, the false is returned.</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStruct.ResolveSuper(EpicGames.UHT.Types.UhtResolvePhase)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStruct.ScanForInstancedReferenced(System.Boolean)">
            <summary>
            Check properties to see if any instances are referenced.
            This method does NOT cache the result.
            </summary>
            <param name="deepScan">If true, the ScanForInstancedReferenced method on the properties will also be called.</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStruct.ScanForInstancedReferencedInternal(System.Boolean)">
            <summary>
            Check properties to see if any instances are referenced.
            This method does NOT cache the result.
            </summary>
            <param name="deepScan">If true, the ScanForInstancedReferenced method on the properties will also be called.</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStruct.BindAndResolveSuper(EpicGames.UHT.Tokenizer.UhtToken,EpicGames.UHT.Types.UhtFindOptions)">
            <summary>
            Resolve super identifier
            </summary>
            <param name="superIdentifier">Token that represent the super</param>
            <param name="findOptions">Find options to restrict types</param>
            <exception cref="T:EpicGames.UHT.Utils.UhtException">Thrown if super can not be found</exception>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStruct.BindAndResolveBases(System.Collections.Generic.List{EpicGames.UHT.Tokenizer.UhtToken[]},EpicGames.UHT.Types.UhtFindOptions)">
            <summary>
            Resolve bases.  Unlike super, this routine will not generate an error if the type can not be found.
            Having unrecognized types is expected.
            </summary>
            <param name="baseIdentifiers">Collection of bases</param>
            <param name="findOptions">Options to restrict types being searched</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStruct.Validate(EpicGames.UHT.Types.UhtValidationOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtStruct.ValidateDocumentationPolicy(EpicGames.UHT.Types.UhtDocumentationPolicy)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtEngineType">
            <summary>
            Enumeration for all the different engine types
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEngineType.Header">
            <summary>
            Type is a header file (UhtHeader)
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEngineType.Package">
            <summary>
            Type is a package (UhtPackage)
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEngineType.Class">
            <summary>
            Type is a class (UhtClass)
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEngineType.Interface">
            <summary>
            Type is an interface (UhtClass)
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEngineType.NativeInterface">
            <summary>
            Type is a native interface (UhtClass)
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEngineType.ScriptStruct">
            <summary>
            Type is a script struct (UhtScriptStruct)
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEngineType.Enum">
            <summary>
            Type is an enumeration (UhtEnum)
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEngineType.Function">
            <summary>
            Type is a function (UhtFunction)
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEngineType.Delegate">
            <summary>
            Type is a delegate (UhtFunction)
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtEngineType.Property">
            <summary>
            Type is a property (UhtProperty)
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtEngineTypeExtensions">
            <summary>
            Collection of extension methods used to query information about the type
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEngineTypeExtensions.ShortLowercaseText(EpicGames.UHT.Types.UhtEngineType)">
            <summary>
            Get the name of the type where shared distinctions aren't made between different class and function types.
            </summary>
            <param name="engineType">The engine type in question</param>
            <returns>Lowercase name</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">If the requested type isn't supported</exception>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEngineTypeExtensions.ShortCapitalizedText(EpicGames.UHT.Types.UhtEngineType)">
            <summary>
            Get the name of the type where shared distinctions aren't made between different class and function types.
            </summary>
            <param name="engineType">The engine type in question</param>
            <returns>Capitalized name</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">If the requested type isn't supported</exception>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEngineTypeExtensions.LowercaseText(EpicGames.UHT.Types.UhtEngineType)">
            <summary>
            Get the name of the type
            </summary>
            <param name="engineType">The engine type in question</param>
            <returns>Lowercase name</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">If the requested type isn't supported</exception>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEngineTypeExtensions.CapitalizedText(EpicGames.UHT.Types.UhtEngineType)">
            <summary>
            Get the name of the type
            </summary>
            <param name="engineType">The engine type in question</param>
            <returns>Capitalized name</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">If the requested type isn't supported</exception>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEngineTypeExtensions.MustBeUnique(EpicGames.UHT.Types.UhtEngineType)">
            <summary>
            Return true if the type must be unique in the symbol table
            </summary>
            <param name="engineType">Type in question</param>
            <returns>True if it must be unique</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEngineTypeExtensions.MustBeUniqueFindOptions(EpicGames.UHT.Types.UhtEngineType)">
            <summary>
            Find options to be used when attempting to find a duplicate name
            </summary>
            <param name="engineType">Type in question</param>
            <returns>Find options to be used for search</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEngineTypeExtensions.MustNotBeReserved(EpicGames.UHT.Types.UhtEngineType)">
            <summary>
            Return true if the type must not be a reserved name.
            </summary>
            <param name="engineType">Type in question</param>
            <returns>True if the type must not have a reserved name.</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEngineTypeExtensions.HasEngineName(EpicGames.UHT.Types.UhtEngineType)">
            <summary>
            Return true if the type should be added to the engine symbol table
            </summary>
            <param name="engineType">Type in question</param>
            <returns>True if the type should be added to the symbol table</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEngineTypeExtensions.AddChildrenToSymbolTable(EpicGames.UHT.Types.UhtEngineType)">
            <summary>
            Return true if the children of the type should be added to the symbol table
            </summary>
            <param name="engineType">Type in question</param>
            <returns>True if children should be added</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtEngineTypeExtensions.FindOptions(EpicGames.UHT.Types.UhtEngineType)">
            <summary>
            Convert the engine type to find options
            </summary>
            <param name="engineType">Engine type</param>
            <returns>Find options</returns>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Engine type is invalid</exception>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtFindOptions">
            <summary>
            Options to customize how symbols are found
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFindOptions.EngineName">
            <summary>
            Search using the engine name.  This is the default if neither engine/source is specified.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFindOptions.SourceName">
            <summary>
            Search using the source name.  This can not be set if EngineName is also set.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFindOptions.Enum">
            <summary>
            Search for UhtEnum types
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFindOptions.ScriptStruct">
            <summary>
            Search for UhtScriptStruct types
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFindOptions.Class">
            <summary>
            Search for UhtClass types
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFindOptions.DelegateFunction">
            <summary>
            Search for UhtFunction types that are delegate functions
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFindOptions.Function">
            <summary>
            Search for UhtFunction types that are not delegate functions
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFindOptions.Property">
            <summary>
            Search for UhtProperty types
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFindOptions.PropertyOrFunction">
            <summary>
            Search for any properties or functions
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFindOptions.NoParents">
            <summary>
            Do not search the super chain
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFindOptions.NoOuter">
            <summary>
            Do not search the outer chain
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFindOptions.NoIncludes">
            <summary>
            Do not search include files
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFindOptions.NoGlobal">
            <summary>
            Do not do a last resort global namespace search
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFindOptions.NoSelf">
            <summary>
            Do not search the children of the starting point
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFindOptions.ParentsOnly">
            <summary>
            Only search the parent chain
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFindOptions.SelfOnly">
            <summary>
            Search only the children of the starting type
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFindOptions.CaseCompare">
            <summary>
            Case compare (usually for SourceName searches)
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFindOptions.CaselessCompare">
            <summary>
            Caseless compare (usually for EngineName searches)
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFindOptions.NamesMask">
            <summary>
            Mask of name flags
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtFindOptions.TypesMask">
            <summary>
            Mask of type flags
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtFindOptionsExtensions">
            <summary>
            Helper methods for testing flags.  These methods perform better than the generic HasFlag which hits
            the GC and stalls.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFindOptionsExtensions.HasAnyFlags(EpicGames.UHT.Types.UhtFindOptions,EpicGames.UHT.Types.UhtFindOptions)">
            <summary>
            Test to see if any of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if any of the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFindOptionsExtensions.HasAllFlags(EpicGames.UHT.Types.UhtFindOptions,EpicGames.UHT.Types.UhtFindOptions)">
            <summary>
            Test to see if all of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if all the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtFindOptionsExtensions.HasExactFlags(EpicGames.UHT.Types.UhtFindOptions,EpicGames.UHT.Types.UhtFindOptions,EpicGames.UHT.Types.UhtFindOptions)">
            <summary>
            Test to see if a specific set of flags have a specific value.
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <param name="matchFlags">Expected value of the tested flags</param>
            <returns>True if the given flags have a specific value.</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtValidationOptions">
            <summary>
            Options during validation checks
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtValidationOptions.None">
            <summary>
            No validation options
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtValidationOptions.Deprecated">
            <summary>
            Test to see if any referenced types have been deprecated.  This should not
            be set when the parent object or property has already been marked as deprecated.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtValidationOptions.Shadowing">
            <summary>
            Test to see if the name of the property conflicts with another property in the super chain
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtValidationOptions.IsKey">
            <summary>
            The property is part of a key in a TMap
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtValidationOptions.IsValue">
            <summary>
            The property is part of a value in a TArray, TSet, or TMap
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtValidationOptions.IsKeyOrValue">
            <summary>
            The property is either a key or a value part of a TArray, TSet, or TMap
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtValidationOptionsExtensions">
            <summary>
            Helper methods for testing flags.  These methods perform better than the generic HasFlag which hits
            the GC and stalls.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtValidationOptionsExtensions.HasAnyFlags(EpicGames.UHT.Types.UhtValidationOptions,EpicGames.UHT.Types.UhtValidationOptions)">
            <summary>
            Test to see if any of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if any of the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtValidationOptionsExtensions.HasAllFlags(EpicGames.UHT.Types.UhtValidationOptions,EpicGames.UHT.Types.UhtValidationOptions)">
            <summary>
            Test to see if all of the specified flags are set
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <returns>True if all the flags are set</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtValidationOptionsExtensions.HasExactFlags(EpicGames.UHT.Types.UhtValidationOptions,EpicGames.UHT.Types.UhtValidationOptions,EpicGames.UHT.Types.UhtValidationOptions)">
            <summary>
            Test to see if a specific set of flags have a specific value.
            </summary>
            <param name="inFlags">Current flags</param>
            <param name="testFlags">Flags to test for</param>
            <param name="matchFlags">Expected value of the tested flags</param>
            <returns>True if the given flags have a specific value.</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtAccessSpecifier">
            <summary>
            Access specifier for type
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtAccessSpecifier.None">
            <summary>
            No access specifier seen
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtAccessSpecifier.Public">
            <summary>
            Public type
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtAccessSpecifier.Private">
            <summary>
            Private type
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtAccessSpecifier.Protected">
            <summary>
            Protected type
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtResolvePhase">
            <summary>
            Requested resolve phase
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtResolvePhase.None">
            <summary>
            Initial resolve phase
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtResolvePhase.InvalidCheck">
            <summary>
            Check for any type that is invalid.  Invalid items will be removed from the children. 
            Used to detect things that looked like native interfaces but no interface was found
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtResolvePhase.Bases">
            <summary>
            Resolve any super references
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtResolvePhase.Properties">
            <summary>
            Resolve property types that reference other types
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtResolvePhase.Final">
            <summary>
            Final resolve phase for anything that needs fully resolved properties.
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtDocumentationPolicy">
            <summary>
            Flags for required documentation
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtDocumentationPolicy.PolicySet">
            <summary>
            If true, this is a valid documentation policy that should be respected
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtDocumentationPolicy.ClassOrStructCommentRequired">
            <summary>
            A tool tip must be defined
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtDocumentationPolicy.FunctionToolTipsRequired">
            <summary>
            Functions must have a tool tip
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtDocumentationPolicy.MemberToolTipsRequired">
            <summary>
            Property members must have a tool tip
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtDocumentationPolicy.ParameterToolTipsRequired">
            <summary>
            Function parameters must have a tool tip
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtDocumentationPolicy.FloatRangesRequired">
            <summary>
            Float properties must have a range specified
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtDocumentationPolicy.TryGet(System.String,EpicGames.UHT.Types.UhtDocumentationPolicy@)">
            <summary>
            Return the documentation policy given the name
            </summary>
            <param name="documentationPolicyName">Name of the policy</param>
            <param name="policy">Policy settings</param>
            <returns>True if the name is valid, false if not</returns>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtType">
            <summary>
            Base type for all UHT types.
            These mostly map to UnrealEngine types.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Types.UhtType.s_emptyTypeList">
            <summary>
            Empty list of type used when children are requested but no children have been added.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtType.Session">
            <summary>
            All UHT runs are associated with a given session.  The session holds all the global information for a run.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtType.TypeIndex">
            <summary>
            Every type in a session is assigned a unique, non-zero id.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtType.Outer">
            <summary>
            The outer object containing this type.  For example, the header file would be the outer for a class defined in the global scope.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtType.Package">
            <summary>
            The owning package of the type
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtType.HeaderFile">
            <summary>
            The header file containing the type
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtType.SourceName">
            <summary>
            The name of the type as it appears in the source file
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtType.EngineName">
            <summary>
            The name of the type as used by the engines type system.  If not set, will default to the source name
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtType.EngineType">
            <summary>
            Simple enumeration that can be used to detect the different types of objects
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtType.EngineClassName">
            <summary>
            The name of the engine's class for this type
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtType.Deprecated">
            <summary>
            Return true if the type has been deprecated
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtType.LineNumber">
            <summary>
            The line number of where the definition began
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtType.FullName">
            <summary>
            Return a combination of the engine type name followed by the path name of the type
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtType.PathName">
            <summary>
            Return the path name of the type which includes all parent outer objects excluding the header file
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtType.DocumentationPolicyName">
            <summary>
            Return the name of the documentation policy to be used
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtType.SpecifierValidatorTable">
            <summary>
            Return the specifier validation table to be used to validate the meta data on this type
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtType.MetaData">
            <summary>
            Meta data associated with the type
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtType.Children">
            <summary>
            Children types of this type
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.ToString">
            <summary>
            Helper to string method
            </summary>
            <returns></returns>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtType.MessageSession">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtType.MessageSource">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Types.UhtType.MessageLineNumber">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.#ctor(EpicGames.UHT.Utils.UhtSession)">
            <summary>
            Construct the base type information.  This constructor is used exclusively by UHTPackage which is at 
            the root of all type hierarchies.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.#ctor(EpicGames.UHT.Types.UhtType,System.Int32,EpicGames.UHT.Types.UhtMetaData)">
            <summary>
            Construct instance of the type given a parent type.
            </summary>
            <param name="outer">The outer type of the type being constructed.  For example, a class defined in a given header will have the header as the outer.</param>
            <param name="lineNumber">The line number in the source file where the type was defined.</param>
            <param name="metaData">Optional meta data to be associated with the type.</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.AddChild(EpicGames.UHT.Types.UhtType)">
            <summary>
            Add a type as a child
            </summary>
            <param name="child">The child to be added.</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.DetachChildren">
            <summary>
            Return the list of children attached to the type.  The 
            list associated with the type is cleared.
            </summary>
            <returns>The current list of children</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.AddChildren(System.Collections.Generic.List{EpicGames.UHT.Types.UhtType})">
            <summary>
            Merge the list children into the type.  The child's outer is set.
            </summary>
            <param name="children">List of children to add.</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.Resolve(EpicGames.UHT.Types.UhtResolvePhase)">
            <summary>
            Resolve the type.  To customize behavior, override ResolveSuper, ResolveSelf, or ResolveChildren.
            </summary>
            <param name="phase">Resolution phase</param>
            <returns>False if the type fails any invalid checks during InvalidPhase check.</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.ResolveSuper(EpicGames.UHT.Types.UhtResolvePhase)">
            <summary>
            Resolve any super types
            </summary>
            <param name="phase">Resolution phase</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.ResolveSelf(EpicGames.UHT.Types.UhtResolvePhase)">
            <summary>
            Resolve self
            </summary>
            <param name="phase">Resolution phase</param>
            <returns>False if the type fails any invalid checks during InvalidPhase check.</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.ResolveChildren(EpicGames.UHT.Types.UhtResolvePhase)">
            <summary>
            Resolve children
            </summary>
            <param name="phase">Resolution phase</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.FindType(EpicGames.UHT.Types.UhtFindOptions,System.String,EpicGames.UHT.Utils.IUhtMessageSite,System.Int32)">
            <summary>
            Find the given type in the type hierarchy
            </summary>
            <param name="options">Options controlling what is searched</param>
            <param name="name">Name of the type.</param>
            <param name="messageSite">If supplied, then a error message will be generated if the type can not be found</param>
            <param name="lineNumber">Source code line number requesting the lookup.</param>
            <returns>The located type of null if not found</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.FindType(EpicGames.UHT.Types.UhtFindOptions,EpicGames.UHT.Tokenizer.UhtToken@,EpicGames.UHT.Utils.IUhtMessageSite)">
            <summary>
            Find the given type in the type hierarchy
            </summary>
            <param name="options">Options controlling what is searched</param>
            <param name="name">Name of the type.</param>
            <param name="messageSite">If supplied, then a error message will be generated if the type can not be found</param>
            <returns>The located type of null if not found</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.FindType(EpicGames.UHT.Types.UhtFindOptions,EpicGames.UHT.Tokenizer.UhtTokenList,EpicGames.UHT.Utils.IUhtMessageSite,System.Int32)">
            <summary>
            Find the given type in the type hierarchy
            </summary>
            <param name="options">Options controlling what is searched</param>
            <param name="identifiers">Enumeration of identifiers.</param>
            <param name="messageSite">If supplied, then a error message will be generated if the type can not be found</param>
            <param name="lineNumber">Source code line number requesting the lookup.</param>
            <returns>The located type of null if not found</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.FindType(EpicGames.UHT.Types.UhtFindOptions,EpicGames.UHT.Tokenizer.UhtToken[],EpicGames.UHT.Utils.IUhtMessageSite,System.Int32)">
            <summary>
            Find the given type in the type hierarchy
            </summary>
            <param name="options">Options controlling what is searched</param>
            <param name="identifiers">Enumeration of identifiers.</param>
            <param name="messageSite">If supplied, then a error message will be generated if the type can not be found</param>
            <param name="lineNumber">Source code line number requesting the lookup.</param>
            <returns>The located type of null if not found</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.Validate(EpicGames.UHT.Types.UhtValidationOptions)">
            <summary>
            Validate the type settings
            </summary>
            <param name="options">Validation options</param>
            <returns>Updated validation options.  This will be used to validate the children.</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.ValidateDocumentationPolicy(EpicGames.UHT.Types.UhtDocumentationPolicy)">
            <summary>
            Validate the documentation policy
            </summary>
            <param name="policy">The expected documentation policy</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.ValidateType(EpicGames.UHT.Types.UhtType,EpicGames.UHT.Types.UhtValidationOptions)">
            <summary>
            Validate the given type.  Validates itself and the children
            </summary>
            <param name="type">Type to validate</param>
            <param name="options">Validation options</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.AppendPathName(System.Text.StringBuilder,EpicGames.UHT.Types.UhtType)">
            <summary>
            Return the path name of the type which includes the outers
            </summary>
            <param name="builder">Destination builder</param>
            <param name="stopOuter">Type to stop at when generating the path</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.AppendFullName(System.Text.StringBuilder)">
            <summary>
            Get the full type name which is the engine class name followed by the path name
            </summary>
            <param name="builder">Destination builder</param>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.GetDisplayNameText">
            <summary>
            Finds the localized display name or native display name as a fallback.
            </summary>
            <returns>The display name for this object.</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.GetToolTipText(System.Boolean)">
            <summary>
            Finds the localized tooltip or native tooltip as a fallback.
            </summary>
            <param name="shortToolTip">Look for a shorter version of the tooltip (falls back to the long tooltip if none was specified)</param>
            <returns>The tooltip for this object.</returns>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtType.CollectReferences(EpicGames.UHT.Utils.IUhtReferenceCollector)">
            <summary>
            Collect all the references for the type
            </summary>
            <param name="collector">Object collecting the references</param>
        </member>
        <member name="T:EpicGames.UHT.Types.UhtTypeStringBuilderExtensions">
            <summary>
            String builder extensions for UhtTypes
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Types.UhtTypeStringBuilderExtensions.AppendOuterNames(System.Text.StringBuilder,EpicGames.UHT.Types.UhtType)">
            <summary>
            Append all of the outer names associated with the type
            </summary>
            <param name="builder">Output string builder</param>
            <param name="outer">Outer to be appended</param>
            <returns>Output string builder</returns>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtBuffer">
            <summary>
            Cached character buffer system.
            
            Invoke UhtBuffer.Borrow method to get a buffer of the given size.
            Invoke UhtBuffer.Return to return the buffer to the cache.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtBuffer.MinSize">
            <summary>
            Any requests of the given size or smaller will be placed in bucket zero with the given size.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtBuffer.s_buckedAdjustment">
            <summary>
            Adjustment to the bucket index to account for the minimum bucket size
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtBuffer.s_bucketCount">
            <summary>
            Total number of supported buckets
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtBuffer.s_lookAsideArray">
            <summary>
            Bucket lookaside list
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtBuffer.Bucket">
            <summary>
            The bucket index associated with the buffer
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtBuffer.NextBuffer">
            <summary>
            Single list link to the next cached buffer
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtBuffer.Block">
            <summary>
            The backing character block.  The size of the array will normally be larger than the 
            requested size.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtBuffer.Memory">
            <summary>
            Memory region sized to the requested size
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtBuffer.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a new buffer
            </summary>
            <param name="size">The initial size of the buffer</param>
            <param name="bucket">The bucket associated with the buffer</param>
            <param name="bucketSize">The size all blocks in this bucket</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtBuffer.Reset(System.Int32)">
            <summary>
            Reset the memory region to the given size
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtBuffer.Borrow(System.Int32)">
            <summary>
            Borrow a new buffer of the given size
            </summary>
            <param name="size">Size of the buffer</param>
            <returns>Buffer that should be returned with a call to Return</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtBuffer.Borrow(System.Text.StringBuilder)">
            <summary>
            Return a buffer initialized with the string builder.
            </summary>
            <param name="builder">Source builder content</param>
            <returns>Buffer that should be returned with a call to Return</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtBuffer.Borrow(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Return a buffer initialized with the string builder sub string.
            </summary>
            <param name="builder">Source builder content</param>
            <param name="startIndex">Starting index in the builder</param>
            <param name="length">Length of the content</param>
            <returns>Buffer that should be returned with a call to Return</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtBuffer.Return(EpicGames.UHT.Utils.UhtBuffer)">
            <summary>
            Return the buffer to the cache.  The buffer should no longer be accessed.
            </summary>
            <param name="buffer">The buffer to be returned.</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtBuffer.BorrowInternal(System.Int32,System.Int32,System.Int32)">
            <summary>
            Internal helper to allocate a buffer
            </summary>
            <param name="size">The initial size of the buffer</param>
            <param name="bucket">The bucket associated with the buffer</param>
            <param name="bucketSize">The size all blocks in this bucket</param>
            <returns>The allocated buffer</returns>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtBorrowBuffer">
            <summary>
            Helper class for using pattern to borrow and return a buffer.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtBorrowBuffer.Buffer">
            <summary>
            The borrowed buffer
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtBorrowBuffer.#ctor(System.Int32)">
            <summary>
            Borrow a buffer with the given size
            </summary>
            <param name="size">The size to borrow</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtBorrowBuffer.#ctor(System.Text.StringBuilder)">
            <summary>
            Borrow a buffer populated with the builder contents
            </summary>
            <param name="builder">Initial contents of the buffer</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtBorrowBuffer.#ctor(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Borrow a buffer populated with the builder contents
            </summary>
            <param name="builder">Initial contents of the buffer</param>
            <param name="startIndex">Starting index into the builder</param>
            <param name="length">Length of the data in the builder</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtBorrowBuffer.Dispose">
            <summary>
            Return the borrowed buffer to the cache
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtByteBuffer">
            <summary>
            Cached character buffer system.
            
            Invoke UhtBuffer.Borrow method to get a buffer of the given size.
            Invoke UhtBuffer.Return to return the buffer to the cache.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtByteBuffer.MinSize">
            <summary>
            Any requests of the given size or smaller will be placed in bucket zero with the given size.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtByteBuffer.s_buckedAdjustment">
            <summary>
            Adjustment to the bucket index to account for the minimum bucket size
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtByteBuffer.s_bucketCount">
            <summary>
            Total number of supported buckets
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtByteBuffer.s_lookAsideArray">
            <summary>
            Bucket lookaside list
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtByteBuffer.Bucket">
            <summary>
            The bucket index associated with the buffer
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtByteBuffer.NextBuffer">
            <summary>
            Single list link to the next cached buffer
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtByteBuffer.Block">
            <summary>
            The backing character block.  The size of the array will normally be larger than the 
            requested size.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtByteBuffer.Memory">
            <summary>
            Memory region sized to the requested size
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtByteBuffer.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a new buffer
            </summary>
            <param name="size">The initial size of the buffer</param>
            <param name="bucket">The bucket associated with the buffer</param>
            <param name="bucketSize">The size all blocks in this bucket</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtByteBuffer.Reset(System.Int32)">
            <summary>
            Reset the memory region to the given size
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtByteBuffer.Borrow(System.Int32)">
            <summary>
            Borrow a new buffer of the given size
            </summary>
            <param name="size">Size of the buffer</param>
            <returns>Buffer that should be returned with a call to Return</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtByteBuffer.Return(EpicGames.UHT.Utils.UhtByteBuffer)">
            <summary>
            Return the buffer to the cache.  The buffer should no longer be accessed.
            </summary>
            <param name="buffer">The buffer to be returned.</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtByteBuffer.BorrowInternal(System.Int32,System.Int32,System.Int32)">
            <summary>
            Internal helper to allocate a buffer
            </summary>
            <param name="size">The initial size of the buffer</param>
            <param name="bucket">The bucket associated with the buffer</param>
            <param name="bucketSize">The size all blocks in this bucket</param>
            <returns>The allocated buffer</returns>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtBorrowByteBuffer">
            <summary>
            Helper class for using pattern to borrow and return a buffer.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtBorrowByteBuffer.Buffer">
            <summary>
            The borrowed buffer
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtBorrowByteBuffer.#ctor(System.Int32)">
            <summary>
            Borrow a buffer with the given size
            </summary>
            <param name="size">The size to borrow</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtBorrowByteBuffer.Dispose">
            <summary>
            Return the borrowed buffer to the cache
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtPointerMemberBehavior">
            <summary>
            Describes how pointers will generate warnings or errors
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtPointerMemberBehavior.Disallow">
            <summary>
            An error will be generated.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtPointerMemberBehavior.AllowSilently">
            <summary>
            Ignore the pointer
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtPointerMemberBehavior.AllowAndLog">
            <summary>
            Log a warning about the pointer
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Utils.IUhtConfig">
            <summary>
            Interface for accessing configuration data.  Since UnrealBuildTool depends on EpicGames.UHT and all 
            of the configuration support exists in UBT, configuration data must be accessed through an interface.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtConfig.DefaultGeneratedCodeVersion">
            <summary>
            Default version of generated code. Defaults to oldest possible, unless specified otherwise in config.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtConfig.EngineNativePointerMemberBehavior">
            <summary>
            Pointer warning for native pointers in the engine
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtConfig.EngineObjectPtrMemberBehavior">
            <summary>
            Pointer warning for object pointers in the engine
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtConfig.EnginePluginNativePointerMemberBehavior">
            <summary>
            Pointer warning for native pointers in engine plugins
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtConfig.EnginePluginObjectPtrMemberBehavior">
            <summary>
            Pointer warning for object pointers in engine plugins
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtConfig.NonEngineNativePointerMemberBehavior">
            <summary>
            Pointer warning for native pointers outside the engine
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtConfig.NonEngineObjectPtrMemberBehavior">
            <summary>
            Pointer warning for object pointers outside the engine
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtConfig.ShowDeprecations">
            <summary>
            If true, deprecation warnings should be shown
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtConfig.AreRigVMUObjectProeprtiesEnabled">
            <summary>
            If true, UObject properties are enabled in RigVM
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtConfig.AreRigVMUInterfaceProeprtiesEnabled">
            <summary>
            If true, UInterface properties are enabled in RigVM
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtConfig.RedirectTypeIdentifier(EpicGames.UHT.Tokenizer.UhtToken@)">
            <summary>
            If the token references a remapped identifier, update the value in the token 
            </summary>
            <param name="token">Token to be remapped</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtConfig.RedirectMetaDataKey(System.String,System.String@)">
            <summary>
            Return the remapped key or the existing key
            </summary>
            <param name="key">Key to be remapped.</param>
            <param name="newKey">Resulting key name</param>
            <returns>True if the key has been remapped and has changed.</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtConfig.IsValidUnits(EpicGames.Core.StringView)">
            <summary>
            Test to see if the given units are valid.
            </summary>
            <param name="units">Units to test</param>
            <returns>True if the units are valid, false if not</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtConfig.IsStructWithTPrefix(EpicGames.Core.StringView)">
            <summary>
            Test to see if the structure name should be using a "T" prefix.
            </summary>
            <param name="name">Name of the structure to test without any prefix.</param>
            <returns>True if the structure should have a "T" prefix.</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtConfig.FindDelegateParameterCount(EpicGames.Core.StringView)">
            <summary>
            Test to see if the given macro has a parameter count as part of the name.
            </summary>
            <param name="delegateMacro">Macro to test</param>
            <returns>-1 if the macro does not contain a parameter count.  The number of parameters minus one.</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtConfig.GetDelegateParameterCountString(System.Int32)">
            <summary>
            Get the parameter count string associated with the given index
            </summary>
            <param name="index">Index from a prior call to FindDelegateParameterCount or -1.</param>
            <returns>Parameter count string or an empty string if Index is -1.</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtConfig.IsExporterEnabled(System.String)">
            <summary>
            Test to see if the exporter is enabled
            </summary>
            <param name="name">Name of the exporter</param>
            <returns>True if the exporter is enabled, false if not</returns>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtException">
            <summary>
            Compiler exception that immediately stops the processing of the current header file.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtException.UhtMessage">
            <summary>
            The generated message
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtException.#ctor">
            <summary>
            Internal do nothing constructor
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtException.#ctor(System.String)">
            <summary>
            Exception with a simple message.  Context will be the current header file.
            </summary>
            <param name="message">Text of the error</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtException.#ctor(EpicGames.UHT.Utils.IUhtMessageSite,System.String,System.Object)">
            <summary>
            Exception with a simple message.  Context from the given message site.
            </summary>
            <param name="messageSite">Site generating the exception</param>
            <param name="message">Text of the error</param>
            <param name="extraContext">Addition context to be appended to the error message</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtException.#ctor(EpicGames.UHT.Utils.IUhtMessageSite,System.Int32,System.String,System.Object)">
            <summary>
            Make an exception to be thrown
            </summary>
            <param name="messageSite">Message site to be associated with the exception</param>
            <param name="lineNumber">Line number of the error</param>
            <param name="message">Text of the error</param>
            <param name="extraContext">Addition context to be appended to the error message</param>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtException.Message">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtTokenException">
            <summary>
            Exception where the current token isn't what was expected
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtTokenException.#ctor(EpicGames.UHT.Utils.IUhtMessageSite,EpicGames.UHT.Tokenizer.UhtToken,System.Object,System.Object)">
            <summary>
            Make a parsing error for when there is a mismatch between the expected token and what was parsed.
            </summary>
            <param name="messageSite">Message site to be associated with the exception</param>
            <param name="got">The parsed token.  Support for EOF also provided.</param>
            <param name="expected">What was expected.</param>
            <param name="extraContext">Extra context to be appended to the error message</param>
            <returns>The exception object to throw</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtTokenException.FormatExtraContext(System.Object)">
            <summary>
            Format any extra context supplied by the caller or the message site
            </summary>
            <param name="extraContext">Additional caller supplied context</param>
            <returns></returns>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtIceException">
            <summary>
            Internal compiler error exception
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtIceException.#ctor(System.String)">
            <summary>
            Exception with a simple message.  Context will be the current header file.
            </summary>
            <param name="message">Text of the error</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtExportTaskDelegate">
            <summary>
            Delegate invoked by a factory
            </summary>
            <param name="factory">Invoking factory</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.IUhtExportFactory">
            <summary>
            Factory object used to generate export tasks
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtExportFactory.Session">
            <summary>
            Session being run
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtExportFactory.PluginModule">
            <summary>
            If this exporter is from a plugin, this points to the module of the plugin
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtExportFactory.CreateTask(System.Collections.Generic.List{System.Threading.Tasks.Task},EpicGames.UHT.Utils.UhtExportTaskDelegate)">
            <summary>
            Create a task
            </summary>
            <param name="prereqs">Tasks that must be completed prior to this task running</param>
            <param name="action">Action to be invoked to generate the output(s)</param>
            <returns>Task object or null if the task was immediately executed.</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtExportFactory.CreateTask(EpicGames.UHT.Utils.UhtExportTaskDelegate)">
            <summary>
            Create a task
            </summary>
            <param name="action">Action to be invoked to generate the output(s)</param>
            <returns>Task object or null if the task was immediately executed.</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtExportFactory.CommitOutput(System.String,System.Text.StringBuilder)">
            <summary>
            Commit the contents of the string builder as the output.
            If you have a string builder, use this method so that a 
            temporary buffer can be used.
            </summary>
            <param name="filePath">Destination file path</param>
            <param name="builder">Source for the content</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtExportFactory.CommitOutput(System.String,EpicGames.Core.StringView)">
            <summary>
            Commit the value of the string as the output
            </summary>
            <param name="filePath">Destination file path</param>
            <param name="output">Output to commit</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtExportFactory.MakePath(EpicGames.UHT.Types.UhtHeaderFile,System.String)">
            <summary>
            Make a path for an output based on the header file name.
            </summary>
            <param name="headerFile">Header file being exported.</param>
            <param name="suffix">Suffix to be added to the file name.</param>
            <returns>Output file path</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtExportFactory.MakePath(EpicGames.UHT.Types.UhtPackage,System.String)">
            <summary>
            Make a path for an output based on the package name.
            </summary>
            <param name="package">Package being exported</param>
            <param name="suffix">Suffix to be added to the file name.</param>
            <returns>Output file path</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtExportFactory.MakePath(System.String,System.String)">
            <summary>
            Make a path for the given file name and extension.  This is only valid for plugins.
            </summary>
            <param name="fileName">Name of the file</param>
            <param name="extension">Extension to add to the file</param>
            <returns>Output file path</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtExportFactory.AddExternalDependency(System.String)">
            <summary>
            Add an external dependency to the given file path
            </summary>
            <param name="filePath">External dependency to add</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtFCString">
            <summary>
            Collection of helper methods to emulate UHT string functions
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtFCString.SubObjectDelimiter">
            <summary>
            Delimiter between the subobjects
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtFCString.ToBool(EpicGames.Core.StringView)">
            <summary>
            Test to see if the string is a boolean
            </summary>
            <param name="value">Boolean to test</param>
            <returns>True if the value is true</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtFCString.ToBool(System.String)">
            <summary>
            Test to see if the string is a boolean
            </summary>
            <param name="value">Boolean to test</param>
            <returns>True if the value is true</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtFCString.IsDigit(System.Char)">
            <summary>
            Test to see if the character is a digit
            </summary>
            <param name="c">Character to test</param>
            <returns>True if it is</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtFCString.IsAlpha(System.Char)">
            <summary>
            Test to see if the character is an alphabet character
            </summary>
            <param name="c">Character to test</param>
            <returns>True if it is</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtFCString.IsAlnum(System.Char)">
            <summary>
            Test to see if the character is a digit or alphabet character
            </summary>
            <param name="c">Character to test</param>
            <returns>True if it is</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtFCString.IsHexAlphaDigit(System.Char)">
            <summary>
            Test to see if the character is a hex digit (A-F)
            </summary>
            <param name="c">Character to test</param>
            <returns>True if it is</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtFCString.IsHexDigit(System.Char)">
            <summary>
            Test to see if the character is a hex digit (0-9a-f)
            </summary>
            <param name="c">Character to test</param>
            <returns>True if it is</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtFCString.IsWhitespace(System.Char)">
            <summary>
            Test to see if the character is whitespace
            </summary>
            <param name="c">Character to test</param>
            <returns>True if it is</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtFCString.IsSign(System.Char)">
            <summary>
            Test to see if the character is a sign
            </summary>
            <param name="c">Character to test</param>
            <returns>True if it is</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtFCString.IsHexMarker(System.Char)">
            <summary>
            Test to see if the character is a hex marker (xX)
            </summary>
            <param name="c">Character to test</param>
            <returns>True if it is</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtFCString.IsFloatMarker(System.Char)">
            <summary>
            Test to see if the character is a float marker (fF)
            </summary>
            <param name="c">Character to test</param>
            <returns>True if it is</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtFCString.IsExponentMarker(System.Char)">
            <summary>
            Test to see if the character is an exponent marker (eE)
            </summary>
            <param name="c">Character to test</param>
            <returns>True if it is</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtFCString.IsUnsignedMarker(System.Char)">
            <summary>
            Test to see if the character is an unsigned marker (uU)
            </summary>
            <param name="c">Character to test</param>
            <returns>True if it is</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtFCString.IsLongMarker(System.Char)">
            <summary>
            Test to see if the character is a long marker (lL)
            </summary>
            <param name="c">Character to test</param>
            <returns>True if it is</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtFCString.IsNumeric(System.ReadOnlySpan{System.Char})">
            <summary>
            Test to see if the span is a numeric value
            </summary>
            <param name="span">Span to test</param>
            <returns>True if it is</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtFCString.IsLinebreak(System.Char)">
            <summary>
            Test to see if the character is a linebreak character
            </summary>
            <param name="c">Character to test</param>
            <returns>True if it is</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtFCString.UnescapeText(System.String)">
            <summary>
            Return an unescaped string
            </summary>
            <param name="text">Text to unescape</param>
            <returns>Resulting string</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtFCString.TabsToSpaces(System.ReadOnlyMemory{System.Char},System.Int32,System.Boolean)">
            <summary>
            Replace tabs to spaces in a string containing only a single line.
            </summary>
            <param name="input">Input string</param>
            <param name="tabSpacing">Number of spaces to exchange for tabs</param>
            <param name="emulateCrBug">Due to a bug in UE ConvertTabsToSpacesInline, any \n is considered part of the line length.</param>
            <returns>Resulting string or the original string if the string didn't contain any spaces.</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtFCString.TabsToSpaces(System.ReadOnlySpan{System.Char},System.Int32,System.Boolean,System.Int32,System.Text.StringBuilder)">
            <summary>
            Replace tabs to spaces in a string containing zero or more lines.
            </summary>
            <param name="span">Input string to convert</param>
            <param name="tabSpacing">Number of spaces to exchange for tabs</param>
            <param name="emulateCrBug">Due to a bug in UE ConvertTabsToSpacesInline, any \n is considered part of the line length.</param>
            <param name="tabIndex">Initial tab index</param>
            <param name="builder">Destination string builder</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.IUhtFileManager">
            <summary>
            Interface used to read/write files
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtFileManager.GetFullFilePath(System.String)">
            <summary>
            Return the full file path for a partial path
            </summary>
            <param name="filePath">The partial file path</param>
            <returns>The full file path</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtFileManager.ReadSource(System.String,EpicGames.UHT.Utils.UhtSourceFragment@)">
            <summary>
            Read the given source file
            </summary>
            <param name="filePath">File path</param>
            <param name="fragment">Read fragment information</param>
            <returns>True if the file was read</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtFileManager.ReadOutput(System.String)">
            <summary>
            Read the given source file
            </summary>
            <param name="filePath">File path</param>
            <returns>Buffer containing the read data or null if not found.  The returned buffer must be returned to the cache via a call to UhtBuffer.Return</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtFileManager.WriteOutput(System.String,System.ReadOnlySpan{System.Char})">
            <summary>
            Write the given contents to the file
            </summary>
            <param name="filePath">Path to write to</param>
            <param name="contents">Contents to write</param>
            <returns>True if the source was written</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtFileManager.RenameOutput(System.String,System.String)">
            <summary>
            Rename the given file
            </summary>
            <param name="oldFilePath">Old file path name</param>
            <param name="newFilePath">New file path name</param>
            <returns>True if the file was renamed</returns>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtStdFileManager">
            <summary>
            Implementation of a file manager that reads/writes from disk
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStdFileManager.#ctor">
            <summary>
            Construct a new file manager
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStdFileManager.GetFullFilePath(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStdFileManager.ReadSource(System.String,EpicGames.UHT.Utils.UhtSourceFragment@)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStdFileManager.ReadOutput(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStdFileManager.WriteOutput(System.String,System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStdFileManager.RenameOutput(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStdFileManager.ReadFile(System.String,EpicGames.Core.StringView@)">
            <summary>
            Read the given source file
            </summary>
            <param name="filePath">Full file path</param>
            <param name="contents">Contents of the file</param>
            <returns>True if the file was read, false if not</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStdFileManager.GetEncoding(System.ReadOnlySpan{System.Byte},System.Int32@)">
            <summary>
            Get the encoding and number of bytes to skip at the start of the buffer
            </summary>
            <param name="bytes">Bytes to scan for a BOM</param>
            <param name="skipBytes">Number of bytes to skip</param>
            <returns>The encoding</returns>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtHash">
            <summary>
            Support for generating hash values using the existing UHT algorithms
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtHash.Begin">
            <summary>
            Start the hash computation
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtHash.Add(System.ReadOnlySpan{System.Char})">
            <summary>
            Add a span of text to the current hash value
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtHash.End">
            <summary>
            Return the final hash value
            </summary>
            <returns>Final hash value</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtHash.GenenerateTextHash(System.ReadOnlySpan{System.Char})">
            <summary>
            Generate the hash value for a block of text
            </summary>
            <param name="text">Text to hash</param>
            <returns>Hash value</returns>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtMetaDataConverter">
            <summary>
            JSON converter to output the meta data
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtMetaDataConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read the JSON value
            </summary>
            <param name="reader">Source reader</param>
            <param name="typeToConvert">Type to convert</param>
            <param name="options">Serialization options</param>
            <returns>Read value</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtMetaDataConverter.Write(System.Text.Json.Utf8JsonWriter,EpicGames.UHT.Types.UhtMetaData,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write the JSON value
            </summary>
            <param name="writer">Destination writer</param>
            <param name="type">Value being written</param>
            <param name="options">Serialization options</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtTypeSourceNameJsonConverter`1">
            <summary>
            JSON converter to output the source name of a type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtTypeSourceNameJsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read the JSON value
            </summary>
            <param name="reader">Source reader</param>
            <param name="typeToConvert">Type to convert</param>
            <param name="options">Serialization options</param>
            <returns>Read value</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtTypeSourceNameJsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write the JSON value
            </summary>
            <param name="writer">Destination writer</param>
            <param name="type">Value being written</param>
            <param name="options">Serialization options</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtNullableTypeSourceNameJsonConverter`1">
            <summary>
            Read/Write type source name for an optional type value
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtNullableTypeSourceNameJsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read the JSON value
            </summary>
            <param name="reader">Source reader</param>
            <param name="typeToConvert">Type to convert</param>
            <param name="options">Serialization options</param>
            <returns>Read value</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtNullableTypeSourceNameJsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write the JSON value
            </summary>
            <param name="writer">Destination writer</param>
            <param name="type">Value being written</param>
            <param name="options">Serialization options</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtTypeReadOnlyListSourceNameJsonConverter`1">
            <summary>
            Read/Write type list source name for an optional type value
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtTypeReadOnlyListSourceNameJsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read the JSON value
            </summary>
            <param name="reader">Source reader</param>
            <param name="typeToConvert">Type to convert</param>
            <param name="options">Serialization options</param>
            <returns>Read value</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtTypeReadOnlyListSourceNameJsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,System.Collections.Generic.IReadOnlyList{`0},System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write the JSON value
            </summary>
            <param name="writer">Destination writer</param>
            <param name="collection">Value being written</param>
            <param name="options">Serialization options</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtTypeListJsonConverter`1">
            <summary>
            Serialize a list of types
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtTypeListJsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read the JSON value
            </summary>
            <param name="reader">Source reader</param>
            <param name="typeToConvert">Type to convert</param>
            <param name="options">Serialization options</param>
            <returns>Read value</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtTypeListJsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,System.Collections.Generic.List{`0},System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write the JSON value
            </summary>
            <param name="writer">Destination writer</param>
            <param name="collection">Value being written</param>
            <param name="options">Serialization options</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtNullableTypeListJsonConverter`1">
            <summary>
            Serialize a nullable list of types
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtNullableTypeListJsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read the JSON value
            </summary>
            <param name="reader">Source reader</param>
            <param name="typeToConvert">Type to convert</param>
            <param name="options">Serialization options</param>
            <returns>Read value</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtNullableTypeListJsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,System.Collections.Generic.List{`0},System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write the JSON value
            </summary>
            <param name="writer">Destination writer</param>
            <param name="collection">Value being written</param>
            <param name="options">Serialization options</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtMessageType">
            <summary>
            Type of message
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtMessageType.Error">
            <summary>
            The message is an error and goes to the log and console
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtMessageType.Warning">
            <summary>
            The message is a warning and goes to the log and console
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtMessageType.Info">
            <summary>
            The message is for information only and goes to the log and console
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtMessageType.Trace">
            <summary>
            The message is for debugging and goes to the log only
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtMessageType.Deprecation">
            <summary>
            The message is an informational message about deprecated patterns
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtMessageType.Ice">
            <summary>
            The message is an internal error and goes to the log and console
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Utils.IUhtMessageSession">
            <summary>
            A message session is the destination object for all generated messages
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtMessageSession.AddMessage(EpicGames.UHT.Utils.UhtMessage)">
            <summary>
            Add the given message
            </summary>
            <param name="message">The message to be added</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.IUhtMessageSource">
            <summary>
            A message source represents the source file where the message occurred.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtMessageSource.MessageFilePath">
            <summary>
            File path of the file being parsed
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtMessageSource.MessageFullFilePath">
            <summary>
            The full file path of being parsed
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtMessageSource.MessageIsFragment">
            <summary>
            If true, the source is a source fragment from the testing harness
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtMessageSource.MessageFragmentFilePath">
            <summary>
            If this is a fragment, this is the container file path of the fragment
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtMessageSource.MessageFragmentFullFilePath">
            <summary>
            If this is a fragment, this is the container full file path of the fragment
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtMessageSource.MessageFragmentLineNumber">
            <summary>
            If this is a fragment, this is the line number in the container file where the fragment is defined.
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Utils.IUhtMessageLineNumber">
            <summary>
            A message site can automatically provide a line number where the site was defined
            in the source.  If no line number is provided when the message is created or if the
            site doesn't support this interface, the line number of '1' will be used.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtMessageLineNumber.MessageLineNumber">
            <summary>
            Line number where the type was defined.
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Utils.IUhtMessageExtraContext">
            <summary>
            This interface provides a mechanism for things to provide more context for an error
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtMessageExtraContext.MessageExtraContext">
            <summary>
            Enumeration of objects to add as extra context.
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Utils.IUhtMessageSite">
            <summary>
            A message site is any object that can generate a message.  In general, all 
            types are also message sites. This provides a convenient method to log messages
            where the type was defined.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtMessageSite.MessageSession">
            <summary>
            Destination message session for the messages
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtMessageSite.MessageSource">
            <summary>
            Source file generating messages
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.IUhtMessageSite.MessageLineNumber">
            <summary>
            Optional line number where type was defined
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtMessage">
            <summary>
            Represents a UHT message
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtMessage.MessageType">
            <summary>
            The type of message
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtMessage.MessageSource">
            <summary>
            Optional message source for the message.  Either the MessageSource or FilePath must be set.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtMessage.FilePath">
            <summary>
            Optional file path for the message.  Either the MessageSource or FilePath must be set.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtMessage.LineNumber">
            <summary>
            Line number where error occurred.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtMessage.Message">
            <summary>
            Text of the message
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtMessage.MakeMessage(EpicGames.UHT.Utils.UhtMessageType,EpicGames.UHT.Utils.IUhtMessageSource,System.String,System.Int32,System.String)">
            <summary>
            Make a new message with the given settings
            </summary>
            <param name="messageType">Type of message</param>
            <param name="messageSource">Source of the message</param>
            <param name="filePath">File path of the message</param>
            <param name="lineNumber">Line number where message occurred</param>
            <param name="message">Text of the message</param>
            <returns>Created message</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtMessage.FormatContext(System.Object)">
            <summary>
            Format an object to be included in a message
            </summary>
            <param name="context">Contextual object</param>
            <returns>Formatted context</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtMessage.Append(System.Text.StringBuilder,EpicGames.UHT.Utils.IUhtMessageExtraContext,System.Boolean)">
            <summary>
            Append message context
            </summary>
            <param name="builder">Destination builder</param>
            <param name="messageExtraContextInterface">Extra context to append</param>
            <param name="alwaysIncludeSeparator">If true, always include the separator</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtEmptyMessageSite">
            <summary>
            A placeholder message site
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtEmptyMessageSite.MessageSession">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtEmptyMessageSite.MessageSource">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtEmptyMessageSite.MessageLineNumber">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtSimpleMessageSite">
            <summary>
            Creates a message site from a message session interface and a message source interface
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSimpleMessageSite.MessageSession">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSimpleMessageSite.MessageSource">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSimpleMessageSite.MessageLineNumber">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSimpleMessageSite.#ctor(EpicGames.UHT.Utils.IUhtMessageSession,EpicGames.UHT.Utils.IUhtMessageSource)">
            <summary>
            Create a simple message site for the given session and source
            </summary>
            <param name="messageSession">Associated message session</param>
            <param name="messageSource">Source for the messages</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtSimpleFileMessageSite">
            <summary>
            Simple message site for the given file.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSimpleFileMessageSite.MessageFilePath">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSimpleFileMessageSite.MessageFullFilePath">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSimpleFileMessageSite.MessageIsFragment">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSimpleFileMessageSite.MessageFragmentFilePath">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSimpleFileMessageSite.MessageFragmentFullFilePath">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSimpleFileMessageSite.MessageFragmentLineNumber">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSimpleFileMessageSite.#ctor(EpicGames.UHT.Utils.IUhtMessageSession,System.String)">
            <summary>
            Create a simple file site
            </summary>
            <param name="messageSession">Associated message session</param>
            <param name="filePath">File associated with the site</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtMessageSiteExtensions">
            <summary>
            Series of extensions for message sites.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtMessageSiteExtensions.GetLineNumber(EpicGames.UHT.Utils.IUhtMessageSite,System.Int32)">
            <summary>
            Get the line number generating the error
            </summary>
            <param name="messageSite">The message site generating the error.</param>
            <param name="lineNumber">An override line number</param>
            <returns>Either the overriding line number or the line number from the message site.</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtMessageSiteExtensions.LogError(EpicGames.UHT.Utils.IUhtMessageSite,System.Int32,System.String,System.Object)">
            <summary>
            Log an error
            </summary>
            <param name="messageSite">Message site associated with the message</param>
            <param name="lineNumber">Line number of the error</param>
            <param name="message">Text of the error</param>
            <param name="extraContext">Addition context to be appended to the error message</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtMessageSiteExtensions.LogError(EpicGames.UHT.Utils.IUhtMessageSite,System.String,System.Object)">
            <summary>
            Log an error
            </summary>
            <param name="messageSite">Message site associated with the message</param>
            <param name="message">Text of the error</param>
            <param name="extraContext">Addition context to be appended to the error message</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtMessageSiteExtensions.LogWarning(EpicGames.UHT.Utils.IUhtMessageSite,System.Int32,System.String,System.Object)">
            <summary>
            Log a warning
            </summary>
            <param name="messageSite">Message site associated with the message</param>
            <param name="lineNumber">Line number of the warning</param>
            <param name="message">Text of the warning</param>
            <param name="extraContext">Addition context to be appended to the error message</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtMessageSiteExtensions.LogWarning(EpicGames.UHT.Utils.IUhtMessageSite,System.String,System.Object)">
            <summary>
            Log a warning
            </summary>
            <param name="messageSite">Message site associated with the message</param>
            <param name="message">Text of the warning</param>
            <param name="extraContext">Addition context to be appended to the error message</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtMessageSiteExtensions.LogTrace(EpicGames.UHT.Utils.IUhtMessageSite,System.Int32,System.String,System.Object)">
            <summary>
            Log a message directly to the log
            </summary>
            <param name="messageSite">Message site associated with the message</param>
            <param name="lineNumber">Line number of the information</param>
            <param name="message">Text of the information</param>
            <param name="extraContext">Addition context to be appended to the error message</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtMessageSiteExtensions.LogTrace(EpicGames.UHT.Utils.IUhtMessageSite,System.String,System.Object)">
            <summary>
            Log a message directly to the log
            </summary>
            <param name="messageSite">Message site associated with the message</param>
            <param name="message">Text of the information</param>
            <param name="extraContext">Addition context to be appended to the error message</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtMessageSiteExtensions.LogInfo(EpicGames.UHT.Utils.IUhtMessageSite,System.Int32,System.String,System.Object)">
            <summary>
            Log information
            </summary>
            <param name="messageSite">Message site associated with the message</param>
            <param name="lineNumber">Line number of the information</param>
            <param name="message">Text of the information</param>
            <param name="extraContext">Addition context to be appended to the error message</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtMessageSiteExtensions.LogInfo(EpicGames.UHT.Utils.IUhtMessageSite,System.String,System.Object)">
            <summary>
            Log a information
            </summary>
            <param name="messageSite">Message site associated with the message</param>
            <param name="message">Text of the information</param>
            <param name="extraContext">Addition context to be appended to the error message</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtMessageSiteExtensions.LogDeprecation(EpicGames.UHT.Utils.IUhtMessageSite,System.Int32,System.String,System.Object)">
            <summary>
            Log deprecation
            </summary>
            <param name="messageSite">Message site associated with the message</param>
            <param name="lineNumber">Line number of the information</param>
            <param name="message">Text of the information</param>
            <param name="extraContext">Addition context to be appended to the error message</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtMessageSiteExtensions.LogDeprecation(EpicGames.UHT.Utils.IUhtMessageSite,System.String,System.Object)">
            <summary>
            Log a deprecation
            </summary>
            <param name="messageSite">Message site associated with the message</param>
            <param name="message">Text of the information</param>
            <param name="extraContext">Addition context to be appended to the error message</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtMessageSiteExtensions.LogMessage(EpicGames.UHT.Utils.UhtMessageType,EpicGames.UHT.Utils.IUhtMessageSite,System.Int32,System.String,System.Object)">
            <summary>
            Log a message
            </summary>
            <param name="messageType">Type of the message being generated</param>
            <param name="messageSite">Message site associated with the message</param>
            <param name="lineNumber">Line number of the information</param>
            <param name="message">Text of the information</param>
            <param name="extraContext">Addition context to be appended to the error message</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtTlsMessageExtraContext">
            <summary>
            Thread based message context.  Used to improve performance by avoiding allocations.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtTlsMessageExtraContext.PushExtraContext(System.Object)">
            <summary>
            Add an extra context
            </summary>
            <param name="exceptionContext"></param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtTlsMessageExtraContext.PopExtraContext">
            <summary>
            Pop the top most extra context
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtTlsMessageExtraContext.GetTls">
            <summary>
            Get the extra context associated with this thread
            </summary>
            <returns>Extra context</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtTlsMessageExtraContext.GetMessageExtraContext">
            <summary>
            Get the extra context interface
            </summary>
            <returns>Extra context interface</returns>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtMessageContext">
            <summary>
            A "using" object to automate the push/pop of extra context to the thread's current extra context
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtMessageContext.#ctor(System.Object)">
            <summary>
            Construct a new entry
            </summary>
            <param name="extraContext">Extra context to be added</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtMessageContext.Reset(System.Object)">
            <summary>
            Replace the extra context.  This replaces the top level context and thus 
            can have unexpected results if done when a more deeper context has been added
            </summary>
            <param name="extraContext">New extra context</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtMessageContext.Dispose">
            <summary>
            Dispose the object and auto-remove the added context
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtNames">
            <summary>
            Collection of common name strings
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Utils.IUhtReferenceCollector">
            <summary>
            Interface used to collect all the objects referenced by a given type.
            Not all types such as UhtPackage and UhtHeaderFile support collecting
            references due to assorted reasons.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtReferenceCollector.AddCrossModuleReference(EpicGames.UHT.Types.UhtObject,System.Boolean)">
            <summary>
            Add a cross module reference to a given object type.
            </summary>
            <param name="obj">Object type being referenced</param>
            <param name="registered">If true, the method being invoked must return the registered object.  This only applies to classes.</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtReferenceCollector.AddDeclaration(EpicGames.UHT.Types.UhtObject,System.Boolean)">
            <summary>
            Add an object declaration
            </summary>
            <param name="obj">Object in question</param>
            <param name="registered">If true, the method being invoked must return the registered object.  This only applies to classes.</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtReferenceCollector.AddSingleton(EpicGames.UHT.Types.UhtField)">
            <summary>
            Add a field as a singleton for exporting
            </summary>
            <param name="field">Field to be added</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtReferenceCollector.AddExportType(EpicGames.UHT.Types.UhtField)">
            <summary>
            Add a field as a type being exported
            </summary>
            <param name="field">Field to be added</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.IUhtReferenceCollector.AddForwardDeclaration(System.String)">
            <summary>
            Add a forward declaration.  The string can contain multiple declarations but must only exist on one line.
            </summary>
            <param name="declaration">The declarations to add</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.GetReferenceStringDelegate">
            <summary>
            Delegate used to fetch the string associated with a reference
            </summary>
            <param name="objectIndex">Index of the referenced object</param>
            <param name="registered">If true return the registered string, otherwise the unregistered string.  Classes have an unregistered version.</param>
            <returns>The requested string</returns>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtUniqueReferenceCollection">
            <summary>
            Maintains a list of referenced object indices.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtUniqueReferenceCollection.Uniques">
            <summary>
            Collection use to quickly detect if a reference is already in the collection
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtUniqueReferenceCollection.References">
            <summary>
            List of all unique reference keys.  Use UngetKey to get the object index and the flag.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtUniqueReferenceCollection.GetKey(EpicGames.UHT.Types.UhtObject,System.Boolean)">
            <summary>
            Return an encoded key that represents the object and registered flag. 
            If the object has the alternate object set (i.e. native interfaces), then
            that object's index is used to generate the key.
            </summary>
            <param name="obj">Object being referenced</param>
            <param name="registered">If true, then the API that ensures the object is registered is returned.</param>
            <returns>Integer key value.</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtUniqueReferenceCollection.UngetKey(System.Int32,System.Int32@,System.Boolean@)">
            <summary>
            Given a key, return the object index and registered flag
            </summary>
            <param name="key">The key in question</param>
            <param name="objectIndex">Index of the referenced object</param>
            <param name="registered">True if referencing the registered API.</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtUniqueReferenceCollection.Add(EpicGames.UHT.Types.UhtObject,System.Boolean)">
            <summary>
            Add the given object to the references
            </summary>
            <param name="obj">Object to be added</param>
            <param name="registered">True if the registered API is being returned.</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtUniqueReferenceCollection.GetSortedReferences(EpicGames.UHT.Utils.GetReferenceStringDelegate)">
            <summary>
            Return the collection of references sorted by the API string returned by the delegate.
            </summary>
            <param name="referenceStringDelegate">Delegate to invoke to return the requested object API string</param>
            <returns>Read only memory region of all the string.</returns>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtReferenceCollector">
            <summary>
            Standard implementation of the reference collector interface
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtReferenceCollector.CrossModule">
            <summary>
            Collection of unique cross module references
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtReferenceCollector.Declaration">
            <summary>
            Collection of unique declarations
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtReferenceCollector.Singletons">
            <summary>
            Collection of singletons
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtReferenceCollector.ExportTypes">
            <summary>
            Collection of types to export
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtReferenceCollector.ForwardDeclarations">
            <summary>
            Collection of forward declarations
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtReferenceCollector.ReferencedHeaders">
            <summary>
            Collection of referenced headers
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtReferenceCollector.AddCrossModuleReference(EpicGames.UHT.Types.UhtObject,System.Boolean)">
            <summary>
            Add a cross module reference
            </summary>
            <param name="obj">Object being referenced</param>
            <param name="registered">True if the object being referenced must be registered</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtReferenceCollector.AddDeclaration(EpicGames.UHT.Types.UhtObject,System.Boolean)">
            <summary>
            Add a declaration
            </summary>
            <param name="obj">Object being declared</param>
            <param name="registered">True if the object being declared must be registered</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtReferenceCollector.AddSingleton(EpicGames.UHT.Types.UhtField)">
            <summary>
            Add a singleton.  These are added as forward declared functions in the package file.
            </summary>
            <param name="field">Field being added</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtReferenceCollector.AddExportType(EpicGames.UHT.Types.UhtField)">
            <summary>
            Add a type to be exported.
            </summary>
            <param name="field">Type to be exported</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtReferenceCollector.AddForwardDeclaration(System.String)">
            <summary>
            Add a symbol that must be forward declared
            </summary>
            <param name="declaration">Symbol to be forward declared.</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtSourceFragment">
            <summary>
            To support the testing framework, source files can be containing in other source files.  
            A source fragment represents this possibility.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSourceFragment.SourceFile">
            <summary>
            When not null, this source comes from another source file
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSourceFragment.FilePath">
            <summary>
            The file path of the source
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSourceFragment.LineNumber">
            <summary>
            The line number of the fragment in the containing source file.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSourceFragment.Data">
            <summary>
            Data of the source file
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtExportFactory">
            <summary>
            Implementation of the export factory
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtExportFactory._session">
            <summary>
            UHT session
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtExportFactory._pluginModule">
            <summary>
            Module associated with the plugin
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtExportFactory.s_writeRefSemaphore">
            <summary>
            Limiter for the number of files being saved to the reference directory.
            The OS can get swamped on high core systems
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtExportFactory.Exporter">
            <summary>
            Requesting exporter
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtExportFactory.Session">
            <summary>
            UHT Session
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtExportFactory.PluginModule">
            <summary>
            Plugin module
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtExportFactory.ReferenceErrorMessages">
            <summary>
            Collection of error from mismatches with the reference files
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtExportFactory.Outputs">
            <summary>
            List of export outputs
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtExportFactory.ReferenceDirectory">
            <summary>
            Directory for the reference output
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtExportFactory.VerifyDirectory">
            <summary>
            Directory for the verify output
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtExportFactory.ExternalDependencies">
            <summary>
            Collection of external dependencies
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtExportFactory.#ctor(EpicGames.UHT.Utils.UhtSession,EpicGames.Core.UHTManifest.Module,EpicGames.UHT.Tables.UhtExporter)">
            <summary>
            Create a new instance of the export factory
            </summary>
            <param name="session">UHT session</param>
            <param name="pluginModule">Plugin module</param>
            <param name="exporter">Exporter being run</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtExportFactory.CommitOutput(System.String,System.Text.StringBuilder)">
            <summary>
            Commit the contents of the string builder as the output.
            If you have a string builder, use this method so that a 
            temporary buffer can be used.
            </summary>
            <param name="filePath">Destination file path</param>
            <param name="builder">Source for the content</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtExportFactory.CommitOutput(System.String,EpicGames.Core.StringView)">
            <summary>
            Commit the value of the string as the output
            </summary>
            <param name="filePath">Destination file path</param>
            <param name="output">Output to commit</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtExportFactory.CreateTask(System.Collections.Generic.List{System.Threading.Tasks.Task},EpicGames.UHT.Utils.UhtExportTaskDelegate)">
            <summary>
            Create a task to export two files
            </summary>
            <param name="prereqs">Tasks that must be completed prior to this task running</param>
            <param name="action">Action to be invoked to generate the output</param>
            <returns>Task object or null if the task was immediately executed.</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtExportFactory.CreateTask(EpicGames.UHT.Utils.UhtExportTaskDelegate)">
            <summary>
            Create a task to export two files
            </summary>
            <param name="action">Action to be invoked to generate the output</param>
            <returns>Task object or null if the task was immediately executed.</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtExportFactory.MakePath(EpicGames.UHT.Types.UhtHeaderFile,System.String)">
            <summary>
            Given a header file, generate the output file name.
            </summary>
            <param name="headerFile">Header file</param>
            <param name="suffix">Suffix/extension to be added to the file name.</param>
            <returns>Resulting file name</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtExportFactory.MakePath(EpicGames.UHT.Types.UhtPackage,System.String)">
            <summary>
            Given a package file, generate the output file name
            </summary>
            <param name="package">Package file</param>
            <param name="suffix">Suffix/extension to be added to the file name.</param>
            <returns>Resulting file name</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtExportFactory.MakePath(System.String,System.String)">
            <summary>
            Make a path for an output based on the package output directory.
            </summary>
            <param name="fileName">Name of the file</param>
            <param name="extension">Extension to add to the file</param>
            <returns>Output file path</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtExportFactory.AddExternalDependency(System.String)">
            <summary>
            Add an external dependency to the given file path
            </summary>
            <param name="filePath">External dependency to add</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtExportFactory.SaveIfChanged(System.String,System.String,EpicGames.Core.StringView)">
            <summary>
            Helper method to test to see if the output has changed.
            </summary>
            <param name="filePath">Name of the output file</param>
            <param name="tempFilePath">Name of the temporary file</param>
            <param name="exported">Exported contents of the file</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtExportFactory.Run">
            <summary>
            Run the output exporter
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtExportFactory.RenameSource(EpicGames.UHT.Utils.UhtExportFactory.Output)">
            <summary>
            Given an output, rename the output file from the temporary file name to the final file name.
            If there exists a current final file, it will be replaced.
            </summary>
            <param name="output">The output file to rename</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtExportFactory.CullOutputDirectory(System.String,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Given a directory and a list of known files, delete any unknown file that matches of the supplied filters
            </summary>
            <param name="outputDirectory">Output directory to scan</param>
            <param name="knownOutputs">Collection of known output files not to be deleted</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtExportFactory.IsFilterMatch(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Test to see if the given filename (without directory), matches one of the given filters
            </summary>
            <param name="fileName">File name to test</param>
            <param name="filters">List of wildcard filters</param>
            <returns>True if there is a match</returns>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtReferenceMode">
            <summary>
            UHT supports the exporting of two reference output directories for testing.  The reference version can be used to test
            modification to UHT and verify there are no output changes or just expected changes.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtReferenceMode.None">
            <summary>
            Do not export any reference output files
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtReferenceMode.Reference">
            <summary>
            Export the reference copy
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtReferenceMode.Verify">
            <summary>
            Export the verify copy and compare to the reference copy
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtSession">
            <summary>
            Session object that represents a UHT run
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtSession.TypeCounter">
            <summary>
            Helper class for returning a sequence of auto-incrementing indices
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtSession.TypeCounter._count">
            <summary>
            Current number of types
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.TypeCounter.GetNext">
            <summary>
            Get the next type index
            </summary>
            <returns>Index starting at zero</returns>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.TypeCounter.Count">
            <summary>
            The number of times GetNext was called.
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtSession.EnumAndValue">
            <summary>
            Pair that represents a specific value for an enumeration
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtSession.s_reservedNames">
            <summary>
            Collection of reserved names
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.Logger">
            <summary>
            Logger interface.  If not set, Log.Logger will be used
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.FileManager">
            <summary>
            Interface used to read/write files
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.EngineDirectory">
            <summary>
            Location of the engine code
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.ProjectFile">
            <summary>
            If set, the name of the project file.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.ProjectDirectory">
            <summary>
            Optional location of the project
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.RootDirectory">
            <summary>
            Root directory for the engine.  This is usually just EngineDirectory without the Engine directory.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.ReferenceDirectory">
            <summary>
            Directory to store the reference output
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.VerifyDirectory">
            <summary>
            Directory to store the verification output
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.ReferenceMode">
            <summary>
            Mode for generating and/or testing reference output
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.WarningsAsErrors">
            <summary>
            If true, warnings are considered to be errors
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.RelativePathInLog">
            <summary>
            If true, include relative file paths in the log file
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.GoWide">
            <summary>
            If true, use concurrent tasks to run UHT
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.FailIfGeneratedCodeChanges">
            <summary>
            If any output file mismatches existing outputs, an error will be generated
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.NoOutput">
            <summary>
            If true, no output files will be saved
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.CullOutput">
            <summary>
            If true, cull the output for any extra files
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.IncludeDebugOutput">
            <summary>
            If true, include extra output in code generation
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.NoDefaultExporters">
            <summary>
            If true, disable all exporters which would normally be run by default
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.CacheMessages">
            <summary>
            If true, cache any error messages until the end of processing.  This is used by the testing
            harness to generate more stable console output.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.Tables">
            <summary>
            Collection of UHT tables
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.Config">
            <summary>
            Configuration for the session
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.ManifestFile">
            <summary>
            Manifest file
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.Manifest">
            <summary>
            Manifest data from the manifest file
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.Packages">
            <summary>
            Collection of packages from the manifest
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.HeaderFiles">
            <summary>
            Collection of header files from the manifest.  The header files will also appear as the children 
            of the packages
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.SortedHeaderFiles">
            <summary>
            Collection of header files topologically sorted.  This will not be populated until after header files
            are parsed and resolved.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.HeaderFileDictionary">
            <summary>
            Dictionary of stripped file name to the header file
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.UObject">
            <summary>
            After headers are parsed, returns the UObject class.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.UClass">
            <summary>
            After headers are parsed, returns the UClass class.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.UInterface">
            <summary>
            After headers are parsed, returns the UInterface class.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.IInterface">
            <summary>
            After headers are parsed, returns the IInterface class.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.AActor">
            <summary>
            After headers are parsed, returns the AActor class.  Unlike such properties as "UObject", there
            is no requirement for AActor to be defined.  May be null.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.INotifyFieldValueChanged">
            <summary>
            After headers are parsed, return the INotifyFieldValueChanged interface.  There is no requirement 
            that this interface be defined.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.ErrorCount">
            <summary>
            The number of errors
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.WarningCount">
            <summary>
            The number of warnings
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.HasErrors">
            <summary>
            True if any errors have occurred or warnings if warnings are to be treated as errors 
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.MessageSession">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.MessageSource">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.MessageLineNumber">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.GetNextTypeIndex">
            <summary>
            Return the index for a newly defined type
            </summary>
            <returns>New index</returns>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.TypeCount">
            <summary>
            Return the number of types that have been defined.  This includes all types.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.GetNextHeaderFileTypeIndex">
            <summary>
            Return the index for a newly defined packaging
            </summary>
            <returns>New index</returns>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.HeaderFileTypeCount">
            <summary>
            Return the number of headers that have been defined
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.GetNextPackageTypeIndex">
            <summary>
            Return the index for a newly defined package
            </summary>
            <returns>New index</returns>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.PackageTypeCount">
            <summary>
            Return the number of UPackage types that have been defined
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.GetNextObjectTypeIndex">
            <summary>
            Return the index for a newly defined object
            </summary>
            <returns>New index</returns>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.ObjectTypeCount">
            <summary>
            Return the total number of UObject types that have been defined
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.ExporterTable">
            <summary>
            Return the collection of exporters
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.GetKeywordTable(System.String)">
            <summary>
            Return the keyword table for the given table name
            </summary>
            <param name="tableName">Name of the table</param>
            <returns>The requested table</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.GetSpecifierTable(System.String)">
            <summary>
            Return the specifier table for the given table name
            </summary>
            <param name="tableName">Name of the table</param>
            <returns>The requested table</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.GetSpecifierValidatorTable(System.String)">
            <summary>
            Return the specifier validator table for the given table name
            </summary>
            <param name="tableName">Name of the table</param>
            <returns>The requested table</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.LogUnhandledKeywordError(EpicGames.UHT.Tokenizer.IUhtTokenReader,EpicGames.UHT.Tokenizer.UhtToken)">
            <summary>
            Generate an error for the given unhandled keyword
            </summary>
            <param name="tokenReader">Token reader</param>
            <param name="token">Unhandled token</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.IsValidPropertyTypeName(EpicGames.Core.StringView)">
            <summary>
            Test to see if the given class name is a property
            </summary>
            <param name="name">Name of the class without the prefix</param>
            <returns>True if the class name is a property.  False if the class name isn't a property or isn't an engine class.</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.TryGetLocTextDefaultValue(EpicGames.Core.StringView,EpicGames.UHT.Tables.UhtLocTextDefaultValue@)">
            <summary>
            Return the loc text default value associated with the given name
            </summary>
            <param name="name"></param>
            <param name="locTextDefaultValue">Loc text default value handler</param>
            <returns></returns>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.DefaultPropertyType">
            <summary>
            Return the default processor
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.TryGetPropertyType(EpicGames.Core.StringView,EpicGames.UHT.Tables.UhtPropertyType@)">
            <summary>
            Return the property type associated with the given name
            </summary>
            <param name="name"></param>
            <param name="propertyType">Property type if matched</param>
            <returns></returns>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSession.DefaultStructDefaultValue">
            <summary>
            Fetch the default sanitizer
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.TryGetStructDefaultValue(EpicGames.Core.StringView,EpicGames.UHT.Tables.UhtStructDefaultValue@)">
            <summary>
            Return the structure default value associated with the given name
            </summary>
            <param name="name"></param>
            <param name="structDefaultValue">Structure default value handler</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.Run(System.String)">
            <summary>
            Run UHT on the given manifest.  Use the bHasError property to see if process was successful.
            </summary>
            <param name="manifestFilePath">Path to the manifest file</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.Try(EpicGames.UHT.Utils.IUhtMessageSource,System.Action)">
            <summary>
            Try the given action.  If an exception occurs that doesn't have the required
            context, use the supplied context to generate the message.
            </summary>
            <param name="messageSource">Message context for when the exception doesn't contain a context.</param>
            <param name="action">The lambda to be invoked</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.ReadSource(System.String)">
            <summary>
            Read the given source file
            </summary>
            <param name="filePath">Full or relative file path</param>
            <returns>Information about the read source</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.ReadSourceToBuffer(System.String)">
            <summary>
            Read the given source file
            </summary>
            <param name="filePath">Full or relative file path</param>
            <returns>Buffer containing the read data or null if not found.  The returned buffer must be returned to the cache via a call to UhtBuffer.Return</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.WriteSource(System.String,System.ReadOnlySpan{System.Char})">
            <summary>
            Write the given contents to the file
            </summary>
            <param name="filePath">Path to write to</param>
            <param name="contents">Contents to write</param>
            <returns>True if the source was written</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.RenameSource(System.String,System.String)">
            <summary>
            Rename the given file
            </summary>
            <param name="oldFilePath">Old file path name</param>
            <param name="newFilePath">New file path name</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.FindRegularEnumValue(System.String)">
            <summary>
            Given the name of a regular enum value, return the enum type
            </summary>
            <param name="name">Enum value</param>
            <returns>Associated regular enum type or null if not found or enum isn't a regular enum.</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.FindType(EpicGames.UHT.Types.UhtType,EpicGames.UHT.Types.UhtFindOptions,System.String,EpicGames.UHT.Utils.IUhtMessageSite,System.Int32)">
            <summary>
            Find the given type in the type hierarchy
            </summary>
            <param name="startingType">Starting point for searches</param>
            <param name="options">Options controlling what is searched</param>
            <param name="name">Name of the type.</param>
            <param name="messageSite">If supplied, then a error message will be generated if the type can not be found</param>
            <param name="lineNumber">Source code line number requesting the lookup.</param>
            <returns>The located type of null if not found</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.FindType(EpicGames.UHT.Types.UhtType,EpicGames.UHT.Types.UhtFindOptions,EpicGames.UHT.Tokenizer.UhtToken@,EpicGames.UHT.Utils.IUhtMessageSite)">
            <summary>
            Find the given type in the type hierarchy
            </summary>
            <param name="startingType">Starting point for searches</param>
            <param name="options">Options controlling what is searched</param>
            <param name="name">Name of the type.</param>
            <param name="messageSite">If supplied, then a error message will be generated if the type can not be found</param>
            <returns>The located type of null if not found</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.FindType(EpicGames.UHT.Types.UhtType,EpicGames.UHT.Types.UhtFindOptions,EpicGames.UHT.Tokenizer.UhtTokenList,EpicGames.UHT.Utils.IUhtMessageSite,System.Int32)">
            <summary>
            Find the given type in the type hierarchy
            </summary>
            <param name="startingType">If specified, this represents the starting type to use when searching base/owner chain for a match</param>
            <param name="options">Options controlling what is searched</param>
            <param name="identifiers">Enumeration of identifiers.</param>
            <param name="messageSite">If supplied, then a error message will be generated if the type can not be found</param>
            <param name="lineNumber">Source code line number requesting the lookup.</param>
            <returns>The located type of null if not found</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.FindType(EpicGames.UHT.Types.UhtType,EpicGames.UHT.Types.UhtFindOptions,EpicGames.UHT.Tokenizer.UhtToken[],EpicGames.UHT.Utils.IUhtMessageSite,System.Int32)">
            <summary>
            Find the given type in the type hierarchy
            </summary>
            <param name="startingType">If specified, this represents the starting type to use when searching base/owner chain for a match</param>
            <param name="options">Options controlling what is searched</param>
            <param name="identifiers">Enumeration of identifiers.</param>
            <param name="messageSite">If supplied, then a error message will be generated if the type can not be found</param>
            <param name="lineNumber">Source code line number requesting the lookup.</param>
            <returns>The located type of null if not found</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.FindTypeTwoNamesInternal(EpicGames.UHT.Types.UhtType,EpicGames.UHT.Types.UhtFindOptions,System.String,System.String)">
            <summary>
            Find the given type in the type hierarchy
            </summary>
            <param name="startingType">Starting point for searches</param>
            <param name="options">Options controlling what is searched</param>
            <param name="firstName">First name of the type.</param>
            <param name="secondName">Second name used by delegates in classes and namespace enumerations</param>
            <returns>The located type of null if not found</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.FindTypeInternal(EpicGames.UHT.Types.UhtType,EpicGames.UHT.Types.UhtFindOptions,System.String)">
            <summary>
            Find the given type in the type hierarchy
            </summary>
            <param name="startingType">Starting point for searches</param>
            <param name="options">Options controlling what is searched</param>
            <param name="name">Name of the type.</param>
            <returns>The located type of null if not found</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.ValidateFindOptions(EpicGames.UHT.Types.UhtFindOptions)">
            <summary>
            Verify that the options are valid.  Will also check to make sure the symbol table has been populated.
            </summary>
            <param name="options">Find options</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.FindTypeError(EpicGames.UHT.Utils.IUhtMessageSite,System.Int32,EpicGames.UHT.Types.UhtFindOptions,System.String)">
            <summary>
            Generate an error message for when a given symbol wasn't found.  The text will contain the list of types that the symbol must be
            </summary>
            <param name="messageSite">Destination for the message</param>
            <param name="lineNumber">Line number generating the error</param>
            <param name="options">Collection of required types</param>
            <param name="name">The name of the symbol</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.FindHeaderFile(System.String)">
            <summary>
            Search for the given header file by just the file name
            </summary>
            <param name="name">Name to be found</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.AddMessage(EpicGames.UHT.Utils.UhtMessage)">
            <summary>
            Add a message to the collection of output messages
            </summary>
            <param name="message">Message being added</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.LogMessages">
            <summary>
            Log all the collected messages to the log/console.  If messages aren't being
            cached, then this just waits until the flush task has completed.  If messages
            are being cached, they are sorted by file name and line number to ensure the 
            output is stable.
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.FlushMessages">
            <summary>
            Flush all pending messages to the logger
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.LogMessage(EpicGames.UHT.Utils.UhtMessage)">
            <summary>
            Log the given message
            </summary>
            <param name="msg">The message to be logged</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.CollectMessages">
            <summary>
            Return all of the messages into a list
            </summary>
            <returns>List of all the messages</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.ReplaceTypeInSymbolTable(EpicGames.UHT.Types.UhtType,EpicGames.UHT.Types.UhtType)">
            <summary>
            Given an existing and a new instance, replace the given type in the symbol table.
            This is used by the property resolution system to replace properties created during
            the parsing phase that couldn't be resoled until after all headers are parsed.
            </summary>
            <param name="oldType"></param>
            <param name="newType"></param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.HideTypeInSymbolTable(EpicGames.UHT.Types.UhtType)">
            <summary>
            Hide the given type in the symbol table
            </summary>
            <param name="typeToHide"></param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.FetchOrderedMessages">
            <summary>
            Return an ordered enumeration of all messages.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.GetMessageParts(EpicGames.UHT.Utils.UhtMessage,System.String@,System.Int32@,System.String@,System.String@,System.String@)">
            <summary>
            Extract the part of a message
            </summary>
            <param name="msg">Message being consider</param>
            <param name="filePath">Full path of file where error happened</param>
            <param name="lineNumber">Line number where error happened</param>
            <param name="fragmentPath">For multi-part files (test harness), the inner file</param>
            <param name="severity">Severity of the error</param>
            <param name="message">Text of the message</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.HandleException(EpicGames.UHT.Utils.IUhtMessageSource,System.Exception)">
            <summary>
            Handle the given exception with the provided message context
            </summary>
            <param name="messageSource">Context for the exception.  Required to handled all exceptions other than UHTException</param>
            <param name="e">Exception being handled</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.GetNormalizedFullFilePath(System.String)">
            <summary>
            Return the normalized path converted to a full path if possible. 
            Code should NOT depend on a full path being returned.
            
            In general, it is assumed that during normal UHT, all paths are already full paths.
            Only the test harness deals in relative paths.
            </summary>
            <param name="filePath">Path to normalize</param>
            <returns>Normalized path possibly converted to a full path.</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.ValidateScriptStructOkForNet(EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.UhtScriptStruct)">
            <summary>
            Validate that the given referenced script structure is valid for network operations.  If the structure
            is valid, then the result will be cached.  It not valid, errors will be generated each time the structure
            is referenced.
            </summary>
            <param name="referencingProperty">The property referencing a structure</param>
            <param name="referencedScriptStruct">The script structure being referenced</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.SetExporterStatus(System.String,System.Boolean)">
            <summary>
            Enable/Disable an exporter.  This overrides the default state of the exporter.
            </summary>
            <param name="name">Name of the exporter</param>
            <param name="enabled">If true, the exporter is to be enabled</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSession.IsPluginEnabled(System.String,System.Boolean)">
            <summary>
            Test to see if the given exporter plugin is enabled.
            </summary>
            <param name="pluginName">Name of the plugin</param>
            <param name="includeTargetCheck">If true, include a target check</param>
            <returns>True if enabled</returns>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtStringBuilderExtensions.TabsString">
            <summary>
            String of tabs used to generate code with proper indentation
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtStringBuilderExtensions.SpacesString">
            <summary>
            String of spaces used to generate code with proper indentation
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStringBuilderExtensions.AppendTabs(System.Text.StringBuilder,System.Int32)">
            <summary>
            Append tabs to the builder
            </summary>
            <param name="builder">Destination builder</param>
            <param name="tabs">Number of tabs to insert</param>
            <returns>Destination builder</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the number of tabs is out of range</exception>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStringBuilderExtensions.AppendSpaces(System.Text.StringBuilder,System.Int32)">
            <summary>
            Append spaces to the builder
            </summary>
            <param name="builder">Destination builder</param>
            <param name="spaces">Number of spaces to insert</param>
            <returns>Destination builder</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the number of spaces is out of range</exception>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStringBuilderExtensions.AppendNameDecl(System.Text.StringBuilder,System.String,System.String,System.String)">
            <summary>
            Append a name declaration to the builder
            </summary>
            <param name="builder">Destination builder</param>
            <param name="namePrefix">Name prefix</param>
            <param name="name">Name</param>
            <param name="nameSuffix">Optional name suffix</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStringBuilderExtensions.AppendNameDecl(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String)">
            <summary>
            Append a name declaration to the builder
            </summary>
            <param name="builder">Destination builder</param>
            <param name="context">Property context used to get the name prefix</param>
            <param name="name">Name</param>
            <param name="nameSuffix">Optional name suffix</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStringBuilderExtensions.AppendNameDef(System.Text.StringBuilder,System.String,System.String,System.String,System.String)">
            <summary>
            Append a name definition to the builder
            </summary>
            <param name="builder">Destination builder</param>
            <param name="staticsName">Optional name of the statics block which will be output in the form of "StaticsName::"</param>
            <param name="namePrefix">Name prefix</param>
            <param name="name">Name</param>
            <param name="nameSuffix">Optional name suffix</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStringBuilderExtensions.AppendNameDef(System.Text.StringBuilder,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String)">
            <summary>
            Append a name definition to the builder
            </summary>
            <param name="builder">Destination builder</param>
            <param name="context">Property context used to get the statics name and name prefix</param>
            <param name="name">Name</param>
            <param name="nameSuffix">Optional name suffix</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStringBuilderExtensions.AppendMetaDataParams(System.Text.StringBuilder,EpicGames.UHT.Types.UhtType,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Append the meta data parameters.  This is intended to be used as arguments to a function call.
            </summary>
            <param name="builder">Destination builder</param>
            <param name="type">Source type containing the meta data</param>
            <param name="staticsName">Optional name of the statics block which will be output in the form of "StaticsName::"</param>
            <param name="namePrefix">Name prefix</param>
            <param name="name">Name</param>
            <param name="nameSuffix">Optional name suffix</param>
            <param name="metaNameSuffix">Suffix to be added to the meta data name</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStringBuilderExtensions.AppendMetaDataParams(System.Text.StringBuilder,EpicGames.UHT.Types.UhtType,System.String,System.String)">
            <summary>
            Append the meta data parameters.  This is intended to be used as arguments to a function call.
            </summary>
            <param name="builder">Destination builder</param>
            <param name="type">Source type containing the meta data</param>
            <param name="staticsName">Optional name of the statics block which will be output in the form of "StaticsName::"</param>
            <param name="name">Name</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStringBuilderExtensions.AppendMetaDataParams(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String)">
            <summary>
            Append the meta data parameters.  This is intended to be used as arguments to a function call.
            </summary>
            <param name="builder">Destination builder</param>
            <param name="property">Source type containing the meta data</param>
            <param name="context">Property context used to get the statics name and name prefix</param>
            <param name="name">Name</param>
            <param name="nameSuffix">Optional name suffix</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStringBuilderExtensions.AppendMetaDataDecl(System.Text.StringBuilder,EpicGames.UHT.Types.UhtType,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Append the meta data declaration.
            </summary>
            <param name="builder">Destination builder</param>
            <param name="type">Source type containing the meta data</param>
            <param name="namePrefix">Name prefix</param>
            <param name="name">Name</param>
            <param name="nameSuffix">Optional name suffix</param>
            <param name="metaNameSuffix">Optional meta data name suffix</param>
            <param name="tabs">Number of tabs to indent</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStringBuilderExtensions.AppendMetaDataDecl(System.Text.StringBuilder,EpicGames.UHT.Types.UhtType,System.String,System.Int32)">
            <summary>
            Append the meta data declaration
            </summary>
            <param name="builder">Destination builder</param>
            <param name="type">Source type containing the meta data</param>
            <param name="name">Name</param>
            <param name="tabs">Number of tabs to indent</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStringBuilderExtensions.AppendMetaDataDecl(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <summary>
            Append the meta data declaration
            </summary>
            <param name="builder">Destination builder</param>
            <param name="property">Source type containing the meta data</param>
            <param name="context">Property context used to get the statics name and name prefix</param>
            <param name="name">Name</param>
            <param name="nameSuffix">Optional name suffix</param>
            <param name="tabs">Number of tabs to indent</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStringBuilderExtensions.AppendMetaDataDef(System.Text.StringBuilder,EpicGames.UHT.Types.UhtType,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Append the meta data definition.
            </summary>
            <param name="builder">Destination builder</param>
            <param name="type">Source type containing the meta data</param>
            <param name="staticsName">Optional name of the statics block which will be output in the form of "StaticsName::"</param>
            <param name="namePrefix">Name prefix</param>
            <param name="name">Name</param>
            <param name="nameSuffix">Optional name suffix</param>
            <param name="metaNameSuffix">Optional meta data name suffix</param>
            <param name="tabs">Number of tabs to indent</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStringBuilderExtensions.AppendMetaDataDef(System.Text.StringBuilder,EpicGames.UHT.Types.UhtType,System.String,System.String,System.Int32)">
            <summary>
            Append the meta data definition
            </summary>
            <param name="builder">Destination builder</param>
            <param name="type">Source type containing the meta data</param>
            <param name="staticsName">Optional name of the statics block which will be output in the form of "StaticsName::"</param>
            <param name="name">Name</param>
            <param name="tabs">Number of tabs to indent</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStringBuilderExtensions.AppendMetaDataDef(System.Text.StringBuilder,EpicGames.UHT.Types.UhtProperty,EpicGames.UHT.Types.IUhtPropertyMemberContext,System.String,System.String,System.Int32)">
            <summary>
            Append the meta data definition
            </summary>
            <param name="builder">Destination builder</param>
            <param name="property">Source type containing the meta data</param>
            <param name="context">Property context used to get the statics name and name prefix</param>
            <param name="name">Name</param>
            <param name="nameSuffix">Optional name suffix</param>
            <param name="tabs">Number of tabs to indent</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStringBuilderExtensions.AppendUTF8LiteralString(System.Text.StringBuilder,System.Boolean,System.String)">
            <summary>
            Append the given text as a UTF8 encoded string
            </summary>
            <param name="builder">Destination builder</param>
            <param name="useText">If false, don't encode the text but include a nullptr</param>
            <param name="text">Text to include or an empty string if null.</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStringBuilderExtensions.AppendUTF8LiteralString(System.Text.StringBuilder,EpicGames.Core.StringView)">
            <summary>
            Append the given text as a UTF8 encoded string
            </summary>
            <param name="builder">Destination builder</param>
            <param name="text">Text to be encoded</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStringBuilderExtensions.AppendEscapedUtf32(System.Text.StringBuilder,System.UInt64)">
            <summary>
            Encode a single UTF32 value as UTF8 characters
            </summary>
            <param name="builder">Destination builder</param>
            <param name="c">Character to encode</param>
            <returns>Destination builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStringBuilderExtensions.AppendClassSourceNameOrInterfaceName(System.Text.StringBuilder,EpicGames.UHT.Types.UhtClass)">
            <summary>
            Append the given name of the class but always encode interfaces as the native interface name (i.e. "I...")
            </summary>
            <param name="builder">Destination builder</param>
            <param name="classObj">Class to append name</param>
            <returns>Destination builder</returns>
            <exception cref="T:System.NotImplementedException">Class has an unexpected class type</exception>
        </member>
        <member name="T:EpicGames.UHT.Utils.StringBuilderCache">
            <summary>
            Provides a cache of StringBuilders
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.StringBuilderCache.Big">
            <summary>
            Cache of StringBuilders with large initial buffer sizes
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.StringBuilderCache.Small">
            <summary>
            Cache of StringBuilders with small initial buffer sizes
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.StringBuilderCache._capacity">
            <summary>
            Capacity of the cache
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.StringBuilderCache._initialBufferSize">
            <summary>
            Initial buffer size for new StringBuilders.  Resetting StringBuilders might result
            in the initial chunk size being smaller.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.StringBuilderCache._stack">
            <summary>
            Stack of cached StringBuilders
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.StringBuilderCache.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new StringBuilder cache
            </summary>
            <param name="capacity">Maximum number of StringBuilders to cache</param>
            <param name="initialBufferSize">Initial buffer size for newly created StringBuilders</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.StringBuilderCache.Borrow">
            <summary>
            Borrow a StringBuilder from the cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.StringBuilderCache.Return(System.Text.StringBuilder)">
            <summary>
            Return a StringBuilder to the cache
            </summary>
            <param name="builder">The builder being returned</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.BorrowStringBuilder">
            <summary>
            Structure to automate the borrowing and returning of a StringBuilder.
            Use some form of a "using" pattern.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.BorrowStringBuilder.Cache">
            <summary>
            Owning cache
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.BorrowStringBuilder.StringBuilder">
            <summary>
            Borrowed string builder
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.BorrowStringBuilder.#ctor(EpicGames.UHT.Utils.StringBuilderCache)">
            <summary>
            Borrow a string builder from the given cache
            </summary>
            <param name="cache">String builder cache</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.BorrowStringBuilder.Dispose">
            <summary>
            Return the string builder to the cache
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtSymbolTable">
            <summary>
            Symbol table
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtSymbolTable.Lookup">
            <summary>
            Represents symbol name lookup chain start.  Symbol chains are based on 
            the caseless name.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSymbolTable.Lookup.SymbolIndex">
            <summary>
            The type index of the symbol
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSymbolTable.Lookup.CasedIndex">
            <summary>
            When searching the caseless chain, the cased index is used to match the symbol based
            on the case named.
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtSymbolTable.Symbol">
            <summary>
            Entry in the symbol table
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSymbolTable.Symbol.Type">
            <summary>
            The type associated with the symbol
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSymbolTable.Symbol.MatchOptions">
            <summary>
            Mask of different find options which will match this symbol
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSymbolTable.Symbol.CasedIndex">
            <summary>
            The case lookup index for matching by case
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSymbolTable.Symbol.NextIndex">
            <summary>
            The next index in the symbol change based on cassless lookup
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtSymbolTable.Symbol.LastIndex">
            <summary>
            The last index in the chain.  This index is only used when the symbol entry is also acting as the list
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtSymbolTable._casedCount">
            <summary>
            Number of unique cased symbol names.  
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtSymbolTable._casedDictionary">
            <summary>
            Case name lookup table that returns the symbol index and the case index
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtSymbolTable._caselessDictionary">
            <summary>
            Caseless name lookup table that returns the symbol index
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtSymbolTable._symbols">
            <summary>
            Collection of symbols in the table
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSymbolTable.#ctor(System.Int32)">
            <summary>
            Constructs a new symbol table.
            </summary>
            <param name="typeCount">Number of types in the table.</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSymbolTable.Add(EpicGames.UHT.Types.UhtType,System.String)">
            <summary>
            Add a new type to the symbol table
            </summary>
            <param name="type">The type being added</param>
            <param name="name">The name of the type which could be the source name or the engine name</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSymbolTable.Replace(EpicGames.UHT.Types.UhtType,EpicGames.UHT.Types.UhtType,System.String)">
            <summary>
            Replace an entry in the symbol table.  This is used during property resolution to replace the 
            parser property (which could not resolve the property prior to the symbol table being created)
            with the fully resolved property.
            </summary>
            <param name="oldType">The old type being replaced.</param>
            <param name="newType">The new type.</param>
            <param name="name">The name of the type.</param>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Thrown if the symbol wasn't found.</exception>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSymbolTable.Hide(EpicGames.UHT.Types.UhtType,System.String)">
            <summary>
            Hide the given type in the symbol table
            </summary>
            <param name="typeToHide">Type to be hidden</param>
            <param name="name">The name of the type.</param>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Thrown if the symbol wasn't found.</exception>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSymbolTable.FindCasedType(EpicGames.UHT.Types.UhtType,EpicGames.UHT.Types.UhtFindOptions,System.String)">
            <summary>
            Lookup the given name using cased string compare.
            </summary>
            <param name="startingType">Starting type used to limit the scope of the search.</param>
            <param name="options">Options controlling what is search and what is returned.</param>
            <param name="name">Name to locate.</param>
            <returns>Found type or null if not found.</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSymbolTable.FindCaselessType(EpicGames.UHT.Types.UhtType,EpicGames.UHT.Types.UhtFindOptions,System.String)">
            <summary>
            Lookup the given name using caseless string compare.
            </summary>
            <param name="startingType">Starting type used to limit the scope of the search.</param>
            <param name="options">Options controlling what is search and what is returned.</param>
            <param name="name">Name to locate.</param>
            <returns>Found type or null if not found.</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSymbolTable.FindType(EpicGames.UHT.Types.UhtType,EpicGames.UHT.Types.UhtFindOptions,EpicGames.UHT.Utils.UhtSymbolTable.Lookup)">
            <summary>
            Lookup the given name.
            </summary>
            <param name="startingType">Starting type used to limit the scope of the search.</param>
            <param name="options">Options controlling what is search and what is returned.</param>
            <param name="lookup">Starting lookup location.</param>
            <returns>Found type or null if not found.</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSymbolTable.FindTypeSuperChain(EpicGames.UHT.Types.UhtType,EpicGames.UHT.Types.UhtFindOptions,EpicGames.UHT.Utils.UhtSymbolTable.Lookup@)">
            <summary>
            Lookup the given name using the super class/struct chain.
            </summary>
            <param name="startingType">Starting type used to limit the scope of the search.</param>
            <param name="options">Options controlling what is search and what is returned.</param>
            <param name="lookup">Starting lookup location.</param>
            <returns>Found type or null if not found.</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSymbolTable.FindTypeOuterChain(EpicGames.UHT.Types.UhtType,EpicGames.UHT.Types.UhtFindOptions,EpicGames.UHT.Utils.UhtSymbolTable.Lookup@)">
            <summary>
            Lookup the given name using the outer chain
            </summary>
            <param name="startingType">Starting type used to limit the scope of the search.</param>
            <param name="options">Options controlling what is search and what is returned.</param>
            <param name="lookup">Starting lookup location.</param>
            <returns>Found type or null if not found.</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSymbolTable.FindSymbolChain(EpicGames.UHT.Types.UhtType,EpicGames.UHT.Types.UhtFindOptions,EpicGames.UHT.Utils.UhtSymbolTable.Lookup@)">
            <summary>
            Lookup the given name 
            </summary>
            <param name="owner">Matching owner.</param>
            <param name="options">Options controlling what is search and what is returned.</param>
            <param name="lookup">Starting lookup location.</param>
            <returns>Found type or null if not found.</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSymbolTable.AddExisting(EpicGames.UHT.Types.UhtType,System.Int32,System.Int32)">
            <summary>
            Add a new type to the given symbol chain
            </summary>
            <param name="type">Type being added</param>
            <param name="casedIndex">Cased index</param>
            <param name="symbolIndex">Symbol index</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtSymbolTable.IsMatch(EpicGames.UHT.Types.UhtFindOptions,System.Int32,System.Int32)">
            <summary>
            Test to see if the given symbol matches the options
            </summary>
            <param name="options">Options to match</param>
            <param name="symbolIndex">Symbol index</param>
            <param name="casedIndex">Case index</param>
            <returns>True if the symbol is a match</returns>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtTableNames">
            <summary>
            Defines all the table names for the standard UHT types
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtTableNames.ClassBase">
            <summary>
            The class base table is common to UCLASS, UINTERFACE and native interfaces
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtTableNames.Class">
            <summary>
            Table for UCLASS
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtTableNames.Default">
            <summary>
            Default table applied to all other tables
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtTableNames.Enum">
            <summary>
            Table for UENUM
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtTableNames.Field">
            <summary>
            Table for all types considered a UField
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtTableNames.Function">
            <summary>
            Table for all functions
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtTableNames.Global">
            <summary>
            Table for the global/file scope
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtTableNames.Interface">
            <summary>
            Table for UINTERFACE
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtTableNames.NativeInterface">
            <summary>
            Table for interfaces
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtTableNames.Object">
            <summary>
            Table for all UObject types
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtTableNames.PropertyArgument">
            <summary>
            Table for properties that are function arguments
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtTableNames.PropertyMember">
            <summary>
            Table for properties that are struct/class members
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtTableNames.ScriptStruct">
            <summary>
            Table for USTRUCT
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtTableNames.Struct">
            <summary>
            Table for all UStruct objects (structs, classes, and functions)
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtLookupTableBase">
            <summary>
            Base class for table lookup system.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtLookupTableBase.ParentTable">
            <summary>
            This table inherits entries for the given table
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtLookupTableBase.TableName">
            <summary>
            Name of the table
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtLookupTableBase.UserName">
            <summary>
            User facing name of the table
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtLookupTableBase.Internal">
            <summary>
            Check to see if the table is internal
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtLookupTableBase.Implemented">
            <summary>
            If true, this table has been implemented and not just created on demand by another table
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtLookupTableBase._userName">
            <summary>
            Internal version of the user name.  If it hasn't been set, then the table name will be used
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtLookupTableBase.Merge(EpicGames.UHT.Utils.UhtLookupTableBase)">
            <summary>
            Merge the lookup table.  Duplicates will be ignored.
            </summary>
            <param name="baseTable">Base table being merged</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtLookupTableBase.GetSuffixedName(System.Type,System.Reflection.MethodInfo,System.String,System.String)">
            <summary>
            Given a method name, try to extract the entry name for a table
            </summary>
            <param name="classType">Class containing the method</param>
            <param name="methodInfo">Method information</param>
            <param name="inName">Optional name supplied by the attributes.  If specified, this name will be returned instead of extracted from the method name</param>
            <param name="suffix">Required suffix</param>
            <returns>The extracted name or the supplied name</returns>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtLookupTable`1">
            <summary>
            Lookup tables provide a method of associating actions with given C++ keyword or UE specifier
            </summary>
            <typeparam name="TValue">Keyword or specifier information</typeparam>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtLookupTable`1._lookup">
            <summary>
            Lookup dictionary for the specifiers
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtLookupTable`1.#ctor(EpicGames.Core.StringViewComparer)">
            <summary>
            Construct a new table
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtLookupTable`1.Add(System.String,`0)">
            <summary>
            Add the given value to the lookup table.  It will throw an exception if it is a duplicate.
            </summary>
            <param name="key">Key to be added</param>
            <param name="value">Value to be added</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtLookupTable`1.TryGetValue(EpicGames.Core.StringView,`0@)">
            <summary>
            Attempt to fetch the value associated with the key
            </summary>
            <param name="key">Lookup key</param>
            <param name="value">Value associated with the key</param>
            <returns>True if the key was found, false if not</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtLookupTable`1.Merge(EpicGames.UHT.Utils.UhtLookupTableBase)">
            <summary>
            Merge the lookup table.  Duplicates will be ignored.
            </summary>
            <param name="baseTable">Base table being merged</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtLookupTables`1">
            <summary>
            A collection of lookup tables by name.
            </summary>
            <typeparam name="TTable">Table type</typeparam>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtLookupTables`1.Tables">
            <summary>
            Collection of named tables
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtLookupTables`1.Name">
            <summary>
            The name of the group of tables
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtLookupTables`1.#ctor(System.String)">
            <summary>
            Create a new group of tables
            </summary>
            <param name="name">The name of the group</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtLookupTables`1.Get(System.String)">
            <summary>
            Given a table name, return the table.  If not found, a new one will be added with the given name.
            </summary>
            <param name="tableName">The name of the table to return</param>
            <returns>The table associated with the name.</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtLookupTables`1.Create(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create a table with the given information.  If the table already exists, it will be initialized with the given data.
            </summary>
            <param name="tableName">The name of the table</param>
            <param name="userName">The user facing name of the name</param>
            <param name="parentTableName">The parent table name used to merge table entries</param>
            <param name="tableIsInternal">If true, the table is internal and won't be visible to the user.</param>
            <returns>The created table</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtLookupTables`1.Merge">
            <summary>
            Merge the contents of all parent tables into their children.  This is done so that the 
            parent chain need not be searched when looking for table entries.
            </summary>
            <exception cref="T:EpicGames.UHT.Utils.UhtIceException">Thrown if there are problems with the tables.</exception>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtStandardTables">
            <summary>
            Bootstraps the standard UHT tables
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtStandardTables.EUhtCreateTablesFlags">
            <summary>
            Enumeration that specifies if the table is a specifier and/or keyword table
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtStandardTables.EUhtCreateTablesFlags.Keyword">
            <summary>
            A keyword table will be created
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.UhtStandardTables.EUhtCreateTablesFlags.Specifiers">
            <summary>
            A specifier table will be created
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStandardTables.InitStandardTables(EpicGames.UHT.Utils.UhtTables)">
            <summary>
            Create all of the standard scope tables.
            </summary>
            <param name="tables">UHT tables</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtStandardTables.CreateTables(EpicGames.UHT.Utils.UhtTables,System.String,System.String,EpicGames.UHT.Utils.UhtStandardTables.EUhtCreateTablesFlags,System.String,System.Boolean)">
            <summary>
            Creates a series of tables given the supplied setup
            </summary>
            <param name="tables">UHT tables</param>
            <param name="tableName">Name of the table.</param>
            <param name="tableUserName">Name presented to the user via error messages.</param>
            <param name="createTables">Types of tables to be created.</param>
            <param name="parentTableName">Name of the parent table or null for none.</param>
            <param name="tableIsInternal">If true, this table will not be included in any error messages.</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.UnrealHeaderToolAttribute">
            <summary>
            This attribute must be applied to any class that contains other UHT attributes.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UnrealHeaderToolAttribute.InitMethod">
            <summary>
            If specified, this method will be invoked once during the scan for attributes.
            It can be used to perform some one time initialization.
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtTables">
            <summary>
            UnrealHeaderTool avoids hard coding any table contents by using attributes to add entries to the tables.
            
            There are two basic styles of tables in UHT.  
            
            The first style is just a simple association of a string and an attribute.  For example, 
            the engine class table is just a collection of all the engine class names supported by the engine.
            
            The second style is a table of tables.  Depending on the context (i.e. is a "class" or "function" 
            being parsed), attributes will "extend" a given table adding an entry to that table and every
            table the derives from that table.  For example, the Keywords table will add "private" to the 
            "ClassBase" table.  Since the "Class", "Interface", and "NativeInterface" tables derive from
            "ClassBase", all of those tables will contain the keyword "private".
            
            See UhtTables.cs for a list of table names and how they relate to each other.
            
            Tables are implemented in the following source files:
            
            	UhtEngineClassTable.cs - Collection of all the engine class names.
            	UhtKeywordTable.cs - Collection of the C++ keywords that UHT understands.
            	UhtLocTextDefaultValueTable.cs - Collection of loctext default value parsing
            	UhtPropertyTypeTable.cs - Collection of the property type keywords.
            	UhtSpecifierTable.cs - Collection of the known specifiers
            	UhtSpecifierValidatorTable.cs - Collection of the specifier validators
            	UhtStructDefaultValueTable.cs - Collection of structure default value parsing
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtTables.SpecifierTables">
            <summary>
            Collection of specifier tables
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtTables.SpecifierValidatorTables">
            <summary>
            Collection of specifier validator tables
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtTables.KeywordTables">
            <summary>
            Collection of keyword tables
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtTables.PropertyTypeTable">
            <summary>
            Collection of property types
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtTables.StructDefaultValueTable">
            <summary>
            Collection of structure default values
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtTables.EngineClassTable">
            <summary>
            Collection of engine class types
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtTables.ExporterTable">
            <summary>
            Collection of exporters
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtTables.LocTextDefaultValueTable">
            <summary>
            Collection loc text default values
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtTables.#ctor">
            <summary>
            Construct a new table collection
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtTables.AddPlugins(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add a collection of plugin assembly file paths
            </summary>
            <param name="pluginAssembliesFilePaths">Collection of plugins to load</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtTables.IsUhtPlugin(System.String)">
            <summary>
            Check to see if the assembly is a UHT plugin
            </summary>
            <param name="assemblyFilePath">Path to the assembly file</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtTables.LoadAssembly(System.String)">
            <summary>
            Load the given assembly from the file path
            </summary>
            <param name="assemblyFilePath">Path to the file</param>
            <returns>Assembly if it is already loaded or could be loaded</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtTables.FindAssemblyByName(System.String)">
            <summary>
            Locate the assembly by name
            </summary>
            <param name="name">Name of the assembly</param>
            <returns>Assembly or null</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtTables.CheckForAttributes(System.Reflection.Assembly)">
            <summary>
            Check for UHT attributes on all types in the given assembly
            </summary>
            <param name="assembly">Assembly to scan</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtTables.CheckForAttributes(System.Type)">
            <summary>
            For the given type, look for any table related attributes 
            </summary>
            <param name="type">Type in question</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtListExtensions">
            <summary>
            Extensions to List that provides some uniqueness support to list elements 
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtListExtensions.AddUnique(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Add the given value if it isn't already contained within the list
            </summary>
            <param name="container">Destination container</param>
            <param name="value">Value to be added</param>
            <returns>True if the value was added, false if it was already present</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtListExtensions.AddUniqueRange(System.Collections.Generic.List{System.String},System.Collections.Generic.IEnumerable{EpicGames.Core.StringView})">
            <summary>
            Add the given values if they aren't already contained within the list
            </summary>
            <param name="container">Destination container</param>
            <param name="values">Values to be added</param>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtListExtensions.RemoveSwap(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Remove the given value but swap the last entry into the eliminated slot
            </summary>
            <param name="container">Container being modified</param>
            <param name="value">Value to be removed</param>
            <returns>True if the value was removed, false if not</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtListExtensions.RemoveSwapRange(System.Collections.Generic.List{System.String},System.Collections.Generic.IEnumerable{EpicGames.Core.StringView})">
            <summary>
            Remove a range of values from a container using swapping
            </summary>
            <param name="container">Container to be modified</param>
            <param name="values">List of values to be removed</param>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtEngineNameParts">
            <summary>
            UnrealEngine names often differ from the names in the source file.  The following 
            structure represents the different parts of the name
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtEngineNameParts.Prefix">
            <summary>
            Any prefix removed from the source name to create the engine name
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtEngineNameParts.EngineName">
            <summary>
            The name to be used by the Unreal Engine.
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.UhtEngineNameParts.IsDeprecated">
            <summary>
            The name contained the "DEPRECATED" text which has been removed from the engine name
            </summary>
        </member>
        <member name="T:EpicGames.UHT.Utils.UhtUtilities">
            <summary>
            Assorted utility functions
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtUtilities.MergeTypeNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            Given a collection of names, return a string containing the text of those names concatenated.
            </summary>
            <param name="typeNames">Collect of names to be merged</param>
            <param name="andOr">Text used to separate the names</param>
            <param name="quote">If true, add quotes around the names</param>
            <returns>Merged names</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.UhtUtilities.GetEngineNameParts(EpicGames.Core.StringView)">
            <summary>
            Split the given source name into the engine name parts
            </summary>
            <param name="sourceName">Source name</param>
            <returns>Resulting engine name parts</returns>
        </member>
        <member name="T:EpicGames.UHT.Utils.StringViewBuilder">
            <summary>
            String builder class that has support for StringView so that if a single instance of
            a StringView is appended, it is returned.
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.StringViewBuilder._stringView">
            <summary>
            When only a string view has been appended, this references that StringView
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.StringViewBuilder._stringBuilder">
            <summary>
            Represents more complex data being appended
            </summary>
        </member>
        <member name="F:EpicGames.UHT.Utils.StringViewBuilder._useStringBuilder">
            <summary>
            Set to true when the builder has switched to a StringBuilder (NOTE: This can probably be removed)
            </summary>
        </member>
        <member name="P:EpicGames.UHT.Utils.StringViewBuilder.Length">
            <summary>
            The length of the appended data
            </summary>
        </member>
        <member name="M:EpicGames.UHT.Utils.StringViewBuilder.ToStringView">
            <summary>
            Return the appended data as a StringView
            </summary>
            <returns>Contents of the builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.StringViewBuilder.ToString">
            <summary>
            Return the appended data as a string
            </summary>
            <returns>Contents of the builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.StringViewBuilder.Append(EpicGames.Core.StringView)">
            <summary>
            Append a StringView
            </summary>
            <param name="text">Text to be appended</param>
            <returns>The string builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.StringViewBuilder.Append(System.Char)">
            <summary>
            Append a character
            </summary>
            <param name="c">Character to be appended</param>
            <returns>The string builder</returns>
        </member>
        <member name="M:EpicGames.UHT.Utils.StringViewBuilder.SwitchToStringBuilder">
            <summary>
            If not already done, switch the builder to using a StringBuilder
            </summary>
        </member>
    </members>
</doc>
